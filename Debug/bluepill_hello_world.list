
bluepill_hello_world.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004984  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000010c  08004a94  08004a94  00014a94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004ba0  08004ba0  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08004ba0  08004ba0  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004ba0  08004ba0  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004ba0  08004ba0  00014ba0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004ba4  08004ba4  00014ba4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004ba8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000012c  20000070  08004c18  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000019c  08004c18  0002019c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008c1a  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000018a4  00000000  00000000  00028cb3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008d0  00000000  00000000  0002a558  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000830  00000000  00000000  0002ae28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017b58  00000000  00000000  0002b658  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a0d7  00000000  00000000  000431b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00086144  00000000  00000000  0004d287  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d33cb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002cc0  00000000  00000000  000d341c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000070 	.word	0x20000070
 800012c:	00000000 	.word	0x00000000
 8000130:	08004a7c 	.word	0x08004a7c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000074 	.word	0x20000074
 800014c:	08004a7c 	.word	0x08004a7c

08000150 <__aeabi_dmul>:
 8000150:	b570      	push	{r4, r5, r6, lr}
 8000152:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000156:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800015a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800015e:	bf1d      	ittte	ne
 8000160:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000164:	ea94 0f0c 	teqne	r4, ip
 8000168:	ea95 0f0c 	teqne	r5, ip
 800016c:	f000 f8de 	bleq	800032c <__aeabi_dmul+0x1dc>
 8000170:	442c      	add	r4, r5
 8000172:	ea81 0603 	eor.w	r6, r1, r3
 8000176:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800017a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800017e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000182:	bf18      	it	ne
 8000184:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000188:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800018c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000190:	d038      	beq.n	8000204 <__aeabi_dmul+0xb4>
 8000192:	fba0 ce02 	umull	ip, lr, r0, r2
 8000196:	f04f 0500 	mov.w	r5, #0
 800019a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800019e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80001a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80001a6:	f04f 0600 	mov.w	r6, #0
 80001aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80001ae:	f09c 0f00 	teq	ip, #0
 80001b2:	bf18      	it	ne
 80001b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80001b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80001bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80001c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80001c4:	d204      	bcs.n	80001d0 <__aeabi_dmul+0x80>
 80001c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80001ca:	416d      	adcs	r5, r5
 80001cc:	eb46 0606 	adc.w	r6, r6, r6
 80001d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80001d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80001d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80001dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80001e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80001e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80001e8:	bf88      	it	hi
 80001ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80001ee:	d81e      	bhi.n	800022e <__aeabi_dmul+0xde>
 80001f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80001f4:	bf08      	it	eq
 80001f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80001fa:	f150 0000 	adcs.w	r0, r0, #0
 80001fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000202:	bd70      	pop	{r4, r5, r6, pc}
 8000204:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000208:	ea46 0101 	orr.w	r1, r6, r1
 800020c:	ea40 0002 	orr.w	r0, r0, r2
 8000210:	ea81 0103 	eor.w	r1, r1, r3
 8000214:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000218:	bfc2      	ittt	gt
 800021a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800021e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000222:	bd70      	popgt	{r4, r5, r6, pc}
 8000224:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000228:	f04f 0e00 	mov.w	lr, #0
 800022c:	3c01      	subs	r4, #1
 800022e:	f300 80ab 	bgt.w	8000388 <__aeabi_dmul+0x238>
 8000232:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000236:	bfde      	ittt	le
 8000238:	2000      	movle	r0, #0
 800023a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800023e:	bd70      	pople	{r4, r5, r6, pc}
 8000240:	f1c4 0400 	rsb	r4, r4, #0
 8000244:	3c20      	subs	r4, #32
 8000246:	da35      	bge.n	80002b4 <__aeabi_dmul+0x164>
 8000248:	340c      	adds	r4, #12
 800024a:	dc1b      	bgt.n	8000284 <__aeabi_dmul+0x134>
 800024c:	f104 0414 	add.w	r4, r4, #20
 8000250:	f1c4 0520 	rsb	r5, r4, #32
 8000254:	fa00 f305 	lsl.w	r3, r0, r5
 8000258:	fa20 f004 	lsr.w	r0, r0, r4
 800025c:	fa01 f205 	lsl.w	r2, r1, r5
 8000260:	ea40 0002 	orr.w	r0, r0, r2
 8000264:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000268:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800026c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000270:	fa21 f604 	lsr.w	r6, r1, r4
 8000274:	eb42 0106 	adc.w	r1, r2, r6
 8000278:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800027c:	bf08      	it	eq
 800027e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000282:	bd70      	pop	{r4, r5, r6, pc}
 8000284:	f1c4 040c 	rsb	r4, r4, #12
 8000288:	f1c4 0520 	rsb	r5, r4, #32
 800028c:	fa00 f304 	lsl.w	r3, r0, r4
 8000290:	fa20 f005 	lsr.w	r0, r0, r5
 8000294:	fa01 f204 	lsl.w	r2, r1, r4
 8000298:	ea40 0002 	orr.w	r0, r0, r2
 800029c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80002a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002a4:	f141 0100 	adc.w	r1, r1, #0
 80002a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002ac:	bf08      	it	eq
 80002ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002b2:	bd70      	pop	{r4, r5, r6, pc}
 80002b4:	f1c4 0520 	rsb	r5, r4, #32
 80002b8:	fa00 f205 	lsl.w	r2, r0, r5
 80002bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80002c0:	fa20 f304 	lsr.w	r3, r0, r4
 80002c4:	fa01 f205 	lsl.w	r2, r1, r5
 80002c8:	ea43 0302 	orr.w	r3, r3, r2
 80002cc:	fa21 f004 	lsr.w	r0, r1, r4
 80002d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	fa21 f204 	lsr.w	r2, r1, r4
 80002d8:	ea20 0002 	bic.w	r0, r0, r2
 80002dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80002e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002e4:	bf08      	it	eq
 80002e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002ea:	bd70      	pop	{r4, r5, r6, pc}
 80002ec:	f094 0f00 	teq	r4, #0
 80002f0:	d10f      	bne.n	8000312 <__aeabi_dmul+0x1c2>
 80002f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80002f6:	0040      	lsls	r0, r0, #1
 80002f8:	eb41 0101 	adc.w	r1, r1, r1
 80002fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000300:	bf08      	it	eq
 8000302:	3c01      	subeq	r4, #1
 8000304:	d0f7      	beq.n	80002f6 <__aeabi_dmul+0x1a6>
 8000306:	ea41 0106 	orr.w	r1, r1, r6
 800030a:	f095 0f00 	teq	r5, #0
 800030e:	bf18      	it	ne
 8000310:	4770      	bxne	lr
 8000312:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000316:	0052      	lsls	r2, r2, #1
 8000318:	eb43 0303 	adc.w	r3, r3, r3
 800031c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000320:	bf08      	it	eq
 8000322:	3d01      	subeq	r5, #1
 8000324:	d0f7      	beq.n	8000316 <__aeabi_dmul+0x1c6>
 8000326:	ea43 0306 	orr.w	r3, r3, r6
 800032a:	4770      	bx	lr
 800032c:	ea94 0f0c 	teq	r4, ip
 8000330:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000334:	bf18      	it	ne
 8000336:	ea95 0f0c 	teqne	r5, ip
 800033a:	d00c      	beq.n	8000356 <__aeabi_dmul+0x206>
 800033c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000340:	bf18      	it	ne
 8000342:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000346:	d1d1      	bne.n	80002ec <__aeabi_dmul+0x19c>
 8000348:	ea81 0103 	eor.w	r1, r1, r3
 800034c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000350:	f04f 0000 	mov.w	r0, #0
 8000354:	bd70      	pop	{r4, r5, r6, pc}
 8000356:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800035a:	bf06      	itte	eq
 800035c:	4610      	moveq	r0, r2
 800035e:	4619      	moveq	r1, r3
 8000360:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000364:	d019      	beq.n	800039a <__aeabi_dmul+0x24a>
 8000366:	ea94 0f0c 	teq	r4, ip
 800036a:	d102      	bne.n	8000372 <__aeabi_dmul+0x222>
 800036c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000370:	d113      	bne.n	800039a <__aeabi_dmul+0x24a>
 8000372:	ea95 0f0c 	teq	r5, ip
 8000376:	d105      	bne.n	8000384 <__aeabi_dmul+0x234>
 8000378:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800037c:	bf1c      	itt	ne
 800037e:	4610      	movne	r0, r2
 8000380:	4619      	movne	r1, r3
 8000382:	d10a      	bne.n	800039a <__aeabi_dmul+0x24a>
 8000384:	ea81 0103 	eor.w	r1, r1, r3
 8000388:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800038c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000390:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000394:	f04f 0000 	mov.w	r0, #0
 8000398:	bd70      	pop	{r4, r5, r6, pc}
 800039a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800039e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80003a2:	bd70      	pop	{r4, r5, r6, pc}

080003a4 <__aeabi_drsub>:
 80003a4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80003a8:	e002      	b.n	80003b0 <__adddf3>
 80003aa:	bf00      	nop

080003ac <__aeabi_dsub>:
 80003ac:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080003b0 <__adddf3>:
 80003b0:	b530      	push	{r4, r5, lr}
 80003b2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003b6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003ba:	ea94 0f05 	teq	r4, r5
 80003be:	bf08      	it	eq
 80003c0:	ea90 0f02 	teqeq	r0, r2
 80003c4:	bf1f      	itttt	ne
 80003c6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003ca:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ce:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003d2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d6:	f000 80e2 	beq.w	800059e <__adddf3+0x1ee>
 80003da:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003de:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003e2:	bfb8      	it	lt
 80003e4:	426d      	neglt	r5, r5
 80003e6:	dd0c      	ble.n	8000402 <__adddf3+0x52>
 80003e8:	442c      	add	r4, r5
 80003ea:	ea80 0202 	eor.w	r2, r0, r2
 80003ee:	ea81 0303 	eor.w	r3, r1, r3
 80003f2:	ea82 0000 	eor.w	r0, r2, r0
 80003f6:	ea83 0101 	eor.w	r1, r3, r1
 80003fa:	ea80 0202 	eor.w	r2, r0, r2
 80003fe:	ea81 0303 	eor.w	r3, r1, r3
 8000402:	2d36      	cmp	r5, #54	; 0x36
 8000404:	bf88      	it	hi
 8000406:	bd30      	pophi	{r4, r5, pc}
 8000408:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800040c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000410:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000414:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000418:	d002      	beq.n	8000420 <__adddf3+0x70>
 800041a:	4240      	negs	r0, r0
 800041c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000420:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000424:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000428:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800042c:	d002      	beq.n	8000434 <__adddf3+0x84>
 800042e:	4252      	negs	r2, r2
 8000430:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000434:	ea94 0f05 	teq	r4, r5
 8000438:	f000 80a7 	beq.w	800058a <__adddf3+0x1da>
 800043c:	f1a4 0401 	sub.w	r4, r4, #1
 8000440:	f1d5 0e20 	rsbs	lr, r5, #32
 8000444:	db0d      	blt.n	8000462 <__adddf3+0xb2>
 8000446:	fa02 fc0e 	lsl.w	ip, r2, lr
 800044a:	fa22 f205 	lsr.w	r2, r2, r5
 800044e:	1880      	adds	r0, r0, r2
 8000450:	f141 0100 	adc.w	r1, r1, #0
 8000454:	fa03 f20e 	lsl.w	r2, r3, lr
 8000458:	1880      	adds	r0, r0, r2
 800045a:	fa43 f305 	asr.w	r3, r3, r5
 800045e:	4159      	adcs	r1, r3
 8000460:	e00e      	b.n	8000480 <__adddf3+0xd0>
 8000462:	f1a5 0520 	sub.w	r5, r5, #32
 8000466:	f10e 0e20 	add.w	lr, lr, #32
 800046a:	2a01      	cmp	r2, #1
 800046c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000470:	bf28      	it	cs
 8000472:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000476:	fa43 f305 	asr.w	r3, r3, r5
 800047a:	18c0      	adds	r0, r0, r3
 800047c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000484:	d507      	bpl.n	8000496 <__adddf3+0xe6>
 8000486:	f04f 0e00 	mov.w	lr, #0
 800048a:	f1dc 0c00 	rsbs	ip, ip, #0
 800048e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000492:	eb6e 0101 	sbc.w	r1, lr, r1
 8000496:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800049a:	d31b      	bcc.n	80004d4 <__adddf3+0x124>
 800049c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80004a0:	d30c      	bcc.n	80004bc <__adddf3+0x10c>
 80004a2:	0849      	lsrs	r1, r1, #1
 80004a4:	ea5f 0030 	movs.w	r0, r0, rrx
 80004a8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004ac:	f104 0401 	add.w	r4, r4, #1
 80004b0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004b4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80004b8:	f080 809a 	bcs.w	80005f0 <__adddf3+0x240>
 80004bc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004c0:	bf08      	it	eq
 80004c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004c6:	f150 0000 	adcs.w	r0, r0, #0
 80004ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ce:	ea41 0105 	orr.w	r1, r1, r5
 80004d2:	bd30      	pop	{r4, r5, pc}
 80004d4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004d8:	4140      	adcs	r0, r0
 80004da:	eb41 0101 	adc.w	r1, r1, r1
 80004de:	3c01      	subs	r4, #1
 80004e0:	bf28      	it	cs
 80004e2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80004e6:	d2e9      	bcs.n	80004bc <__adddf3+0x10c>
 80004e8:	f091 0f00 	teq	r1, #0
 80004ec:	bf04      	itt	eq
 80004ee:	4601      	moveq	r1, r0
 80004f0:	2000      	moveq	r0, #0
 80004f2:	fab1 f381 	clz	r3, r1
 80004f6:	bf08      	it	eq
 80004f8:	3320      	addeq	r3, #32
 80004fa:	f1a3 030b 	sub.w	r3, r3, #11
 80004fe:	f1b3 0220 	subs.w	r2, r3, #32
 8000502:	da0c      	bge.n	800051e <__adddf3+0x16e>
 8000504:	320c      	adds	r2, #12
 8000506:	dd08      	ble.n	800051a <__adddf3+0x16a>
 8000508:	f102 0c14 	add.w	ip, r2, #20
 800050c:	f1c2 020c 	rsb	r2, r2, #12
 8000510:	fa01 f00c 	lsl.w	r0, r1, ip
 8000514:	fa21 f102 	lsr.w	r1, r1, r2
 8000518:	e00c      	b.n	8000534 <__adddf3+0x184>
 800051a:	f102 0214 	add.w	r2, r2, #20
 800051e:	bfd8      	it	le
 8000520:	f1c2 0c20 	rsble	ip, r2, #32
 8000524:	fa01 f102 	lsl.w	r1, r1, r2
 8000528:	fa20 fc0c 	lsr.w	ip, r0, ip
 800052c:	bfdc      	itt	le
 800052e:	ea41 010c 	orrle.w	r1, r1, ip
 8000532:	4090      	lslle	r0, r2
 8000534:	1ae4      	subs	r4, r4, r3
 8000536:	bfa2      	ittt	ge
 8000538:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800053c:	4329      	orrge	r1, r5
 800053e:	bd30      	popge	{r4, r5, pc}
 8000540:	ea6f 0404 	mvn.w	r4, r4
 8000544:	3c1f      	subs	r4, #31
 8000546:	da1c      	bge.n	8000582 <__adddf3+0x1d2>
 8000548:	340c      	adds	r4, #12
 800054a:	dc0e      	bgt.n	800056a <__adddf3+0x1ba>
 800054c:	f104 0414 	add.w	r4, r4, #20
 8000550:	f1c4 0220 	rsb	r2, r4, #32
 8000554:	fa20 f004 	lsr.w	r0, r0, r4
 8000558:	fa01 f302 	lsl.w	r3, r1, r2
 800055c:	ea40 0003 	orr.w	r0, r0, r3
 8000560:	fa21 f304 	lsr.w	r3, r1, r4
 8000564:	ea45 0103 	orr.w	r1, r5, r3
 8000568:	bd30      	pop	{r4, r5, pc}
 800056a:	f1c4 040c 	rsb	r4, r4, #12
 800056e:	f1c4 0220 	rsb	r2, r4, #32
 8000572:	fa20 f002 	lsr.w	r0, r0, r2
 8000576:	fa01 f304 	lsl.w	r3, r1, r4
 800057a:	ea40 0003 	orr.w	r0, r0, r3
 800057e:	4629      	mov	r1, r5
 8000580:	bd30      	pop	{r4, r5, pc}
 8000582:	fa21 f004 	lsr.w	r0, r1, r4
 8000586:	4629      	mov	r1, r5
 8000588:	bd30      	pop	{r4, r5, pc}
 800058a:	f094 0f00 	teq	r4, #0
 800058e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000592:	bf06      	itte	eq
 8000594:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000598:	3401      	addeq	r4, #1
 800059a:	3d01      	subne	r5, #1
 800059c:	e74e      	b.n	800043c <__adddf3+0x8c>
 800059e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005a2:	bf18      	it	ne
 80005a4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005a8:	d029      	beq.n	80005fe <__adddf3+0x24e>
 80005aa:	ea94 0f05 	teq	r4, r5
 80005ae:	bf08      	it	eq
 80005b0:	ea90 0f02 	teqeq	r0, r2
 80005b4:	d005      	beq.n	80005c2 <__adddf3+0x212>
 80005b6:	ea54 0c00 	orrs.w	ip, r4, r0
 80005ba:	bf04      	itt	eq
 80005bc:	4619      	moveq	r1, r3
 80005be:	4610      	moveq	r0, r2
 80005c0:	bd30      	pop	{r4, r5, pc}
 80005c2:	ea91 0f03 	teq	r1, r3
 80005c6:	bf1e      	ittt	ne
 80005c8:	2100      	movne	r1, #0
 80005ca:	2000      	movne	r0, #0
 80005cc:	bd30      	popne	{r4, r5, pc}
 80005ce:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005d2:	d105      	bne.n	80005e0 <__adddf3+0x230>
 80005d4:	0040      	lsls	r0, r0, #1
 80005d6:	4149      	adcs	r1, r1
 80005d8:	bf28      	it	cs
 80005da:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005de:	bd30      	pop	{r4, r5, pc}
 80005e0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80005e4:	bf3c      	itt	cc
 80005e6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80005ea:	bd30      	popcc	{r4, r5, pc}
 80005ec:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005f0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80005f4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80005f8:	f04f 0000 	mov.w	r0, #0
 80005fc:	bd30      	pop	{r4, r5, pc}
 80005fe:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000602:	bf1a      	itte	ne
 8000604:	4619      	movne	r1, r3
 8000606:	4610      	movne	r0, r2
 8000608:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800060c:	bf1c      	itt	ne
 800060e:	460b      	movne	r3, r1
 8000610:	4602      	movne	r2, r0
 8000612:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000616:	bf06      	itte	eq
 8000618:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800061c:	ea91 0f03 	teqeq	r1, r3
 8000620:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000624:	bd30      	pop	{r4, r5, pc}
 8000626:	bf00      	nop

08000628 <__aeabi_ui2d>:
 8000628:	f090 0f00 	teq	r0, #0
 800062c:	bf04      	itt	eq
 800062e:	2100      	moveq	r1, #0
 8000630:	4770      	bxeq	lr
 8000632:	b530      	push	{r4, r5, lr}
 8000634:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000638:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800063c:	f04f 0500 	mov.w	r5, #0
 8000640:	f04f 0100 	mov.w	r1, #0
 8000644:	e750      	b.n	80004e8 <__adddf3+0x138>
 8000646:	bf00      	nop

08000648 <__aeabi_i2d>:
 8000648:	f090 0f00 	teq	r0, #0
 800064c:	bf04      	itt	eq
 800064e:	2100      	moveq	r1, #0
 8000650:	4770      	bxeq	lr
 8000652:	b530      	push	{r4, r5, lr}
 8000654:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000658:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800065c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000660:	bf48      	it	mi
 8000662:	4240      	negmi	r0, r0
 8000664:	f04f 0100 	mov.w	r1, #0
 8000668:	e73e      	b.n	80004e8 <__adddf3+0x138>
 800066a:	bf00      	nop

0800066c <__aeabi_f2d>:
 800066c:	0042      	lsls	r2, r0, #1
 800066e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000672:	ea4f 0131 	mov.w	r1, r1, rrx
 8000676:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800067a:	bf1f      	itttt	ne
 800067c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000680:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000684:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000688:	4770      	bxne	lr
 800068a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800068e:	bf08      	it	eq
 8000690:	4770      	bxeq	lr
 8000692:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000696:	bf04      	itt	eq
 8000698:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800069c:	4770      	bxeq	lr
 800069e:	b530      	push	{r4, r5, lr}
 80006a0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80006a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006ac:	e71c      	b.n	80004e8 <__adddf3+0x138>
 80006ae:	bf00      	nop

080006b0 <__aeabi_ul2d>:
 80006b0:	ea50 0201 	orrs.w	r2, r0, r1
 80006b4:	bf08      	it	eq
 80006b6:	4770      	bxeq	lr
 80006b8:	b530      	push	{r4, r5, lr}
 80006ba:	f04f 0500 	mov.w	r5, #0
 80006be:	e00a      	b.n	80006d6 <__aeabi_l2d+0x16>

080006c0 <__aeabi_l2d>:
 80006c0:	ea50 0201 	orrs.w	r2, r0, r1
 80006c4:	bf08      	it	eq
 80006c6:	4770      	bxeq	lr
 80006c8:	b530      	push	{r4, r5, lr}
 80006ca:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006ce:	d502      	bpl.n	80006d6 <__aeabi_l2d+0x16>
 80006d0:	4240      	negs	r0, r0
 80006d2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006d6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006da:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006de:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006e2:	f43f aed8 	beq.w	8000496 <__adddf3+0xe6>
 80006e6:	f04f 0203 	mov.w	r2, #3
 80006ea:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006ee:	bf18      	it	ne
 80006f0:	3203      	addne	r2, #3
 80006f2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006f6:	bf18      	it	ne
 80006f8:	3203      	addne	r2, #3
 80006fa:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006fe:	f1c2 0320 	rsb	r3, r2, #32
 8000702:	fa00 fc03 	lsl.w	ip, r0, r3
 8000706:	fa20 f002 	lsr.w	r0, r0, r2
 800070a:	fa01 fe03 	lsl.w	lr, r1, r3
 800070e:	ea40 000e 	orr.w	r0, r0, lr
 8000712:	fa21 f102 	lsr.w	r1, r1, r2
 8000716:	4414      	add	r4, r2
 8000718:	e6bd      	b.n	8000496 <__adddf3+0xe6>
 800071a:	bf00      	nop

0800071c <__aeabi_d2uiz>:
 800071c:	004a      	lsls	r2, r1, #1
 800071e:	d211      	bcs.n	8000744 <__aeabi_d2uiz+0x28>
 8000720:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000724:	d211      	bcs.n	800074a <__aeabi_d2uiz+0x2e>
 8000726:	d50d      	bpl.n	8000744 <__aeabi_d2uiz+0x28>
 8000728:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800072c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000730:	d40e      	bmi.n	8000750 <__aeabi_d2uiz+0x34>
 8000732:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000736:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800073a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800073e:	fa23 f002 	lsr.w	r0, r3, r2
 8000742:	4770      	bx	lr
 8000744:	f04f 0000 	mov.w	r0, #0
 8000748:	4770      	bx	lr
 800074a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800074e:	d102      	bne.n	8000756 <__aeabi_d2uiz+0x3a>
 8000750:	f04f 30ff 	mov.w	r0, #4294967295
 8000754:	4770      	bx	lr
 8000756:	f04f 0000 	mov.w	r0, #0
 800075a:	4770      	bx	lr

0800075c <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 800075c:	b480      	push	{r7}
 800075e:	b083      	sub	sp, #12
 8000760:	af00      	add	r7, sp, #0
 8000762:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000764:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000768:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 800076c:	f003 0301 	and.w	r3, r3, #1
 8000770:	2b00      	cmp	r3, #0
 8000772:	d013      	beq.n	800079c <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000774:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000778:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 800077c:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000780:	2b00      	cmp	r3, #0
 8000782:	d00b      	beq.n	800079c <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000784:	e000      	b.n	8000788 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000786:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000788:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800078c:	681b      	ldr	r3, [r3, #0]
 800078e:	2b00      	cmp	r3, #0
 8000790:	d0f9      	beq.n	8000786 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000792:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000796:	687a      	ldr	r2, [r7, #4]
 8000798:	b2d2      	uxtb	r2, r2
 800079a:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 800079c:	687b      	ldr	r3, [r7, #4]
}
 800079e:	4618      	mov	r0, r3
 80007a0:	370c      	adds	r7, #12
 80007a2:	46bd      	mov	sp, r7
 80007a4:	bc80      	pop	{r7}
 80007a6:	4770      	bx	lr

080007a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b086      	sub	sp, #24
 80007ac:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007ae:	f000 fc6b 	bl	8001088 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007b2:	f000 f945 	bl	8000a40 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007b6:	f000 f9ed 	bl	8000b94 <MX_GPIO_Init>
  MX_CAN_Init();
 80007ba:	f000 f987 	bl	8000acc <MX_CAN_Init>
  MX_I2C1_Init();
 80007be:	f000 f9bb 	bl	8000b38 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  canfil.FilterBank = 0;
 80007c2:	4b93      	ldr	r3, [pc, #588]	; (8000a10 <main+0x268>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	615a      	str	r2, [r3, #20]
  canfil.FilterMode = CAN_FILTERMODE_IDMASK;
 80007c8:	4b91      	ldr	r3, [pc, #580]	; (8000a10 <main+0x268>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	619a      	str	r2, [r3, #24]
  canfil.FilterFIFOAssignment = CAN_RX_FIFO0;
 80007ce:	4b90      	ldr	r3, [pc, #576]	; (8000a10 <main+0x268>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	611a      	str	r2, [r3, #16]
  canfil.FilterIdHigh = 0;
 80007d4:	4b8e      	ldr	r3, [pc, #568]	; (8000a10 <main+0x268>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	601a      	str	r2, [r3, #0]
  canfil.FilterIdLow = 0;
 80007da:	4b8d      	ldr	r3, [pc, #564]	; (8000a10 <main+0x268>)
 80007dc:	2200      	movs	r2, #0
 80007de:	605a      	str	r2, [r3, #4]
  canfil.FilterMaskIdHigh = 0;
 80007e0:	4b8b      	ldr	r3, [pc, #556]	; (8000a10 <main+0x268>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	609a      	str	r2, [r3, #8]
  canfil.FilterMaskIdLow = 0;
 80007e6:	4b8a      	ldr	r3, [pc, #552]	; (8000a10 <main+0x268>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	60da      	str	r2, [r3, #12]
  canfil.FilterScale = CAN_FILTERSCALE_32BIT;
 80007ec:	4b88      	ldr	r3, [pc, #544]	; (8000a10 <main+0x268>)
 80007ee:	2201      	movs	r2, #1
 80007f0:	61da      	str	r2, [r3, #28]
  canfil.FilterActivation = ENABLE;
 80007f2:	4b87      	ldr	r3, [pc, #540]	; (8000a10 <main+0x268>)
 80007f4:	2201      	movs	r2, #1
 80007f6:	621a      	str	r2, [r3, #32]
  canfil.SlaveStartFilterBank = 14;
 80007f8:	4b85      	ldr	r3, [pc, #532]	; (8000a10 <main+0x268>)
 80007fa:	220e      	movs	r2, #14
 80007fc:	625a      	str	r2, [r3, #36]	; 0x24

  txHeader.DLC = 8; // Number of bites to be transmitted max- 8
 80007fe:	4b85      	ldr	r3, [pc, #532]	; (8000a14 <main+0x26c>)
 8000800:	2208      	movs	r2, #8
 8000802:	611a      	str	r2, [r3, #16]
  txHeader.IDE = CAN_ID_STD;
 8000804:	4b83      	ldr	r3, [pc, #524]	; (8000a14 <main+0x26c>)
 8000806:	2200      	movs	r2, #0
 8000808:	609a      	str	r2, [r3, #8]
  txHeader.RTR = CAN_RTR_DATA;
 800080a:	4b82      	ldr	r3, [pc, #520]	; (8000a14 <main+0x26c>)
 800080c:	2200      	movs	r2, #0
 800080e:	60da      	str	r2, [r3, #12]
  txHeader.StdId = 0x030;
 8000810:	4b80      	ldr	r3, [pc, #512]	; (8000a14 <main+0x26c>)
 8000812:	2230      	movs	r2, #48	; 0x30
 8000814:	601a      	str	r2, [r3, #0]
  txHeader.ExtId = 0x02;
 8000816:	4b7f      	ldr	r3, [pc, #508]	; (8000a14 <main+0x26c>)
 8000818:	2202      	movs	r2, #2
 800081a:	605a      	str	r2, [r3, #4]
  txHeader.TransmitGlobalTime = DISABLE;
 800081c:	4b7d      	ldr	r3, [pc, #500]	; (8000a14 <main+0x26c>)
 800081e:	2200      	movs	r2, #0
 8000820:	751a      	strb	r2, [r3, #20]

  HAL_CAN_ConfigFilter(&hcan,&canfil); //Initialize CAN Filter
 8000822:	497b      	ldr	r1, [pc, #492]	; (8000a10 <main+0x268>)
 8000824:	487c      	ldr	r0, [pc, #496]	; (8000a18 <main+0x270>)
 8000826:	f000 fdb0 	bl	800138a <HAL_CAN_ConfigFilter>
  HAL_CAN_Start(&hcan); //Initialize CAN Bus
 800082a:	487b      	ldr	r0, [pc, #492]	; (8000a18 <main+0x270>)
 800082c:	f000 fe76 	bl	800151c <HAL_CAN_Start>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if (counter % 10 == 0 ){
 8000830:	4b7a      	ldr	r3, [pc, #488]	; (8000a1c <main+0x274>)
 8000832:	781a      	ldrb	r2, [r3, #0]
 8000834:	4b7a      	ldr	r3, [pc, #488]	; (8000a20 <main+0x278>)
 8000836:	fba3 1302 	umull	r1, r3, r3, r2
 800083a:	08d9      	lsrs	r1, r3, #3
 800083c:	460b      	mov	r3, r1
 800083e:	009b      	lsls	r3, r3, #2
 8000840:	440b      	add	r3, r1
 8000842:	005b      	lsls	r3, r3, #1
 8000844:	1ad3      	subs	r3, r2, r3
 8000846:	b2db      	uxtb	r3, r3
 8000848:	2b00      	cmp	r3, #0
 800084a:	d105      	bne.n	8000858 <main+0xb0>
		  HAL_GPIO_WritePin(ONBOARD_LED_GPIO_Port, ONBOARD_LED_Pin, GPIO_PIN_SET);
 800084c:	2201      	movs	r2, #1
 800084e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000852:	4874      	ldr	r0, [pc, #464]	; (8000a24 <main+0x27c>)
 8000854:	f001 fd46 	bl	80022e4 <HAL_GPIO_WritePin>
	  }
	  for(int i=0; i< 2; i++){
 8000858:	2300      	movs	r3, #0
 800085a:	60fb      	str	r3, [r7, #12]
 800085c:	e050      	b.n	8000900 <main+0x158>
	  			ADSwrite[0] = 0x01;
 800085e:	4b72      	ldr	r3, [pc, #456]	; (8000a28 <main+0x280>)
 8000860:	2201      	movs	r2, #1
 8000862:	701a      	strb	r2, [r3, #0]

	  			switch(i){
 8000864:	68fb      	ldr	r3, [r7, #12]
 8000866:	2b00      	cmp	r3, #0
 8000868:	d003      	beq.n	8000872 <main+0xca>
 800086a:	68fb      	ldr	r3, [r7, #12]
 800086c:	2b01      	cmp	r3, #1
 800086e:	d004      	beq.n	800087a <main+0xd2>
 8000870:	e007      	b.n	8000882 <main+0xda>
	  				case(0):
	  					ADSwrite[1] = 0xC1; //11000001
 8000872:	4b6d      	ldr	r3, [pc, #436]	; (8000a28 <main+0x280>)
 8000874:	22c1      	movs	r2, #193	; 0xc1
 8000876:	705a      	strb	r2, [r3, #1]
	  				break;
 8000878:	e003      	b.n	8000882 <main+0xda>
	  				case(1):
	  					ADSwrite[1] = 0xD1; //11010001
 800087a:	4b6b      	ldr	r3, [pc, #428]	; (8000a28 <main+0x280>)
 800087c:	22d1      	movs	r2, #209	; 0xd1
 800087e:	705a      	strb	r2, [r3, #1]
	  				break;
 8000880:	bf00      	nop
	  			//	case(3):
	  			//		ADSwrite[1] = 0xF1;
	  			//	break;
	  			}

	  			ADSwrite[2] = 0x83; //10000011 LSB
 8000882:	4b69      	ldr	r3, [pc, #420]	; (8000a28 <main+0x280>)
 8000884:	2283      	movs	r2, #131	; 0x83
 8000886:	709a      	strb	r2, [r3, #2]

	  			HAL_I2C_Master_Transmit(&hi2c1, ADS1115_ADDRESS << 1, ADSwrite, 3, 100);
 8000888:	2364      	movs	r3, #100	; 0x64
 800088a:	9300      	str	r3, [sp, #0]
 800088c:	2303      	movs	r3, #3
 800088e:	4a66      	ldr	r2, [pc, #408]	; (8000a28 <main+0x280>)
 8000890:	2190      	movs	r1, #144	; 0x90
 8000892:	4866      	ldr	r0, [pc, #408]	; (8000a2c <main+0x284>)
 8000894:	f001 fe9c 	bl	80025d0 <HAL_I2C_Master_Transmit>
	  			ADSwrite[0] = 0x00;
 8000898:	4b63      	ldr	r3, [pc, #396]	; (8000a28 <main+0x280>)
 800089a:	2200      	movs	r2, #0
 800089c:	701a      	strb	r2, [r3, #0]
	  			HAL_I2C_Master_Transmit(&hi2c1, ADS1115_ADDRESS << 1 , ADSwrite, 1 ,100);
 800089e:	2364      	movs	r3, #100	; 0x64
 80008a0:	9300      	str	r3, [sp, #0]
 80008a2:	2301      	movs	r3, #1
 80008a4:	4a60      	ldr	r2, [pc, #384]	; (8000a28 <main+0x280>)
 80008a6:	2190      	movs	r1, #144	; 0x90
 80008a8:	4860      	ldr	r0, [pc, #384]	; (8000a2c <main+0x284>)
 80008aa:	f001 fe91 	bl	80025d0 <HAL_I2C_Master_Transmit>
	  			HAL_Delay(20);
 80008ae:	2014      	movs	r0, #20
 80008b0:	f000 fc4c 	bl	800114c <HAL_Delay>

	  			HAL_I2C_Master_Receive(&hi2c1, ADS1115_ADDRESS <<1, ADSwrite, 2, 100);
 80008b4:	2364      	movs	r3, #100	; 0x64
 80008b6:	9300      	str	r3, [sp, #0]
 80008b8:	2302      	movs	r3, #2
 80008ba:	4a5b      	ldr	r2, [pc, #364]	; (8000a28 <main+0x280>)
 80008bc:	2190      	movs	r1, #144	; 0x90
 80008be:	485b      	ldr	r0, [pc, #364]	; (8000a2c <main+0x284>)
 80008c0:	f001 ff84 	bl	80027cc <HAL_I2C_Master_Receive>
	  			reading = (ADSwrite[0] << 8 | ADSwrite[1] );
 80008c4:	4b58      	ldr	r3, [pc, #352]	; (8000a28 <main+0x280>)
 80008c6:	781b      	ldrb	r3, [r3, #0]
 80008c8:	021b      	lsls	r3, r3, #8
 80008ca:	b21a      	sxth	r2, r3
 80008cc:	4b56      	ldr	r3, [pc, #344]	; (8000a28 <main+0x280>)
 80008ce:	785b      	ldrb	r3, [r3, #1]
 80008d0:	b21b      	sxth	r3, r3
 80008d2:	4313      	orrs	r3, r2
 80008d4:	b21a      	sxth	r2, r3
 80008d6:	4b56      	ldr	r3, [pc, #344]	; (8000a30 <main+0x288>)
 80008d8:	801a      	strh	r2, [r3, #0]
	  			if(reading < 0) {
 80008da:	4b55      	ldr	r3, [pc, #340]	; (8000a30 <main+0x288>)
 80008dc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	da02      	bge.n	80008ea <main+0x142>
	  				reading = 0;
 80008e4:	4b52      	ldr	r3, [pc, #328]	; (8000a30 <main+0x288>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	801a      	strh	r2, [r3, #0]
	  			}
	  			//voltage[i] = reading * voltageConv;
	  			voltReading[i] = reading;
 80008ea:	4b51      	ldr	r3, [pc, #324]	; (8000a30 <main+0x288>)
 80008ec:	f9b3 3000 	ldrsh.w	r3, [r3]
 80008f0:	4619      	mov	r1, r3
 80008f2:	4a50      	ldr	r2, [pc, #320]	; (8000a34 <main+0x28c>)
 80008f4:	68fb      	ldr	r3, [r7, #12]
 80008f6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	  for(int i=0; i< 2; i++){
 80008fa:	68fb      	ldr	r3, [r7, #12]
 80008fc:	3301      	adds	r3, #1
 80008fe:	60fb      	str	r3, [r7, #12]
 8000900:	68fb      	ldr	r3, [r7, #12]
 8000902:	2b01      	cmp	r3, #1
 8000904:	ddab      	ble.n	800085e <main+0xb6>



	  		}
	  uint8_t csend[] = {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00}; // Tx Buffer
 8000906:	4a4c      	ldr	r2, [pc, #304]	; (8000a38 <main+0x290>)
 8000908:	1d3b      	adds	r3, r7, #4
 800090a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800090e:	e883 0003 	stmia.w	r3, {r0, r1}
	   * Byte 6 - 0x00 - no errors
	   * Byte 7 - 0x00 - torque MAF
	   *
	   *-----------------------------------------------------------------------------*/

	  setTxHeader(0x316);
 8000912:	f240 3016 	movw	r0, #790	; 0x316
 8000916:	f000 f9a3 	bl	8000c60 <setTxHeader>

	  csend[0] = 0x0D;
 800091a:	230d      	movs	r3, #13
 800091c:	713b      	strb	r3, [r7, #4]
	  csend[2] = voltReading[0] & 0xFF;
 800091e:	4b45      	ldr	r3, [pc, #276]	; (8000a34 <main+0x28c>)
 8000920:	681b      	ldr	r3, [r3, #0]
 8000922:	b2db      	uxtb	r3, r3
 8000924:	71bb      	strb	r3, [r7, #6]
	  csend[3] = (voltReading[0] >> 8 & 0xFF) * 2.77;
 8000926:	4b43      	ldr	r3, [pc, #268]	; (8000a34 <main+0x28c>)
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	121b      	asrs	r3, r3, #8
 800092c:	b2db      	uxtb	r3, r3
 800092e:	4618      	mov	r0, r3
 8000930:	f7ff fe8a 	bl	8000648 <__aeabi_i2d>
 8000934:	a334      	add	r3, pc, #208	; (adr r3, 8000a08 <main+0x260>)
 8000936:	e9d3 2300 	ldrd	r2, r3, [r3]
 800093a:	f7ff fc09 	bl	8000150 <__aeabi_dmul>
 800093e:	4602      	mov	r2, r0
 8000940:	460b      	mov	r3, r1
 8000942:	4610      	mov	r0, r2
 8000944:	4619      	mov	r1, r3
 8000946:	f7ff fee9 	bl	800071c <__aeabi_d2uiz>
 800094a:	4603      	mov	r3, r0
 800094c:	b2db      	uxtb	r3, r3
 800094e:	71fb      	strb	r3, [r7, #7]
	  HAL_CAN_AddTxMessage(&hcan,&txHeader,csend,&canMailbox); // Send Message
 8000950:	1d3a      	adds	r2, r7, #4
 8000952:	4b3a      	ldr	r3, [pc, #232]	; (8000a3c <main+0x294>)
 8000954:	492f      	ldr	r1, [pc, #188]	; (8000a14 <main+0x26c>)
 8000956:	4830      	ldr	r0, [pc, #192]	; (8000a18 <main+0x270>)
 8000958:	f000 fe24 	bl	80015a4 <HAL_CAN_AddTxMessage>
	   * Byte 6 - 0x00 - no brake, brake system ok, no cruise, no shift lock
	   * Byte 7 - 0x00 - not used
	   *
	   *-----------------------------------------------------------------------------*/

	  setTxHeader(0x329);
 800095c:	f240 3029 	movw	r0, #809	; 0x329
 8000960:	f000 f97e 	bl	8000c60 <setTxHeader>

	  csend[0] = 0x11;
 8000964:	2311      	movs	r3, #17
 8000966:	713b      	strb	r3, [r7, #4]
	  csend[1] = (voltReading[1] >> 8 & 0xFF) * 2.77; // MSB of other axis sets temp
 8000968:	4b32      	ldr	r3, [pc, #200]	; (8000a34 <main+0x28c>)
 800096a:	685b      	ldr	r3, [r3, #4]
 800096c:	121b      	asrs	r3, r3, #8
 800096e:	b2db      	uxtb	r3, r3
 8000970:	4618      	mov	r0, r3
 8000972:	f7ff fe69 	bl	8000648 <__aeabi_i2d>
 8000976:	a324      	add	r3, pc, #144	; (adr r3, 8000a08 <main+0x260>)
 8000978:	e9d3 2300 	ldrd	r2, r3, [r3]
 800097c:	f7ff fbe8 	bl	8000150 <__aeabi_dmul>
 8000980:	4602      	mov	r2, r0
 8000982:	460b      	mov	r3, r1
 8000984:	4610      	mov	r0, r2
 8000986:	4619      	mov	r1, r3
 8000988:	f7ff fec8 	bl	800071c <__aeabi_d2uiz>
 800098c:	4603      	mov	r3, r0
 800098e:	b2db      	uxtb	r3, r3
 8000990:	717b      	strb	r3, [r7, #5]
	  csend[2] = 0xD0;
 8000992:	23d0      	movs	r3, #208	; 0xd0
 8000994:	71bb      	strb	r3, [r7, #6]
	  csend[3] = 0x0C;
 8000996:	230c      	movs	r3, #12
 8000998:	71fb      	strb	r3, [r7, #7]
	  HAL_CAN_AddTxMessage(&hcan,&txHeader,csend,&canMailbox); // Send Message
 800099a:	1d3a      	adds	r2, r7, #4
 800099c:	4b27      	ldr	r3, [pc, #156]	; (8000a3c <main+0x294>)
 800099e:	491d      	ldr	r1, [pc, #116]	; (8000a14 <main+0x26c>)
 80009a0:	481d      	ldr	r0, [pc, #116]	; (8000a18 <main+0x270>)
 80009a2:	f000 fdff 	bl	80015a4 <HAL_CAN_AddTxMessage>
	   * Byte 6 - 0x00 - not used
	   * Byte 7 - 0x00 - not used
	   *
	   *-----------------------------------------------------------------------------*/

	  setTxHeader(0x545);
 80009a6:	f240 5045 	movw	r0, #1349	; 0x545
 80009aa:	f000 f959 	bl	8000c60 <setTxHeader>
      csend[0] = 0x00; //reset byte to 0x00
 80009ae:	2300      	movs	r3, #0
 80009b0:	713b      	strb	r3, [r7, #4]
      csend[1] = 0x00; //reset byte to 0x00
 80009b2:	2300      	movs	r3, #0
 80009b4:	717b      	strb	r3, [r7, #5]
      csend[2] = 0x00; //reset byte to 0x00
 80009b6:	2300      	movs	r3, #0
 80009b8:	71bb      	strb	r3, [r7, #6]
      csend[3] = 0x00; //reset byte to 0x00
 80009ba:	2300      	movs	r3, #0
 80009bc:	71fb      	strb	r3, [r7, #7]
      csend[4] = 0x48;
 80009be:	2348      	movs	r3, #72	; 0x48
 80009c0:	723b      	strb	r3, [r7, #8]
      HAL_CAN_AddTxMessage(&hcan,&txHeader,csend,&canMailbox); // Send Message
 80009c2:	1d3a      	adds	r2, r7, #4
 80009c4:	4b1d      	ldr	r3, [pc, #116]	; (8000a3c <main+0x294>)
 80009c6:	4913      	ldr	r1, [pc, #76]	; (8000a14 <main+0x26c>)
 80009c8:	4813      	ldr	r0, [pc, #76]	; (8000a18 <main+0x270>)
 80009ca:	f000 fdeb 	bl	80015a4 <HAL_CAN_AddTxMessage>

      // only flash every 100ms
	  if (counter % 10 == 0 ){
 80009ce:	4b13      	ldr	r3, [pc, #76]	; (8000a1c <main+0x274>)
 80009d0:	781a      	ldrb	r2, [r3, #0]
 80009d2:	4b13      	ldr	r3, [pc, #76]	; (8000a20 <main+0x278>)
 80009d4:	fba3 1302 	umull	r1, r3, r3, r2
 80009d8:	08d9      	lsrs	r1, r3, #3
 80009da:	460b      	mov	r3, r1
 80009dc:	009b      	lsls	r3, r3, #2
 80009de:	440b      	add	r3, r1
 80009e0:	005b      	lsls	r3, r3, #1
 80009e2:	1ad3      	subs	r3, r2, r3
 80009e4:	b2db      	uxtb	r3, r3
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d104      	bne.n	80009f4 <main+0x24c>
		  HAL_GPIO_TogglePin(ONBOARD_LED_GPIO_Port, ONBOARD_LED_Pin);// toggle PA3 LED
 80009ea:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80009ee:	480d      	ldr	r0, [pc, #52]	; (8000a24 <main+0x27c>)
 80009f0:	f001 fc90 	bl	8002314 <HAL_GPIO_TogglePin>
	  }
	  counter++;
 80009f4:	4b09      	ldr	r3, [pc, #36]	; (8000a1c <main+0x274>)
 80009f6:	781b      	ldrb	r3, [r3, #0]
 80009f8:	3301      	adds	r3, #1
 80009fa:	b2da      	uxtb	r2, r3
 80009fc:	4b07      	ldr	r3, [pc, #28]	; (8000a1c <main+0x274>)
 80009fe:	701a      	strb	r2, [r3, #0]
	  HAL_Delay(10); // delay by 10ms
 8000a00:	200a      	movs	r0, #10
 8000a02:	f000 fba3 	bl	800114c <HAL_Delay>
  {
 8000a06:	e713      	b.n	8000830 <main+0x88>
 8000a08:	c28f5c29 	.word	0xc28f5c29
 8000a0c:	400628f5 	.word	0x400628f5
 8000a10:	200000c8 	.word	0x200000c8
 8000a14:	200000a8 	.word	0x200000a8
 8000a18:	200000f4 	.word	0x200000f4
 8000a1c:	20000180 	.word	0x20000180
 8000a20:	cccccccd 	.word	0xcccccccd
 8000a24:	40011000 	.word	0x40011000
 8000a28:	20000170 	.word	0x20000170
 8000a2c:	2000011c 	.word	0x2000011c
 8000a30:	20000176 	.word	0x20000176
 8000a34:	20000178 	.word	0x20000178
 8000a38:	08004a94 	.word	0x08004a94
 8000a3c:	200000f0 	.word	0x200000f0

08000a40 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b090      	sub	sp, #64	; 0x40
 8000a44:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a46:	f107 0318 	add.w	r3, r7, #24
 8000a4a:	2228      	movs	r2, #40	; 0x28
 8000a4c:	2100      	movs	r1, #0
 8000a4e:	4618      	mov	r0, r3
 8000a50:	f003 f878 	bl	8003b44 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a54:	1d3b      	adds	r3, r7, #4
 8000a56:	2200      	movs	r2, #0
 8000a58:	601a      	str	r2, [r3, #0]
 8000a5a:	605a      	str	r2, [r3, #4]
 8000a5c:	609a      	str	r2, [r3, #8]
 8000a5e:	60da      	str	r2, [r3, #12]
 8000a60:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a62:	2301      	movs	r3, #1
 8000a64:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000a66:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000a6a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a70:	2301      	movs	r3, #1
 8000a72:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a74:	2302      	movs	r3, #2
 8000a76:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a78:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000a7c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000a7e:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000a82:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a84:	f107 0318 	add.w	r3, r7, #24
 8000a88:	4618      	mov	r0, r3
 8000a8a:	f002 fc2b 	bl	80032e4 <HAL_RCC_OscConfig>
 8000a8e:	4603      	mov	r3, r0
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d001      	beq.n	8000a98 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000a94:	f000 f930 	bl	8000cf8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a98:	230f      	movs	r3, #15
 8000a9a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a9c:	2302      	movs	r3, #2
 8000a9e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000aa4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000aa8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000aae:	1d3b      	adds	r3, r7, #4
 8000ab0:	2102      	movs	r1, #2
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	f002 fe98 	bl	80037e8 <HAL_RCC_ClockConfig>
 8000ab8:	4603      	mov	r3, r0
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d001      	beq.n	8000ac2 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000abe:	f000 f91b 	bl	8000cf8 <Error_Handler>
  }
}
 8000ac2:	bf00      	nop
 8000ac4:	3740      	adds	r7, #64	; 0x40
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	bd80      	pop	{r7, pc}
	...

08000acc <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8000ad0:	4b17      	ldr	r3, [pc, #92]	; (8000b30 <MX_CAN_Init+0x64>)
 8000ad2:	4a18      	ldr	r2, [pc, #96]	; (8000b34 <MX_CAN_Init+0x68>)
 8000ad4:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 9;
 8000ad6:	4b16      	ldr	r3, [pc, #88]	; (8000b30 <MX_CAN_Init+0x64>)
 8000ad8:	2209      	movs	r2, #9
 8000ada:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8000adc:	4b14      	ldr	r3, [pc, #80]	; (8000b30 <MX_CAN_Init+0x64>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000ae2:	4b13      	ldr	r3, [pc, #76]	; (8000b30 <MX_CAN_Init+0x64>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_3TQ;
 8000ae8:	4b11      	ldr	r3, [pc, #68]	; (8000b30 <MX_CAN_Init+0x64>)
 8000aea:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000aee:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_4TQ;
 8000af0:	4b0f      	ldr	r3, [pc, #60]	; (8000b30 <MX_CAN_Init+0x64>)
 8000af2:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 8000af6:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8000af8:	4b0d      	ldr	r3, [pc, #52]	; (8000b30 <MX_CAN_Init+0x64>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8000afe:	4b0c      	ldr	r3, [pc, #48]	; (8000b30 <MX_CAN_Init+0x64>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8000b04:	4b0a      	ldr	r3, [pc, #40]	; (8000b30 <MX_CAN_Init+0x64>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8000b0a:	4b09      	ldr	r3, [pc, #36]	; (8000b30 <MX_CAN_Init+0x64>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8000b10:	4b07      	ldr	r3, [pc, #28]	; (8000b30 <MX_CAN_Init+0x64>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8000b16:	4b06      	ldr	r3, [pc, #24]	; (8000b30 <MX_CAN_Init+0x64>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000b1c:	4804      	ldr	r0, [pc, #16]	; (8000b30 <MX_CAN_Init+0x64>)
 8000b1e:	f000 fb39 	bl	8001194 <HAL_CAN_Init>
 8000b22:	4603      	mov	r3, r0
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d001      	beq.n	8000b2c <MX_CAN_Init+0x60>
  {
    Error_Handler();
 8000b28:	f000 f8e6 	bl	8000cf8 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8000b2c:	bf00      	nop
 8000b2e:	bd80      	pop	{r7, pc}
 8000b30:	200000f4 	.word	0x200000f4
 8000b34:	40006400 	.word	0x40006400

08000b38 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000b3c:	4b12      	ldr	r3, [pc, #72]	; (8000b88 <MX_I2C1_Init+0x50>)
 8000b3e:	4a13      	ldr	r2, [pc, #76]	; (8000b8c <MX_I2C1_Init+0x54>)
 8000b40:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000b42:	4b11      	ldr	r3, [pc, #68]	; (8000b88 <MX_I2C1_Init+0x50>)
 8000b44:	4a12      	ldr	r2, [pc, #72]	; (8000b90 <MX_I2C1_Init+0x58>)
 8000b46:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000b48:	4b0f      	ldr	r3, [pc, #60]	; (8000b88 <MX_I2C1_Init+0x50>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000b4e:	4b0e      	ldr	r3, [pc, #56]	; (8000b88 <MX_I2C1_Init+0x50>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b54:	4b0c      	ldr	r3, [pc, #48]	; (8000b88 <MX_I2C1_Init+0x50>)
 8000b56:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000b5a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b5c:	4b0a      	ldr	r3, [pc, #40]	; (8000b88 <MX_I2C1_Init+0x50>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000b62:	4b09      	ldr	r3, [pc, #36]	; (8000b88 <MX_I2C1_Init+0x50>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b68:	4b07      	ldr	r3, [pc, #28]	; (8000b88 <MX_I2C1_Init+0x50>)
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b6e:	4b06      	ldr	r3, [pc, #24]	; (8000b88 <MX_I2C1_Init+0x50>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000b74:	4804      	ldr	r0, [pc, #16]	; (8000b88 <MX_I2C1_Init+0x50>)
 8000b76:	f001 fbe7 	bl	8002348 <HAL_I2C_Init>
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d001      	beq.n	8000b84 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000b80:	f000 f8ba 	bl	8000cf8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000b84:	bf00      	nop
 8000b86:	bd80      	pop	{r7, pc}
 8000b88:	2000011c 	.word	0x2000011c
 8000b8c:	40005400 	.word	0x40005400
 8000b90:	000186a0 	.word	0x000186a0

08000b94 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b088      	sub	sp, #32
 8000b98:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b9a:	f107 0310 	add.w	r3, r7, #16
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	601a      	str	r2, [r3, #0]
 8000ba2:	605a      	str	r2, [r3, #4]
 8000ba4:	609a      	str	r2, [r3, #8]
 8000ba6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ba8:	4b24      	ldr	r3, [pc, #144]	; (8000c3c <MX_GPIO_Init+0xa8>)
 8000baa:	699b      	ldr	r3, [r3, #24]
 8000bac:	4a23      	ldr	r2, [pc, #140]	; (8000c3c <MX_GPIO_Init+0xa8>)
 8000bae:	f043 0310 	orr.w	r3, r3, #16
 8000bb2:	6193      	str	r3, [r2, #24]
 8000bb4:	4b21      	ldr	r3, [pc, #132]	; (8000c3c <MX_GPIO_Init+0xa8>)
 8000bb6:	699b      	ldr	r3, [r3, #24]
 8000bb8:	f003 0310 	and.w	r3, r3, #16
 8000bbc:	60fb      	str	r3, [r7, #12]
 8000bbe:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bc0:	4b1e      	ldr	r3, [pc, #120]	; (8000c3c <MX_GPIO_Init+0xa8>)
 8000bc2:	699b      	ldr	r3, [r3, #24]
 8000bc4:	4a1d      	ldr	r2, [pc, #116]	; (8000c3c <MX_GPIO_Init+0xa8>)
 8000bc6:	f043 0320 	orr.w	r3, r3, #32
 8000bca:	6193      	str	r3, [r2, #24]
 8000bcc:	4b1b      	ldr	r3, [pc, #108]	; (8000c3c <MX_GPIO_Init+0xa8>)
 8000bce:	699b      	ldr	r3, [r3, #24]
 8000bd0:	f003 0320 	and.w	r3, r3, #32
 8000bd4:	60bb      	str	r3, [r7, #8]
 8000bd6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bd8:	4b18      	ldr	r3, [pc, #96]	; (8000c3c <MX_GPIO_Init+0xa8>)
 8000bda:	699b      	ldr	r3, [r3, #24]
 8000bdc:	4a17      	ldr	r2, [pc, #92]	; (8000c3c <MX_GPIO_Init+0xa8>)
 8000bde:	f043 0304 	orr.w	r3, r3, #4
 8000be2:	6193      	str	r3, [r2, #24]
 8000be4:	4b15      	ldr	r3, [pc, #84]	; (8000c3c <MX_GPIO_Init+0xa8>)
 8000be6:	699b      	ldr	r3, [r3, #24]
 8000be8:	f003 0304 	and.w	r3, r3, #4
 8000bec:	607b      	str	r3, [r7, #4]
 8000bee:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bf0:	4b12      	ldr	r3, [pc, #72]	; (8000c3c <MX_GPIO_Init+0xa8>)
 8000bf2:	699b      	ldr	r3, [r3, #24]
 8000bf4:	4a11      	ldr	r2, [pc, #68]	; (8000c3c <MX_GPIO_Init+0xa8>)
 8000bf6:	f043 0308 	orr.w	r3, r3, #8
 8000bfa:	6193      	str	r3, [r2, #24]
 8000bfc:	4b0f      	ldr	r3, [pc, #60]	; (8000c3c <MX_GPIO_Init+0xa8>)
 8000bfe:	699b      	ldr	r3, [r3, #24]
 8000c00:	f003 0308 	and.w	r3, r3, #8
 8000c04:	603b      	str	r3, [r7, #0]
 8000c06:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ONBOARD_LED_GPIO_Port, ONBOARD_LED_Pin, GPIO_PIN_RESET);
 8000c08:	2200      	movs	r2, #0
 8000c0a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c0e:	480c      	ldr	r0, [pc, #48]	; (8000c40 <MX_GPIO_Init+0xac>)
 8000c10:	f001 fb68 	bl	80022e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : ONBOARD_LED_Pin */
  GPIO_InitStruct.Pin = ONBOARD_LED_Pin;
 8000c14:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c18:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c1a:	2301      	movs	r3, #1
 8000c1c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c22:	2302      	movs	r3, #2
 8000c24:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ONBOARD_LED_GPIO_Port, &GPIO_InitStruct);
 8000c26:	f107 0310 	add.w	r3, r7, #16
 8000c2a:	4619      	mov	r1, r3
 8000c2c:	4804      	ldr	r0, [pc, #16]	; (8000c40 <MX_GPIO_Init+0xac>)
 8000c2e:	f001 f9d5 	bl	8001fdc <HAL_GPIO_Init>

}
 8000c32:	bf00      	nop
 8000c34:	3720      	adds	r7, #32
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bd80      	pop	{r7, pc}
 8000c3a:	bf00      	nop
 8000c3c:	40021000 	.word	0x40021000
 8000c40:	40011000 	.word	0x40011000

08000c44 <__io_putchar>:
    ITM_SendChar(*ptr++);
  }
  return len;
}*/
int __io_putchar(int ch)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b082      	sub	sp, #8
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
 // Write character to ITM ch.0
 ITM_SendChar(ch);
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	4618      	mov	r0, r3
 8000c50:	f7ff fd84 	bl	800075c <ITM_SendChar>
 return(ch);
 8000c54:	687b      	ldr	r3, [r7, #4]
}
 8000c56:	4618      	mov	r0, r3
 8000c58:	3708      	adds	r7, #8
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	bd80      	pop	{r7, pc}
	...

08000c60 <setTxHeader>:
  {
     j++;
  }
  return;
}
void setTxHeader(uint32_t CanID){
 8000c60:	b480      	push	{r7}
 8000c62:	b083      	sub	sp, #12
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
	txHeader.IDE = CAN_ID_STD;
	txHeader.RTR = CAN_RTR_DATA;
	txHeader.StdId = 0x030;
	txHeader.ExtId = 0x02;
	txHeader.TransmitGlobalTime = DISABLE;*/
	txHeader.StdId = CanID;
 8000c68:	4a03      	ldr	r2, [pc, #12]	; (8000c78 <setTxHeader+0x18>)
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	6013      	str	r3, [r2, #0]
}
 8000c6e:	bf00      	nop
 8000c70:	370c      	adds	r7, #12
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bc80      	pop	{r7}
 8000c76:	4770      	bx	lr
 8000c78:	200000a8 	.word	0x200000a8

08000c7c <HAL_CAN_RxFifo0MsgPendingCallback>:
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan1)
{
 8000c7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c7e:	b08d      	sub	sp, #52	; 0x34
 8000c80:	af08      	add	r7, sp, #32
 8000c82:	60f8      	str	r0, [r7, #12]
	HAL_CAN_GetRxMessage(hcan1, CAN_RX_FIFO0, &rxHeader, canRX); //Receive CAN bus message to canRX buffer
 8000c84:	4b19      	ldr	r3, [pc, #100]	; (8000cec <HAL_CAN_RxFifo0MsgPendingCallback+0x70>)
 8000c86:	4a1a      	ldr	r2, [pc, #104]	; (8000cf0 <HAL_CAN_RxFifo0MsgPendingCallback+0x74>)
 8000c88:	2100      	movs	r1, #0
 8000c8a:	68f8      	ldr	r0, [r7, #12]
 8000c8c:	f000 fd64 	bl	8001758 <HAL_CAN_GetRxMessage>
	printf("Received a message! ID 0x%X DLC %X MSG: 0x%X %X %X %X %X %X %X %X\n", rxHeader.StdId, rxHeader.DLC, canRX[0], canRX[1], canRX[2], canRX[3], canRX[4], canRX[5], canRX[6], canRX[7]);
 8000c90:	4b17      	ldr	r3, [pc, #92]	; (8000cf0 <HAL_CAN_RxFifo0MsgPendingCallback+0x74>)
 8000c92:	6819      	ldr	r1, [r3, #0]
 8000c94:	4b16      	ldr	r3, [pc, #88]	; (8000cf0 <HAL_CAN_RxFifo0MsgPendingCallback+0x74>)
 8000c96:	691a      	ldr	r2, [r3, #16]
 8000c98:	4b14      	ldr	r3, [pc, #80]	; (8000cec <HAL_CAN_RxFifo0MsgPendingCallback+0x70>)
 8000c9a:	781b      	ldrb	r3, [r3, #0]
 8000c9c:	469c      	mov	ip, r3
 8000c9e:	4b13      	ldr	r3, [pc, #76]	; (8000cec <HAL_CAN_RxFifo0MsgPendingCallback+0x70>)
 8000ca0:	785b      	ldrb	r3, [r3, #1]
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	4b11      	ldr	r3, [pc, #68]	; (8000cec <HAL_CAN_RxFifo0MsgPendingCallback+0x70>)
 8000ca6:	789b      	ldrb	r3, [r3, #2]
 8000ca8:	461c      	mov	r4, r3
 8000caa:	4b10      	ldr	r3, [pc, #64]	; (8000cec <HAL_CAN_RxFifo0MsgPendingCallback+0x70>)
 8000cac:	78db      	ldrb	r3, [r3, #3]
 8000cae:	461d      	mov	r5, r3
 8000cb0:	4b0e      	ldr	r3, [pc, #56]	; (8000cec <HAL_CAN_RxFifo0MsgPendingCallback+0x70>)
 8000cb2:	791b      	ldrb	r3, [r3, #4]
 8000cb4:	461e      	mov	r6, r3
 8000cb6:	4b0d      	ldr	r3, [pc, #52]	; (8000cec <HAL_CAN_RxFifo0MsgPendingCallback+0x70>)
 8000cb8:	795b      	ldrb	r3, [r3, #5]
 8000cba:	60bb      	str	r3, [r7, #8]
 8000cbc:	4b0b      	ldr	r3, [pc, #44]	; (8000cec <HAL_CAN_RxFifo0MsgPendingCallback+0x70>)
 8000cbe:	799b      	ldrb	r3, [r3, #6]
 8000cc0:	607b      	str	r3, [r7, #4]
 8000cc2:	4b0a      	ldr	r3, [pc, #40]	; (8000cec <HAL_CAN_RxFifo0MsgPendingCallback+0x70>)
 8000cc4:	79db      	ldrb	r3, [r3, #7]
 8000cc6:	9306      	str	r3, [sp, #24]
 8000cc8:	f8d7 e004 	ldr.w	lr, [r7, #4]
 8000ccc:	f8cd e014 	str.w	lr, [sp, #20]
 8000cd0:	68bb      	ldr	r3, [r7, #8]
 8000cd2:	9304      	str	r3, [sp, #16]
 8000cd4:	9603      	str	r6, [sp, #12]
 8000cd6:	9502      	str	r5, [sp, #8]
 8000cd8:	9401      	str	r4, [sp, #4]
 8000cda:	9000      	str	r0, [sp, #0]
 8000cdc:	4663      	mov	r3, ip
 8000cde:	4805      	ldr	r0, [pc, #20]	; (8000cf4 <HAL_CAN_RxFifo0MsgPendingCallback+0x78>)
 8000ce0:	f002 ff38 	bl	8003b54 <iprintf>
	//HAL_GPIO_TogglePin(ONBOARD_LED_GPIO_Port, ONBOARD_LED_Pin);// toggle PA3 LED

}
 8000ce4:	bf00      	nop
 8000ce6:	3714      	adds	r7, #20
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000cec:	200000c0 	.word	0x200000c0
 8000cf0:	2000008c 	.word	0x2000008c
 8000cf4:	08004a9c 	.word	0x08004a9c

08000cf8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cfc:	b672      	cpsid	i
}
 8000cfe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d00:	e7fe      	b.n	8000d00 <Error_Handler+0x8>
	...

08000d04 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d04:	b480      	push	{r7}
 8000d06:	b085      	sub	sp, #20
 8000d08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000d0a:	4b15      	ldr	r3, [pc, #84]	; (8000d60 <HAL_MspInit+0x5c>)
 8000d0c:	699b      	ldr	r3, [r3, #24]
 8000d0e:	4a14      	ldr	r2, [pc, #80]	; (8000d60 <HAL_MspInit+0x5c>)
 8000d10:	f043 0301 	orr.w	r3, r3, #1
 8000d14:	6193      	str	r3, [r2, #24]
 8000d16:	4b12      	ldr	r3, [pc, #72]	; (8000d60 <HAL_MspInit+0x5c>)
 8000d18:	699b      	ldr	r3, [r3, #24]
 8000d1a:	f003 0301 	and.w	r3, r3, #1
 8000d1e:	60bb      	str	r3, [r7, #8]
 8000d20:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d22:	4b0f      	ldr	r3, [pc, #60]	; (8000d60 <HAL_MspInit+0x5c>)
 8000d24:	69db      	ldr	r3, [r3, #28]
 8000d26:	4a0e      	ldr	r2, [pc, #56]	; (8000d60 <HAL_MspInit+0x5c>)
 8000d28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d2c:	61d3      	str	r3, [r2, #28]
 8000d2e:	4b0c      	ldr	r3, [pc, #48]	; (8000d60 <HAL_MspInit+0x5c>)
 8000d30:	69db      	ldr	r3, [r3, #28]
 8000d32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d36:	607b      	str	r3, [r7, #4]
 8000d38:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000d3a:	4b0a      	ldr	r3, [pc, #40]	; (8000d64 <HAL_MspInit+0x60>)
 8000d3c:	685b      	ldr	r3, [r3, #4]
 8000d3e:	60fb      	str	r3, [r7, #12]
 8000d40:	68fb      	ldr	r3, [r7, #12]
 8000d42:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000d46:	60fb      	str	r3, [r7, #12]
 8000d48:	68fb      	ldr	r3, [r7, #12]
 8000d4a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000d4e:	60fb      	str	r3, [r7, #12]
 8000d50:	4a04      	ldr	r2, [pc, #16]	; (8000d64 <HAL_MspInit+0x60>)
 8000d52:	68fb      	ldr	r3, [r7, #12]
 8000d54:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d56:	bf00      	nop
 8000d58:	3714      	adds	r7, #20
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bc80      	pop	{r7}
 8000d5e:	4770      	bx	lr
 8000d60:	40021000 	.word	0x40021000
 8000d64:	40010000 	.word	0x40010000

08000d68 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b088      	sub	sp, #32
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d70:	f107 0310 	add.w	r3, r7, #16
 8000d74:	2200      	movs	r2, #0
 8000d76:	601a      	str	r2, [r3, #0]
 8000d78:	605a      	str	r2, [r3, #4]
 8000d7a:	609a      	str	r2, [r3, #8]
 8000d7c:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	4a20      	ldr	r2, [pc, #128]	; (8000e04 <HAL_CAN_MspInit+0x9c>)
 8000d84:	4293      	cmp	r3, r2
 8000d86:	d139      	bne.n	8000dfc <HAL_CAN_MspInit+0x94>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000d88:	4b1f      	ldr	r3, [pc, #124]	; (8000e08 <HAL_CAN_MspInit+0xa0>)
 8000d8a:	69db      	ldr	r3, [r3, #28]
 8000d8c:	4a1e      	ldr	r2, [pc, #120]	; (8000e08 <HAL_CAN_MspInit+0xa0>)
 8000d8e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000d92:	61d3      	str	r3, [r2, #28]
 8000d94:	4b1c      	ldr	r3, [pc, #112]	; (8000e08 <HAL_CAN_MspInit+0xa0>)
 8000d96:	69db      	ldr	r3, [r3, #28]
 8000d98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000d9c:	60fb      	str	r3, [r7, #12]
 8000d9e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000da0:	4b19      	ldr	r3, [pc, #100]	; (8000e08 <HAL_CAN_MspInit+0xa0>)
 8000da2:	699b      	ldr	r3, [r3, #24]
 8000da4:	4a18      	ldr	r2, [pc, #96]	; (8000e08 <HAL_CAN_MspInit+0xa0>)
 8000da6:	f043 0304 	orr.w	r3, r3, #4
 8000daa:	6193      	str	r3, [r2, #24]
 8000dac:	4b16      	ldr	r3, [pc, #88]	; (8000e08 <HAL_CAN_MspInit+0xa0>)
 8000dae:	699b      	ldr	r3, [r3, #24]
 8000db0:	f003 0304 	and.w	r3, r3, #4
 8000db4:	60bb      	str	r3, [r7, #8]
 8000db6:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000db8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000dbc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dc6:	f107 0310 	add.w	r3, r7, #16
 8000dca:	4619      	mov	r1, r3
 8000dcc:	480f      	ldr	r0, [pc, #60]	; (8000e0c <HAL_CAN_MspInit+0xa4>)
 8000dce:	f001 f905 	bl	8001fdc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000dd2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000dd6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dd8:	2302      	movs	r3, #2
 8000dda:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ddc:	2303      	movs	r3, #3
 8000dde:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000de0:	f107 0310 	add.w	r3, r7, #16
 8000de4:	4619      	mov	r1, r3
 8000de6:	4809      	ldr	r0, [pc, #36]	; (8000e0c <HAL_CAN_MspInit+0xa4>)
 8000de8:	f001 f8f8 	bl	8001fdc <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8000dec:	2200      	movs	r2, #0
 8000dee:	2100      	movs	r1, #0
 8000df0:	2014      	movs	r0, #20
 8000df2:	f001 f8bc 	bl	8001f6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8000df6:	2014      	movs	r0, #20
 8000df8:	f001 f8d5 	bl	8001fa6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8000dfc:	bf00      	nop
 8000dfe:	3720      	adds	r7, #32
 8000e00:	46bd      	mov	sp, r7
 8000e02:	bd80      	pop	{r7, pc}
 8000e04:	40006400 	.word	0x40006400
 8000e08:	40021000 	.word	0x40021000
 8000e0c:	40010800 	.word	0x40010800

08000e10 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b088      	sub	sp, #32
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e18:	f107 0310 	add.w	r3, r7, #16
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	601a      	str	r2, [r3, #0]
 8000e20:	605a      	str	r2, [r3, #4]
 8000e22:	609a      	str	r2, [r3, #8]
 8000e24:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	4a15      	ldr	r2, [pc, #84]	; (8000e80 <HAL_I2C_MspInit+0x70>)
 8000e2c:	4293      	cmp	r3, r2
 8000e2e:	d123      	bne.n	8000e78 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e30:	4b14      	ldr	r3, [pc, #80]	; (8000e84 <HAL_I2C_MspInit+0x74>)
 8000e32:	699b      	ldr	r3, [r3, #24]
 8000e34:	4a13      	ldr	r2, [pc, #76]	; (8000e84 <HAL_I2C_MspInit+0x74>)
 8000e36:	f043 0308 	orr.w	r3, r3, #8
 8000e3a:	6193      	str	r3, [r2, #24]
 8000e3c:	4b11      	ldr	r3, [pc, #68]	; (8000e84 <HAL_I2C_MspInit+0x74>)
 8000e3e:	699b      	ldr	r3, [r3, #24]
 8000e40:	f003 0308 	and.w	r3, r3, #8
 8000e44:	60fb      	str	r3, [r7, #12]
 8000e46:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000e48:	23c0      	movs	r3, #192	; 0xc0
 8000e4a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e4c:	2312      	movs	r3, #18
 8000e4e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e50:	2303      	movs	r3, #3
 8000e52:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e54:	f107 0310 	add.w	r3, r7, #16
 8000e58:	4619      	mov	r1, r3
 8000e5a:	480b      	ldr	r0, [pc, #44]	; (8000e88 <HAL_I2C_MspInit+0x78>)
 8000e5c:	f001 f8be 	bl	8001fdc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000e60:	4b08      	ldr	r3, [pc, #32]	; (8000e84 <HAL_I2C_MspInit+0x74>)
 8000e62:	69db      	ldr	r3, [r3, #28]
 8000e64:	4a07      	ldr	r2, [pc, #28]	; (8000e84 <HAL_I2C_MspInit+0x74>)
 8000e66:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000e6a:	61d3      	str	r3, [r2, #28]
 8000e6c:	4b05      	ldr	r3, [pc, #20]	; (8000e84 <HAL_I2C_MspInit+0x74>)
 8000e6e:	69db      	ldr	r3, [r3, #28]
 8000e70:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e74:	60bb      	str	r3, [r7, #8]
 8000e76:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000e78:	bf00      	nop
 8000e7a:	3720      	adds	r7, #32
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	bd80      	pop	{r7, pc}
 8000e80:	40005400 	.word	0x40005400
 8000e84:	40021000 	.word	0x40021000
 8000e88:	40010c00 	.word	0x40010c00

08000e8c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e90:	e7fe      	b.n	8000e90 <NMI_Handler+0x4>

08000e92 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e92:	b480      	push	{r7}
 8000e94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e96:	e7fe      	b.n	8000e96 <HardFault_Handler+0x4>

08000e98 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e9c:	e7fe      	b.n	8000e9c <MemManage_Handler+0x4>

08000e9e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e9e:	b480      	push	{r7}
 8000ea0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ea2:	e7fe      	b.n	8000ea2 <BusFault_Handler+0x4>

08000ea4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ea8:	e7fe      	b.n	8000ea8 <UsageFault_Handler+0x4>

08000eaa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000eaa:	b480      	push	{r7}
 8000eac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000eae:	bf00      	nop
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	bc80      	pop	{r7}
 8000eb4:	4770      	bx	lr

08000eb6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000eb6:	b480      	push	{r7}
 8000eb8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000eba:	bf00      	nop
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	bc80      	pop	{r7}
 8000ec0:	4770      	bx	lr

08000ec2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ec2:	b480      	push	{r7}
 8000ec4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ec6:	bf00      	nop
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	bc80      	pop	{r7}
 8000ecc:	4770      	bx	lr

08000ece <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ece:	b580      	push	{r7, lr}
 8000ed0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ed2:	f000 f91f 	bl	8001114 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ed6:	bf00      	nop
 8000ed8:	bd80      	pop	{r7, pc}
	...

08000edc <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8000ee0:	4802      	ldr	r0, [pc, #8]	; (8000eec <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8000ee2:	f000 fd4a 	bl	800197a <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8000ee6:	bf00      	nop
 8000ee8:	bd80      	pop	{r7, pc}
 8000eea:	bf00      	nop
 8000eec:	200000f4 	.word	0x200000f4

08000ef0 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b086      	sub	sp, #24
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	60f8      	str	r0, [r7, #12]
 8000ef8:	60b9      	str	r1, [r7, #8]
 8000efa:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000efc:	2300      	movs	r3, #0
 8000efe:	617b      	str	r3, [r7, #20]
 8000f00:	e00a      	b.n	8000f18 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000f02:	f3af 8000 	nop.w
 8000f06:	4601      	mov	r1, r0
 8000f08:	68bb      	ldr	r3, [r7, #8]
 8000f0a:	1c5a      	adds	r2, r3, #1
 8000f0c:	60ba      	str	r2, [r7, #8]
 8000f0e:	b2ca      	uxtb	r2, r1
 8000f10:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f12:	697b      	ldr	r3, [r7, #20]
 8000f14:	3301      	adds	r3, #1
 8000f16:	617b      	str	r3, [r7, #20]
 8000f18:	697a      	ldr	r2, [r7, #20]
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	429a      	cmp	r2, r3
 8000f1e:	dbf0      	blt.n	8000f02 <_read+0x12>
	}

return len;
 8000f20:	687b      	ldr	r3, [r7, #4]
}
 8000f22:	4618      	mov	r0, r3
 8000f24:	3718      	adds	r7, #24
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bd80      	pop	{r7, pc}

08000f2a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000f2a:	b580      	push	{r7, lr}
 8000f2c:	b086      	sub	sp, #24
 8000f2e:	af00      	add	r7, sp, #0
 8000f30:	60f8      	str	r0, [r7, #12]
 8000f32:	60b9      	str	r1, [r7, #8]
 8000f34:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f36:	2300      	movs	r3, #0
 8000f38:	617b      	str	r3, [r7, #20]
 8000f3a:	e009      	b.n	8000f50 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000f3c:	68bb      	ldr	r3, [r7, #8]
 8000f3e:	1c5a      	adds	r2, r3, #1
 8000f40:	60ba      	str	r2, [r7, #8]
 8000f42:	781b      	ldrb	r3, [r3, #0]
 8000f44:	4618      	mov	r0, r3
 8000f46:	f7ff fe7d 	bl	8000c44 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f4a:	697b      	ldr	r3, [r7, #20]
 8000f4c:	3301      	adds	r3, #1
 8000f4e:	617b      	str	r3, [r7, #20]
 8000f50:	697a      	ldr	r2, [r7, #20]
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	429a      	cmp	r2, r3
 8000f56:	dbf1      	blt.n	8000f3c <_write+0x12>
	}
	return len;
 8000f58:	687b      	ldr	r3, [r7, #4]
}
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	3718      	adds	r7, #24
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd80      	pop	{r7, pc}

08000f62 <_close>:

int _close(int file)
{
 8000f62:	b480      	push	{r7}
 8000f64:	b083      	sub	sp, #12
 8000f66:	af00      	add	r7, sp, #0
 8000f68:	6078      	str	r0, [r7, #4]
	return -1;
 8000f6a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000f6e:	4618      	mov	r0, r3
 8000f70:	370c      	adds	r7, #12
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bc80      	pop	{r7}
 8000f76:	4770      	bx	lr

08000f78 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	b083      	sub	sp, #12
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
 8000f80:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000f82:	683b      	ldr	r3, [r7, #0]
 8000f84:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000f88:	605a      	str	r2, [r3, #4]
	return 0;
 8000f8a:	2300      	movs	r3, #0
}
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	370c      	adds	r7, #12
 8000f90:	46bd      	mov	sp, r7
 8000f92:	bc80      	pop	{r7}
 8000f94:	4770      	bx	lr

08000f96 <_isatty>:

int _isatty(int file)
{
 8000f96:	b480      	push	{r7}
 8000f98:	b083      	sub	sp, #12
 8000f9a:	af00      	add	r7, sp, #0
 8000f9c:	6078      	str	r0, [r7, #4]
	return 1;
 8000f9e:	2301      	movs	r3, #1
}
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	370c      	adds	r7, #12
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	bc80      	pop	{r7}
 8000fa8:	4770      	bx	lr

08000faa <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000faa:	b480      	push	{r7}
 8000fac:	b085      	sub	sp, #20
 8000fae:	af00      	add	r7, sp, #0
 8000fb0:	60f8      	str	r0, [r7, #12]
 8000fb2:	60b9      	str	r1, [r7, #8]
 8000fb4:	607a      	str	r2, [r7, #4]
	return 0;
 8000fb6:	2300      	movs	r3, #0
}
 8000fb8:	4618      	mov	r0, r3
 8000fba:	3714      	adds	r7, #20
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	bc80      	pop	{r7}
 8000fc0:	4770      	bx	lr
	...

08000fc4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b086      	sub	sp, #24
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000fcc:	4a14      	ldr	r2, [pc, #80]	; (8001020 <_sbrk+0x5c>)
 8000fce:	4b15      	ldr	r3, [pc, #84]	; (8001024 <_sbrk+0x60>)
 8000fd0:	1ad3      	subs	r3, r2, r3
 8000fd2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000fd4:	697b      	ldr	r3, [r7, #20]
 8000fd6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000fd8:	4b13      	ldr	r3, [pc, #76]	; (8001028 <_sbrk+0x64>)
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d102      	bne.n	8000fe6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000fe0:	4b11      	ldr	r3, [pc, #68]	; (8001028 <_sbrk+0x64>)
 8000fe2:	4a12      	ldr	r2, [pc, #72]	; (800102c <_sbrk+0x68>)
 8000fe4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000fe6:	4b10      	ldr	r3, [pc, #64]	; (8001028 <_sbrk+0x64>)
 8000fe8:	681a      	ldr	r2, [r3, #0]
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	4413      	add	r3, r2
 8000fee:	693a      	ldr	r2, [r7, #16]
 8000ff0:	429a      	cmp	r2, r3
 8000ff2:	d207      	bcs.n	8001004 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ff4:	f002 fd7c 	bl	8003af0 <__errno>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	220c      	movs	r2, #12
 8000ffc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ffe:	f04f 33ff 	mov.w	r3, #4294967295
 8001002:	e009      	b.n	8001018 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001004:	4b08      	ldr	r3, [pc, #32]	; (8001028 <_sbrk+0x64>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800100a:	4b07      	ldr	r3, [pc, #28]	; (8001028 <_sbrk+0x64>)
 800100c:	681a      	ldr	r2, [r3, #0]
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	4413      	add	r3, r2
 8001012:	4a05      	ldr	r2, [pc, #20]	; (8001028 <_sbrk+0x64>)
 8001014:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001016:	68fb      	ldr	r3, [r7, #12]
}
 8001018:	4618      	mov	r0, r3
 800101a:	3718      	adds	r7, #24
 800101c:	46bd      	mov	sp, r7
 800101e:	bd80      	pop	{r7, pc}
 8001020:	20005000 	.word	0x20005000
 8001024:	00000400 	.word	0x00000400
 8001028:	20000184 	.word	0x20000184
 800102c:	200001a0 	.word	0x200001a0

08001030 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001030:	b480      	push	{r7}
 8001032:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001034:	bf00      	nop
 8001036:	46bd      	mov	sp, r7
 8001038:	bc80      	pop	{r7}
 800103a:	4770      	bx	lr

0800103c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800103c:	480c      	ldr	r0, [pc, #48]	; (8001070 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800103e:	490d      	ldr	r1, [pc, #52]	; (8001074 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001040:	4a0d      	ldr	r2, [pc, #52]	; (8001078 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001042:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001044:	e002      	b.n	800104c <LoopCopyDataInit>

08001046 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001046:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001048:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800104a:	3304      	adds	r3, #4

0800104c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800104c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800104e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001050:	d3f9      	bcc.n	8001046 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001052:	4a0a      	ldr	r2, [pc, #40]	; (800107c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001054:	4c0a      	ldr	r4, [pc, #40]	; (8001080 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001056:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001058:	e001      	b.n	800105e <LoopFillZerobss>

0800105a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800105a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800105c:	3204      	adds	r2, #4

0800105e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800105e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001060:	d3fb      	bcc.n	800105a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001062:	f7ff ffe5 	bl	8001030 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001066:	f002 fd49 	bl	8003afc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800106a:	f7ff fb9d 	bl	80007a8 <main>
  bx lr
 800106e:	4770      	bx	lr
  ldr r0, =_sdata
 8001070:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001074:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001078:	08004ba8 	.word	0x08004ba8
  ldr r2, =_sbss
 800107c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001080:	2000019c 	.word	0x2000019c

08001084 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001084:	e7fe      	b.n	8001084 <ADC1_2_IRQHandler>
	...

08001088 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800108c:	4b08      	ldr	r3, [pc, #32]	; (80010b0 <HAL_Init+0x28>)
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	4a07      	ldr	r2, [pc, #28]	; (80010b0 <HAL_Init+0x28>)
 8001092:	f043 0310 	orr.w	r3, r3, #16
 8001096:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001098:	2003      	movs	r0, #3
 800109a:	f000 ff5d 	bl	8001f58 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800109e:	200f      	movs	r0, #15
 80010a0:	f000 f808 	bl	80010b4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010a4:	f7ff fe2e 	bl	8000d04 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010a8:	2300      	movs	r3, #0
}
 80010aa:	4618      	mov	r0, r3
 80010ac:	bd80      	pop	{r7, pc}
 80010ae:	bf00      	nop
 80010b0:	40022000 	.word	0x40022000

080010b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b082      	sub	sp, #8
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80010bc:	4b12      	ldr	r3, [pc, #72]	; (8001108 <HAL_InitTick+0x54>)
 80010be:	681a      	ldr	r2, [r3, #0]
 80010c0:	4b12      	ldr	r3, [pc, #72]	; (800110c <HAL_InitTick+0x58>)
 80010c2:	781b      	ldrb	r3, [r3, #0]
 80010c4:	4619      	mov	r1, r3
 80010c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80010ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80010d2:	4618      	mov	r0, r3
 80010d4:	f000 ff75 	bl	8001fc2 <HAL_SYSTICK_Config>
 80010d8:	4603      	mov	r3, r0
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d001      	beq.n	80010e2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80010de:	2301      	movs	r3, #1
 80010e0:	e00e      	b.n	8001100 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	2b0f      	cmp	r3, #15
 80010e6:	d80a      	bhi.n	80010fe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010e8:	2200      	movs	r2, #0
 80010ea:	6879      	ldr	r1, [r7, #4]
 80010ec:	f04f 30ff 	mov.w	r0, #4294967295
 80010f0:	f000 ff3d 	bl	8001f6e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010f4:	4a06      	ldr	r2, [pc, #24]	; (8001110 <HAL_InitTick+0x5c>)
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80010fa:	2300      	movs	r3, #0
 80010fc:	e000      	b.n	8001100 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80010fe:	2301      	movs	r3, #1
}
 8001100:	4618      	mov	r0, r3
 8001102:	3708      	adds	r7, #8
 8001104:	46bd      	mov	sp, r7
 8001106:	bd80      	pop	{r7, pc}
 8001108:	20000000 	.word	0x20000000
 800110c:	20000008 	.word	0x20000008
 8001110:	20000004 	.word	0x20000004

08001114 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001114:	b480      	push	{r7}
 8001116:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001118:	4b05      	ldr	r3, [pc, #20]	; (8001130 <HAL_IncTick+0x1c>)
 800111a:	781b      	ldrb	r3, [r3, #0]
 800111c:	461a      	mov	r2, r3
 800111e:	4b05      	ldr	r3, [pc, #20]	; (8001134 <HAL_IncTick+0x20>)
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	4413      	add	r3, r2
 8001124:	4a03      	ldr	r2, [pc, #12]	; (8001134 <HAL_IncTick+0x20>)
 8001126:	6013      	str	r3, [r2, #0]
}
 8001128:	bf00      	nop
 800112a:	46bd      	mov	sp, r7
 800112c:	bc80      	pop	{r7}
 800112e:	4770      	bx	lr
 8001130:	20000008 	.word	0x20000008
 8001134:	20000188 	.word	0x20000188

08001138 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001138:	b480      	push	{r7}
 800113a:	af00      	add	r7, sp, #0
  return uwTick;
 800113c:	4b02      	ldr	r3, [pc, #8]	; (8001148 <HAL_GetTick+0x10>)
 800113e:	681b      	ldr	r3, [r3, #0]
}
 8001140:	4618      	mov	r0, r3
 8001142:	46bd      	mov	sp, r7
 8001144:	bc80      	pop	{r7}
 8001146:	4770      	bx	lr
 8001148:	20000188 	.word	0x20000188

0800114c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b084      	sub	sp, #16
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001154:	f7ff fff0 	bl	8001138 <HAL_GetTick>
 8001158:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001164:	d005      	beq.n	8001172 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001166:	4b0a      	ldr	r3, [pc, #40]	; (8001190 <HAL_Delay+0x44>)
 8001168:	781b      	ldrb	r3, [r3, #0]
 800116a:	461a      	mov	r2, r3
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	4413      	add	r3, r2
 8001170:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001172:	bf00      	nop
 8001174:	f7ff ffe0 	bl	8001138 <HAL_GetTick>
 8001178:	4602      	mov	r2, r0
 800117a:	68bb      	ldr	r3, [r7, #8]
 800117c:	1ad3      	subs	r3, r2, r3
 800117e:	68fa      	ldr	r2, [r7, #12]
 8001180:	429a      	cmp	r2, r3
 8001182:	d8f7      	bhi.n	8001174 <HAL_Delay+0x28>
  {
  }
}
 8001184:	bf00      	nop
 8001186:	bf00      	nop
 8001188:	3710      	adds	r7, #16
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}
 800118e:	bf00      	nop
 8001190:	20000008 	.word	0x20000008

08001194 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b084      	sub	sp, #16
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d101      	bne.n	80011a6 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80011a2:	2301      	movs	r3, #1
 80011a4:	e0ed      	b.n	8001382 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80011ac:	b2db      	uxtb	r3, r3
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d102      	bne.n	80011b8 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80011b2:	6878      	ldr	r0, [r7, #4]
 80011b4:	f7ff fdd8 	bl	8000d68 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	681a      	ldr	r2, [r3, #0]
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	f042 0201 	orr.w	r2, r2, #1
 80011c6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80011c8:	f7ff ffb6 	bl	8001138 <HAL_GetTick>
 80011cc:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80011ce:	e012      	b.n	80011f6 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80011d0:	f7ff ffb2 	bl	8001138 <HAL_GetTick>
 80011d4:	4602      	mov	r2, r0
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	1ad3      	subs	r3, r2, r3
 80011da:	2b0a      	cmp	r3, #10
 80011dc:	d90b      	bls.n	80011f6 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011e2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	2205      	movs	r2, #5
 80011ee:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80011f2:	2301      	movs	r3, #1
 80011f4:	e0c5      	b.n	8001382 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	685b      	ldr	r3, [r3, #4]
 80011fc:	f003 0301 	and.w	r3, r3, #1
 8001200:	2b00      	cmp	r3, #0
 8001202:	d0e5      	beq.n	80011d0 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	681a      	ldr	r2, [r3, #0]
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	f022 0202 	bic.w	r2, r2, #2
 8001212:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001214:	f7ff ff90 	bl	8001138 <HAL_GetTick>
 8001218:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800121a:	e012      	b.n	8001242 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800121c:	f7ff ff8c 	bl	8001138 <HAL_GetTick>
 8001220:	4602      	mov	r2, r0
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	1ad3      	subs	r3, r2, r3
 8001226:	2b0a      	cmp	r3, #10
 8001228:	d90b      	bls.n	8001242 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800122e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	2205      	movs	r2, #5
 800123a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800123e:	2301      	movs	r3, #1
 8001240:	e09f      	b.n	8001382 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	685b      	ldr	r3, [r3, #4]
 8001248:	f003 0302 	and.w	r3, r3, #2
 800124c:	2b00      	cmp	r3, #0
 800124e:	d1e5      	bne.n	800121c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	7e1b      	ldrb	r3, [r3, #24]
 8001254:	2b01      	cmp	r3, #1
 8001256:	d108      	bne.n	800126a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	681a      	ldr	r2, [r3, #0]
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001266:	601a      	str	r2, [r3, #0]
 8001268:	e007      	b.n	800127a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	681a      	ldr	r2, [r3, #0]
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001278:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	7e5b      	ldrb	r3, [r3, #25]
 800127e:	2b01      	cmp	r3, #1
 8001280:	d108      	bne.n	8001294 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	681a      	ldr	r2, [r3, #0]
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001290:	601a      	str	r2, [r3, #0]
 8001292:	e007      	b.n	80012a4 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	681a      	ldr	r2, [r3, #0]
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80012a2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	7e9b      	ldrb	r3, [r3, #26]
 80012a8:	2b01      	cmp	r3, #1
 80012aa:	d108      	bne.n	80012be <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	681a      	ldr	r2, [r3, #0]
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	f042 0220 	orr.w	r2, r2, #32
 80012ba:	601a      	str	r2, [r3, #0]
 80012bc:	e007      	b.n	80012ce <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	681a      	ldr	r2, [r3, #0]
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	f022 0220 	bic.w	r2, r2, #32
 80012cc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	7edb      	ldrb	r3, [r3, #27]
 80012d2:	2b01      	cmp	r3, #1
 80012d4:	d108      	bne.n	80012e8 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	681a      	ldr	r2, [r3, #0]
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	f022 0210 	bic.w	r2, r2, #16
 80012e4:	601a      	str	r2, [r3, #0]
 80012e6:	e007      	b.n	80012f8 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	681a      	ldr	r2, [r3, #0]
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	f042 0210 	orr.w	r2, r2, #16
 80012f6:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	7f1b      	ldrb	r3, [r3, #28]
 80012fc:	2b01      	cmp	r3, #1
 80012fe:	d108      	bne.n	8001312 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	681a      	ldr	r2, [r3, #0]
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	f042 0208 	orr.w	r2, r2, #8
 800130e:	601a      	str	r2, [r3, #0]
 8001310:	e007      	b.n	8001322 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	681a      	ldr	r2, [r3, #0]
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	f022 0208 	bic.w	r2, r2, #8
 8001320:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	7f5b      	ldrb	r3, [r3, #29]
 8001326:	2b01      	cmp	r3, #1
 8001328:	d108      	bne.n	800133c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	681a      	ldr	r2, [r3, #0]
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	f042 0204 	orr.w	r2, r2, #4
 8001338:	601a      	str	r2, [r3, #0]
 800133a:	e007      	b.n	800134c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	681a      	ldr	r2, [r3, #0]
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	f022 0204 	bic.w	r2, r2, #4
 800134a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	689a      	ldr	r2, [r3, #8]
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	68db      	ldr	r3, [r3, #12]
 8001354:	431a      	orrs	r2, r3
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	691b      	ldr	r3, [r3, #16]
 800135a:	431a      	orrs	r2, r3
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	695b      	ldr	r3, [r3, #20]
 8001360:	ea42 0103 	orr.w	r1, r2, r3
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	685b      	ldr	r3, [r3, #4]
 8001368:	1e5a      	subs	r2, r3, #1
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	430a      	orrs	r2, r1
 8001370:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	2200      	movs	r2, #0
 8001376:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	2201      	movs	r2, #1
 800137c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001380:	2300      	movs	r3, #0
}
 8001382:	4618      	mov	r0, r3
 8001384:	3710      	adds	r7, #16
 8001386:	46bd      	mov	sp, r7
 8001388:	bd80      	pop	{r7, pc}

0800138a <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 800138a:	b480      	push	{r7}
 800138c:	b087      	sub	sp, #28
 800138e:	af00      	add	r7, sp, #0
 8001390:	6078      	str	r0, [r7, #4]
 8001392:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	f893 3020 	ldrb.w	r3, [r3, #32]
 80013a0:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80013a2:	7cfb      	ldrb	r3, [r7, #19]
 80013a4:	2b01      	cmp	r3, #1
 80013a6:	d003      	beq.n	80013b0 <HAL_CAN_ConfigFilter+0x26>
 80013a8:	7cfb      	ldrb	r3, [r7, #19]
 80013aa:	2b02      	cmp	r3, #2
 80013ac:	f040 80aa 	bne.w	8001504 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80013b0:	697b      	ldr	r3, [r7, #20]
 80013b2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80013b6:	f043 0201 	orr.w	r2, r3, #1
 80013ba:	697b      	ldr	r3, [r7, #20]
 80013bc:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80013c0:	683b      	ldr	r3, [r7, #0]
 80013c2:	695b      	ldr	r3, [r3, #20]
 80013c4:	f003 031f 	and.w	r3, r3, #31
 80013c8:	2201      	movs	r2, #1
 80013ca:	fa02 f303 	lsl.w	r3, r2, r3
 80013ce:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80013d0:	697b      	ldr	r3, [r7, #20]
 80013d2:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	43db      	mvns	r3, r3
 80013da:	401a      	ands	r2, r3
 80013dc:	697b      	ldr	r3, [r7, #20]
 80013de:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80013e2:	683b      	ldr	r3, [r7, #0]
 80013e4:	69db      	ldr	r3, [r3, #28]
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d123      	bne.n	8001432 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80013ea:	697b      	ldr	r3, [r7, #20]
 80013ec:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	43db      	mvns	r3, r3
 80013f4:	401a      	ands	r2, r3
 80013f6:	697b      	ldr	r3, [r7, #20]
 80013f8:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80013fc:	683b      	ldr	r3, [r7, #0]
 80013fe:	68db      	ldr	r3, [r3, #12]
 8001400:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001402:	683b      	ldr	r3, [r7, #0]
 8001404:	685b      	ldr	r3, [r3, #4]
 8001406:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001408:	683a      	ldr	r2, [r7, #0]
 800140a:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800140c:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800140e:	697b      	ldr	r3, [r7, #20]
 8001410:	3248      	adds	r2, #72	; 0x48
 8001412:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001416:	683b      	ldr	r3, [r7, #0]
 8001418:	689b      	ldr	r3, [r3, #8]
 800141a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800141c:	683b      	ldr	r3, [r7, #0]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001422:	683b      	ldr	r3, [r7, #0]
 8001424:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001426:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001428:	6979      	ldr	r1, [r7, #20]
 800142a:	3348      	adds	r3, #72	; 0x48
 800142c:	00db      	lsls	r3, r3, #3
 800142e:	440b      	add	r3, r1
 8001430:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001432:	683b      	ldr	r3, [r7, #0]
 8001434:	69db      	ldr	r3, [r3, #28]
 8001436:	2b01      	cmp	r3, #1
 8001438:	d122      	bne.n	8001480 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800143a:	697b      	ldr	r3, [r7, #20]
 800143c:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	431a      	orrs	r2, r3
 8001444:	697b      	ldr	r3, [r7, #20]
 8001446:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800144a:	683b      	ldr	r3, [r7, #0]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001450:	683b      	ldr	r3, [r7, #0]
 8001452:	685b      	ldr	r3, [r3, #4]
 8001454:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001456:	683a      	ldr	r2, [r7, #0]
 8001458:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800145a:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800145c:	697b      	ldr	r3, [r7, #20]
 800145e:	3248      	adds	r2, #72	; 0x48
 8001460:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	689b      	ldr	r3, [r3, #8]
 8001468:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800146a:	683b      	ldr	r3, [r7, #0]
 800146c:	68db      	ldr	r3, [r3, #12]
 800146e:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001470:	683b      	ldr	r3, [r7, #0]
 8001472:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001474:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001476:	6979      	ldr	r1, [r7, #20]
 8001478:	3348      	adds	r3, #72	; 0x48
 800147a:	00db      	lsls	r3, r3, #3
 800147c:	440b      	add	r3, r1
 800147e:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001480:	683b      	ldr	r3, [r7, #0]
 8001482:	699b      	ldr	r3, [r3, #24]
 8001484:	2b00      	cmp	r3, #0
 8001486:	d109      	bne.n	800149c <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001488:	697b      	ldr	r3, [r7, #20]
 800148a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	43db      	mvns	r3, r3
 8001492:	401a      	ands	r2, r3
 8001494:	697b      	ldr	r3, [r7, #20]
 8001496:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 800149a:	e007      	b.n	80014ac <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800149c:	697b      	ldr	r3, [r7, #20]
 800149e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	431a      	orrs	r2, r3
 80014a6:	697b      	ldr	r3, [r7, #20]
 80014a8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80014ac:	683b      	ldr	r3, [r7, #0]
 80014ae:	691b      	ldr	r3, [r3, #16]
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d109      	bne.n	80014c8 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80014b4:	697b      	ldr	r3, [r7, #20]
 80014b6:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	43db      	mvns	r3, r3
 80014be:	401a      	ands	r2, r3
 80014c0:	697b      	ldr	r3, [r7, #20]
 80014c2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80014c6:	e007      	b.n	80014d8 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80014c8:	697b      	ldr	r3, [r7, #20]
 80014ca:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	431a      	orrs	r2, r3
 80014d2:	697b      	ldr	r3, [r7, #20]
 80014d4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80014d8:	683b      	ldr	r3, [r7, #0]
 80014da:	6a1b      	ldr	r3, [r3, #32]
 80014dc:	2b01      	cmp	r3, #1
 80014de:	d107      	bne.n	80014f0 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80014e0:	697b      	ldr	r3, [r7, #20]
 80014e2:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	431a      	orrs	r2, r3
 80014ea:	697b      	ldr	r3, [r7, #20]
 80014ec:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80014f0:	697b      	ldr	r3, [r7, #20]
 80014f2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80014f6:	f023 0201 	bic.w	r2, r3, #1
 80014fa:	697b      	ldr	r3, [r7, #20]
 80014fc:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8001500:	2300      	movs	r3, #0
 8001502:	e006      	b.n	8001512 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001508:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001510:	2301      	movs	r3, #1
  }
}
 8001512:	4618      	mov	r0, r3
 8001514:	371c      	adds	r7, #28
 8001516:	46bd      	mov	sp, r7
 8001518:	bc80      	pop	{r7}
 800151a:	4770      	bx	lr

0800151c <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b084      	sub	sp, #16
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	f893 3020 	ldrb.w	r3, [r3, #32]
 800152a:	b2db      	uxtb	r3, r3
 800152c:	2b01      	cmp	r3, #1
 800152e:	d12e      	bne.n	800158e <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	2202      	movs	r2, #2
 8001534:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	681a      	ldr	r2, [r3, #0]
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f022 0201 	bic.w	r2, r2, #1
 8001546:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001548:	f7ff fdf6 	bl	8001138 <HAL_GetTick>
 800154c:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800154e:	e012      	b.n	8001576 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001550:	f7ff fdf2 	bl	8001138 <HAL_GetTick>
 8001554:	4602      	mov	r2, r0
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	1ad3      	subs	r3, r2, r3
 800155a:	2b0a      	cmp	r3, #10
 800155c:	d90b      	bls.n	8001576 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001562:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	2205      	movs	r2, #5
 800156e:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001572:	2301      	movs	r3, #1
 8001574:	e012      	b.n	800159c <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	685b      	ldr	r3, [r3, #4]
 800157c:	f003 0301 	and.w	r3, r3, #1
 8001580:	2b00      	cmp	r3, #0
 8001582:	d1e5      	bne.n	8001550 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	2200      	movs	r2, #0
 8001588:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 800158a:	2300      	movs	r3, #0
 800158c:	e006      	b.n	800159c <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001592:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800159a:	2301      	movs	r3, #1
  }
}
 800159c:	4618      	mov	r0, r3
 800159e:	3710      	adds	r7, #16
 80015a0:	46bd      	mov	sp, r7
 80015a2:	bd80      	pop	{r7, pc}

080015a4 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 80015a4:	b480      	push	{r7}
 80015a6:	b089      	sub	sp, #36	; 0x24
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	60f8      	str	r0, [r7, #12]
 80015ac:	60b9      	str	r1, [r7, #8]
 80015ae:	607a      	str	r2, [r7, #4]
 80015b0:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80015b8:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	689b      	ldr	r3, [r3, #8]
 80015c0:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80015c2:	7ffb      	ldrb	r3, [r7, #31]
 80015c4:	2b01      	cmp	r3, #1
 80015c6:	d003      	beq.n	80015d0 <HAL_CAN_AddTxMessage+0x2c>
 80015c8:	7ffb      	ldrb	r3, [r7, #31]
 80015ca:	2b02      	cmp	r3, #2
 80015cc:	f040 80b8 	bne.w	8001740 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80015d0:	69bb      	ldr	r3, [r7, #24]
 80015d2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d10a      	bne.n	80015f0 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80015da:	69bb      	ldr	r3, [r7, #24]
 80015dc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d105      	bne.n	80015f0 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80015e4:	69bb      	ldr	r3, [r7, #24]
 80015e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	f000 80a0 	beq.w	8001730 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80015f0:	69bb      	ldr	r3, [r7, #24]
 80015f2:	0e1b      	lsrs	r3, r3, #24
 80015f4:	f003 0303 	and.w	r3, r3, #3
 80015f8:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 80015fa:	697b      	ldr	r3, [r7, #20]
 80015fc:	2b02      	cmp	r3, #2
 80015fe:	d907      	bls.n	8001610 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001604:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800160c:	2301      	movs	r3, #1
 800160e:	e09e      	b.n	800174e <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001610:	2201      	movs	r2, #1
 8001612:	697b      	ldr	r3, [r7, #20]
 8001614:	409a      	lsls	r2, r3
 8001616:	683b      	ldr	r3, [r7, #0]
 8001618:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 800161a:	68bb      	ldr	r3, [r7, #8]
 800161c:	689b      	ldr	r3, [r3, #8]
 800161e:	2b00      	cmp	r3, #0
 8001620:	d10d      	bne.n	800163e <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001622:	68bb      	ldr	r3, [r7, #8]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8001628:	68bb      	ldr	r3, [r7, #8]
 800162a:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800162c:	68f9      	ldr	r1, [r7, #12]
 800162e:	6809      	ldr	r1, [r1, #0]
 8001630:	431a      	orrs	r2, r3
 8001632:	697b      	ldr	r3, [r7, #20]
 8001634:	3318      	adds	r3, #24
 8001636:	011b      	lsls	r3, r3, #4
 8001638:	440b      	add	r3, r1
 800163a:	601a      	str	r2, [r3, #0]
 800163c:	e00f      	b.n	800165e <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800163e:	68bb      	ldr	r3, [r7, #8]
 8001640:	685b      	ldr	r3, [r3, #4]
 8001642:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001644:	68bb      	ldr	r3, [r7, #8]
 8001646:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001648:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 800164a:	68bb      	ldr	r3, [r7, #8]
 800164c:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800164e:	68f9      	ldr	r1, [r7, #12]
 8001650:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001652:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001654:	697b      	ldr	r3, [r7, #20]
 8001656:	3318      	adds	r3, #24
 8001658:	011b      	lsls	r3, r3, #4
 800165a:	440b      	add	r3, r1
 800165c:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	6819      	ldr	r1, [r3, #0]
 8001662:	68bb      	ldr	r3, [r7, #8]
 8001664:	691a      	ldr	r2, [r3, #16]
 8001666:	697b      	ldr	r3, [r7, #20]
 8001668:	3318      	adds	r3, #24
 800166a:	011b      	lsls	r3, r3, #4
 800166c:	440b      	add	r3, r1
 800166e:	3304      	adds	r3, #4
 8001670:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001672:	68bb      	ldr	r3, [r7, #8]
 8001674:	7d1b      	ldrb	r3, [r3, #20]
 8001676:	2b01      	cmp	r3, #1
 8001678:	d111      	bne.n	800169e <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	681a      	ldr	r2, [r3, #0]
 800167e:	697b      	ldr	r3, [r7, #20]
 8001680:	3318      	adds	r3, #24
 8001682:	011b      	lsls	r3, r3, #4
 8001684:	4413      	add	r3, r2
 8001686:	3304      	adds	r3, #4
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	68fa      	ldr	r2, [r7, #12]
 800168c:	6811      	ldr	r1, [r2, #0]
 800168e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001692:	697b      	ldr	r3, [r7, #20]
 8001694:	3318      	adds	r3, #24
 8001696:	011b      	lsls	r3, r3, #4
 8001698:	440b      	add	r3, r1
 800169a:	3304      	adds	r3, #4
 800169c:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	3307      	adds	r3, #7
 80016a2:	781b      	ldrb	r3, [r3, #0]
 80016a4:	061a      	lsls	r2, r3, #24
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	3306      	adds	r3, #6
 80016aa:	781b      	ldrb	r3, [r3, #0]
 80016ac:	041b      	lsls	r3, r3, #16
 80016ae:	431a      	orrs	r2, r3
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	3305      	adds	r3, #5
 80016b4:	781b      	ldrb	r3, [r3, #0]
 80016b6:	021b      	lsls	r3, r3, #8
 80016b8:	4313      	orrs	r3, r2
 80016ba:	687a      	ldr	r2, [r7, #4]
 80016bc:	3204      	adds	r2, #4
 80016be:	7812      	ldrb	r2, [r2, #0]
 80016c0:	4610      	mov	r0, r2
 80016c2:	68fa      	ldr	r2, [r7, #12]
 80016c4:	6811      	ldr	r1, [r2, #0]
 80016c6:	ea43 0200 	orr.w	r2, r3, r0
 80016ca:	697b      	ldr	r3, [r7, #20]
 80016cc:	011b      	lsls	r3, r3, #4
 80016ce:	440b      	add	r3, r1
 80016d0:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80016d4:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	3303      	adds	r3, #3
 80016da:	781b      	ldrb	r3, [r3, #0]
 80016dc:	061a      	lsls	r2, r3, #24
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	3302      	adds	r3, #2
 80016e2:	781b      	ldrb	r3, [r3, #0]
 80016e4:	041b      	lsls	r3, r3, #16
 80016e6:	431a      	orrs	r2, r3
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	3301      	adds	r3, #1
 80016ec:	781b      	ldrb	r3, [r3, #0]
 80016ee:	021b      	lsls	r3, r3, #8
 80016f0:	4313      	orrs	r3, r2
 80016f2:	687a      	ldr	r2, [r7, #4]
 80016f4:	7812      	ldrb	r2, [r2, #0]
 80016f6:	4610      	mov	r0, r2
 80016f8:	68fa      	ldr	r2, [r7, #12]
 80016fa:	6811      	ldr	r1, [r2, #0]
 80016fc:	ea43 0200 	orr.w	r2, r3, r0
 8001700:	697b      	ldr	r3, [r7, #20]
 8001702:	011b      	lsls	r3, r3, #4
 8001704:	440b      	add	r3, r1
 8001706:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 800170a:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	681a      	ldr	r2, [r3, #0]
 8001710:	697b      	ldr	r3, [r7, #20]
 8001712:	3318      	adds	r3, #24
 8001714:	011b      	lsls	r3, r3, #4
 8001716:	4413      	add	r3, r2
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	68fa      	ldr	r2, [r7, #12]
 800171c:	6811      	ldr	r1, [r2, #0]
 800171e:	f043 0201 	orr.w	r2, r3, #1
 8001722:	697b      	ldr	r3, [r7, #20]
 8001724:	3318      	adds	r3, #24
 8001726:	011b      	lsls	r3, r3, #4
 8001728:	440b      	add	r3, r1
 800172a:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 800172c:	2300      	movs	r3, #0
 800172e:	e00e      	b.n	800174e <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001734:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 800173c:	2301      	movs	r3, #1
 800173e:	e006      	b.n	800174e <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001744:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800174c:	2301      	movs	r3, #1
  }
}
 800174e:	4618      	mov	r0, r3
 8001750:	3724      	adds	r7, #36	; 0x24
 8001752:	46bd      	mov	sp, r7
 8001754:	bc80      	pop	{r7}
 8001756:	4770      	bx	lr

08001758 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001758:	b480      	push	{r7}
 800175a:	b087      	sub	sp, #28
 800175c:	af00      	add	r7, sp, #0
 800175e:	60f8      	str	r0, [r7, #12]
 8001760:	60b9      	str	r1, [r7, #8]
 8001762:	607a      	str	r2, [r7, #4]
 8001764:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	f893 3020 	ldrb.w	r3, [r3, #32]
 800176c:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800176e:	7dfb      	ldrb	r3, [r7, #23]
 8001770:	2b01      	cmp	r3, #1
 8001772:	d003      	beq.n	800177c <HAL_CAN_GetRxMessage+0x24>
 8001774:	7dfb      	ldrb	r3, [r7, #23]
 8001776:	2b02      	cmp	r3, #2
 8001778:	f040 80f3 	bne.w	8001962 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800177c:	68bb      	ldr	r3, [r7, #8]
 800177e:	2b00      	cmp	r3, #0
 8001780:	d10e      	bne.n	80017a0 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	68db      	ldr	r3, [r3, #12]
 8001788:	f003 0303 	and.w	r3, r3, #3
 800178c:	2b00      	cmp	r3, #0
 800178e:	d116      	bne.n	80017be <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001794:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800179c:	2301      	movs	r3, #1
 800179e:	e0e7      	b.n	8001970 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	691b      	ldr	r3, [r3, #16]
 80017a6:	f003 0303 	and.w	r3, r3, #3
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d107      	bne.n	80017be <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017b2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80017ba:	2301      	movs	r3, #1
 80017bc:	e0d8      	b.n	8001970 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	681a      	ldr	r2, [r3, #0]
 80017c2:	68bb      	ldr	r3, [r7, #8]
 80017c4:	331b      	adds	r3, #27
 80017c6:	011b      	lsls	r3, r3, #4
 80017c8:	4413      	add	r3, r2
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	f003 0204 	and.w	r2, r3, #4
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	689b      	ldr	r3, [r3, #8]
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d10c      	bne.n	80017f6 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	681a      	ldr	r2, [r3, #0]
 80017e0:	68bb      	ldr	r3, [r7, #8]
 80017e2:	331b      	adds	r3, #27
 80017e4:	011b      	lsls	r3, r3, #4
 80017e6:	4413      	add	r3, r2
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	0d5b      	lsrs	r3, r3, #21
 80017ec:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	601a      	str	r2, [r3, #0]
 80017f4:	e00b      	b.n	800180e <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	681a      	ldr	r2, [r3, #0]
 80017fa:	68bb      	ldr	r3, [r7, #8]
 80017fc:	331b      	adds	r3, #27
 80017fe:	011b      	lsls	r3, r3, #4
 8001800:	4413      	add	r3, r2
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	08db      	lsrs	r3, r3, #3
 8001806:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	681a      	ldr	r2, [r3, #0]
 8001812:	68bb      	ldr	r3, [r7, #8]
 8001814:	331b      	adds	r3, #27
 8001816:	011b      	lsls	r3, r3, #4
 8001818:	4413      	add	r3, r2
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	f003 0202 	and.w	r2, r3, #2
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	681a      	ldr	r2, [r3, #0]
 8001828:	68bb      	ldr	r3, [r7, #8]
 800182a:	331b      	adds	r3, #27
 800182c:	011b      	lsls	r3, r3, #4
 800182e:	4413      	add	r3, r2
 8001830:	3304      	adds	r3, #4
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	f003 020f 	and.w	r2, r3, #15
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	681a      	ldr	r2, [r3, #0]
 8001840:	68bb      	ldr	r3, [r7, #8]
 8001842:	331b      	adds	r3, #27
 8001844:	011b      	lsls	r3, r3, #4
 8001846:	4413      	add	r3, r2
 8001848:	3304      	adds	r3, #4
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	0a1b      	lsrs	r3, r3, #8
 800184e:	b2da      	uxtb	r2, r3
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	681a      	ldr	r2, [r3, #0]
 8001858:	68bb      	ldr	r3, [r7, #8]
 800185a:	331b      	adds	r3, #27
 800185c:	011b      	lsls	r3, r3, #4
 800185e:	4413      	add	r3, r2
 8001860:	3304      	adds	r3, #4
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	0c1b      	lsrs	r3, r3, #16
 8001866:	b29a      	uxth	r2, r3
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	681a      	ldr	r2, [r3, #0]
 8001870:	68bb      	ldr	r3, [r7, #8]
 8001872:	011b      	lsls	r3, r3, #4
 8001874:	4413      	add	r3, r2
 8001876:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	b2da      	uxtb	r2, r3
 800187e:	683b      	ldr	r3, [r7, #0]
 8001880:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	681a      	ldr	r2, [r3, #0]
 8001886:	68bb      	ldr	r3, [r7, #8]
 8001888:	011b      	lsls	r3, r3, #4
 800188a:	4413      	add	r3, r2
 800188c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	0a1a      	lsrs	r2, r3, #8
 8001894:	683b      	ldr	r3, [r7, #0]
 8001896:	3301      	adds	r3, #1
 8001898:	b2d2      	uxtb	r2, r2
 800189a:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	681a      	ldr	r2, [r3, #0]
 80018a0:	68bb      	ldr	r3, [r7, #8]
 80018a2:	011b      	lsls	r3, r3, #4
 80018a4:	4413      	add	r3, r2
 80018a6:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	0c1a      	lsrs	r2, r3, #16
 80018ae:	683b      	ldr	r3, [r7, #0]
 80018b0:	3302      	adds	r3, #2
 80018b2:	b2d2      	uxtb	r2, r2
 80018b4:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	681a      	ldr	r2, [r3, #0]
 80018ba:	68bb      	ldr	r3, [r7, #8]
 80018bc:	011b      	lsls	r3, r3, #4
 80018be:	4413      	add	r3, r2
 80018c0:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	0e1a      	lsrs	r2, r3, #24
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	3303      	adds	r3, #3
 80018cc:	b2d2      	uxtb	r2, r2
 80018ce:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	681a      	ldr	r2, [r3, #0]
 80018d4:	68bb      	ldr	r3, [r7, #8]
 80018d6:	011b      	lsls	r3, r3, #4
 80018d8:	4413      	add	r3, r2
 80018da:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80018de:	681a      	ldr	r2, [r3, #0]
 80018e0:	683b      	ldr	r3, [r7, #0]
 80018e2:	3304      	adds	r3, #4
 80018e4:	b2d2      	uxtb	r2, r2
 80018e6:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	681a      	ldr	r2, [r3, #0]
 80018ec:	68bb      	ldr	r3, [r7, #8]
 80018ee:	011b      	lsls	r3, r3, #4
 80018f0:	4413      	add	r3, r2
 80018f2:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	0a1a      	lsrs	r2, r3, #8
 80018fa:	683b      	ldr	r3, [r7, #0]
 80018fc:	3305      	adds	r3, #5
 80018fe:	b2d2      	uxtb	r2, r2
 8001900:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	681a      	ldr	r2, [r3, #0]
 8001906:	68bb      	ldr	r3, [r7, #8]
 8001908:	011b      	lsls	r3, r3, #4
 800190a:	4413      	add	r3, r2
 800190c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	0c1a      	lsrs	r2, r3, #16
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	3306      	adds	r3, #6
 8001918:	b2d2      	uxtb	r2, r2
 800191a:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	681a      	ldr	r2, [r3, #0]
 8001920:	68bb      	ldr	r3, [r7, #8]
 8001922:	011b      	lsls	r3, r3, #4
 8001924:	4413      	add	r3, r2
 8001926:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	0e1a      	lsrs	r2, r3, #24
 800192e:	683b      	ldr	r3, [r7, #0]
 8001930:	3307      	adds	r3, #7
 8001932:	b2d2      	uxtb	r2, r2
 8001934:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001936:	68bb      	ldr	r3, [r7, #8]
 8001938:	2b00      	cmp	r3, #0
 800193a:	d108      	bne.n	800194e <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	68da      	ldr	r2, [r3, #12]
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f042 0220 	orr.w	r2, r2, #32
 800194a:	60da      	str	r2, [r3, #12]
 800194c:	e007      	b.n	800195e <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	691a      	ldr	r2, [r3, #16]
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f042 0220 	orr.w	r2, r2, #32
 800195c:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 800195e:	2300      	movs	r3, #0
 8001960:	e006      	b.n	8001970 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001966:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800196e:	2301      	movs	r3, #1
  }
}
 8001970:	4618      	mov	r0, r3
 8001972:	371c      	adds	r7, #28
 8001974:	46bd      	mov	sp, r7
 8001976:	bc80      	pop	{r7}
 8001978:	4770      	bx	lr

0800197a <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800197a:	b580      	push	{r7, lr}
 800197c:	b08a      	sub	sp, #40	; 0x28
 800197e:	af00      	add	r7, sp, #0
 8001980:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001982:	2300      	movs	r3, #0
 8001984:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	695b      	ldr	r3, [r3, #20]
 800198c:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	685b      	ldr	r3, [r3, #4]
 8001994:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	689b      	ldr	r3, [r3, #8]
 800199c:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	68db      	ldr	r3, [r3, #12]
 80019a4:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	691b      	ldr	r3, [r3, #16]
 80019ac:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	699b      	ldr	r3, [r3, #24]
 80019b4:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80019b6:	6a3b      	ldr	r3, [r7, #32]
 80019b8:	f003 0301 	and.w	r3, r3, #1
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d07c      	beq.n	8001aba <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80019c0:	69bb      	ldr	r3, [r7, #24]
 80019c2:	f003 0301 	and.w	r3, r3, #1
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d023      	beq.n	8001a12 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	2201      	movs	r2, #1
 80019d0:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80019d2:	69bb      	ldr	r3, [r7, #24]
 80019d4:	f003 0302 	and.w	r3, r3, #2
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d003      	beq.n	80019e4 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80019dc:	6878      	ldr	r0, [r7, #4]
 80019de:	f000 f983 	bl	8001ce8 <HAL_CAN_TxMailbox0CompleteCallback>
 80019e2:	e016      	b.n	8001a12 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80019e4:	69bb      	ldr	r3, [r7, #24]
 80019e6:	f003 0304 	and.w	r3, r3, #4
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d004      	beq.n	80019f8 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80019ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019f0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80019f4:	627b      	str	r3, [r7, #36]	; 0x24
 80019f6:	e00c      	b.n	8001a12 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80019f8:	69bb      	ldr	r3, [r7, #24]
 80019fa:	f003 0308 	and.w	r3, r3, #8
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d004      	beq.n	8001a0c <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a04:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001a08:	627b      	str	r3, [r7, #36]	; 0x24
 8001a0a:	e002      	b.n	8001a12 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001a0c:	6878      	ldr	r0, [r7, #4]
 8001a0e:	f000 f986 	bl	8001d1e <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001a12:	69bb      	ldr	r3, [r7, #24]
 8001a14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d024      	beq.n	8001a66 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001a24:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001a26:	69bb      	ldr	r3, [r7, #24]
 8001a28:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d003      	beq.n	8001a38 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001a30:	6878      	ldr	r0, [r7, #4]
 8001a32:	f000 f962 	bl	8001cfa <HAL_CAN_TxMailbox1CompleteCallback>
 8001a36:	e016      	b.n	8001a66 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001a38:	69bb      	ldr	r3, [r7, #24]
 8001a3a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d004      	beq.n	8001a4c <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001a42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a44:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001a48:	627b      	str	r3, [r7, #36]	; 0x24
 8001a4a:	e00c      	b.n	8001a66 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001a4c:	69bb      	ldr	r3, [r7, #24]
 8001a4e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d004      	beq.n	8001a60 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a58:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a5c:	627b      	str	r3, [r7, #36]	; 0x24
 8001a5e:	e002      	b.n	8001a66 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001a60:	6878      	ldr	r0, [r7, #4]
 8001a62:	f000 f965 	bl	8001d30 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001a66:	69bb      	ldr	r3, [r7, #24]
 8001a68:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d024      	beq.n	8001aba <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001a78:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001a7a:	69bb      	ldr	r3, [r7, #24]
 8001a7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d003      	beq.n	8001a8c <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001a84:	6878      	ldr	r0, [r7, #4]
 8001a86:	f000 f941 	bl	8001d0c <HAL_CAN_TxMailbox2CompleteCallback>
 8001a8a:	e016      	b.n	8001aba <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001a8c:	69bb      	ldr	r3, [r7, #24]
 8001a8e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d004      	beq.n	8001aa0 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a98:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001a9c:	627b      	str	r3, [r7, #36]	; 0x24
 8001a9e:	e00c      	b.n	8001aba <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001aa0:	69bb      	ldr	r3, [r7, #24]
 8001aa2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d004      	beq.n	8001ab4 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ab0:	627b      	str	r3, [r7, #36]	; 0x24
 8001ab2:	e002      	b.n	8001aba <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001ab4:	6878      	ldr	r0, [r7, #4]
 8001ab6:	f000 f944 	bl	8001d42 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001aba:	6a3b      	ldr	r3, [r7, #32]
 8001abc:	f003 0308 	and.w	r3, r3, #8
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d00c      	beq.n	8001ade <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001ac4:	697b      	ldr	r3, [r7, #20]
 8001ac6:	f003 0310 	and.w	r3, r3, #16
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d007      	beq.n	8001ade <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ad0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001ad4:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	2210      	movs	r2, #16
 8001adc:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001ade:	6a3b      	ldr	r3, [r7, #32]
 8001ae0:	f003 0304 	and.w	r3, r3, #4
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d00b      	beq.n	8001b00 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001ae8:	697b      	ldr	r3, [r7, #20]
 8001aea:	f003 0308 	and.w	r3, r3, #8
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d006      	beq.n	8001b00 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	2208      	movs	r2, #8
 8001af8:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001afa:	6878      	ldr	r0, [r7, #4]
 8001afc:	f000 f92a 	bl	8001d54 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001b00:	6a3b      	ldr	r3, [r7, #32]
 8001b02:	f003 0302 	and.w	r3, r3, #2
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d009      	beq.n	8001b1e <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	68db      	ldr	r3, [r3, #12]
 8001b10:	f003 0303 	and.w	r3, r3, #3
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d002      	beq.n	8001b1e <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001b18:	6878      	ldr	r0, [r7, #4]
 8001b1a:	f7ff f8af 	bl	8000c7c <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001b1e:	6a3b      	ldr	r3, [r7, #32]
 8001b20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d00c      	beq.n	8001b42 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001b28:	693b      	ldr	r3, [r7, #16]
 8001b2a:	f003 0310 	and.w	r3, r3, #16
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d007      	beq.n	8001b42 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b34:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001b38:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	2210      	movs	r2, #16
 8001b40:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001b42:	6a3b      	ldr	r3, [r7, #32]
 8001b44:	f003 0320 	and.w	r3, r3, #32
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d00b      	beq.n	8001b64 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001b4c:	693b      	ldr	r3, [r7, #16]
 8001b4e:	f003 0308 	and.w	r3, r3, #8
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d006      	beq.n	8001b64 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	2208      	movs	r2, #8
 8001b5c:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001b5e:	6878      	ldr	r0, [r7, #4]
 8001b60:	f000 f90a 	bl	8001d78 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001b64:	6a3b      	ldr	r3, [r7, #32]
 8001b66:	f003 0310 	and.w	r3, r3, #16
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d009      	beq.n	8001b82 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	691b      	ldr	r3, [r3, #16]
 8001b74:	f003 0303 	and.w	r3, r3, #3
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d002      	beq.n	8001b82 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001b7c:	6878      	ldr	r0, [r7, #4]
 8001b7e:	f000 f8f2 	bl	8001d66 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001b82:	6a3b      	ldr	r3, [r7, #32]
 8001b84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d00b      	beq.n	8001ba4 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001b8c:	69fb      	ldr	r3, [r7, #28]
 8001b8e:	f003 0310 	and.w	r3, r3, #16
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d006      	beq.n	8001ba4 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	2210      	movs	r2, #16
 8001b9c:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001b9e:	6878      	ldr	r0, [r7, #4]
 8001ba0:	f000 f8f3 	bl	8001d8a <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001ba4:	6a3b      	ldr	r3, [r7, #32]
 8001ba6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d00b      	beq.n	8001bc6 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001bae:	69fb      	ldr	r3, [r7, #28]
 8001bb0:	f003 0308 	and.w	r3, r3, #8
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d006      	beq.n	8001bc6 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	2208      	movs	r2, #8
 8001bbe:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001bc0:	6878      	ldr	r0, [r7, #4]
 8001bc2:	f000 f8eb 	bl	8001d9c <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001bc6:	6a3b      	ldr	r3, [r7, #32]
 8001bc8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d07b      	beq.n	8001cc8 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001bd0:	69fb      	ldr	r3, [r7, #28]
 8001bd2:	f003 0304 	and.w	r3, r3, #4
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d072      	beq.n	8001cc0 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001bda:	6a3b      	ldr	r3, [r7, #32]
 8001bdc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d008      	beq.n	8001bf6 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d003      	beq.n	8001bf6 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001bee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bf0:	f043 0301 	orr.w	r3, r3, #1
 8001bf4:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001bf6:	6a3b      	ldr	r3, [r7, #32]
 8001bf8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d008      	beq.n	8001c12 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d003      	beq.n	8001c12 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c0c:	f043 0302 	orr.w	r3, r3, #2
 8001c10:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001c12:	6a3b      	ldr	r3, [r7, #32]
 8001c14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d008      	beq.n	8001c2e <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d003      	beq.n	8001c2e <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c28:	f043 0304 	orr.w	r3, r3, #4
 8001c2c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001c2e:	6a3b      	ldr	r3, [r7, #32]
 8001c30:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d043      	beq.n	8001cc0 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d03e      	beq.n	8001cc0 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001c48:	2b60      	cmp	r3, #96	; 0x60
 8001c4a:	d02b      	beq.n	8001ca4 <HAL_CAN_IRQHandler+0x32a>
 8001c4c:	2b60      	cmp	r3, #96	; 0x60
 8001c4e:	d82e      	bhi.n	8001cae <HAL_CAN_IRQHandler+0x334>
 8001c50:	2b50      	cmp	r3, #80	; 0x50
 8001c52:	d022      	beq.n	8001c9a <HAL_CAN_IRQHandler+0x320>
 8001c54:	2b50      	cmp	r3, #80	; 0x50
 8001c56:	d82a      	bhi.n	8001cae <HAL_CAN_IRQHandler+0x334>
 8001c58:	2b40      	cmp	r3, #64	; 0x40
 8001c5a:	d019      	beq.n	8001c90 <HAL_CAN_IRQHandler+0x316>
 8001c5c:	2b40      	cmp	r3, #64	; 0x40
 8001c5e:	d826      	bhi.n	8001cae <HAL_CAN_IRQHandler+0x334>
 8001c60:	2b30      	cmp	r3, #48	; 0x30
 8001c62:	d010      	beq.n	8001c86 <HAL_CAN_IRQHandler+0x30c>
 8001c64:	2b30      	cmp	r3, #48	; 0x30
 8001c66:	d822      	bhi.n	8001cae <HAL_CAN_IRQHandler+0x334>
 8001c68:	2b10      	cmp	r3, #16
 8001c6a:	d002      	beq.n	8001c72 <HAL_CAN_IRQHandler+0x2f8>
 8001c6c:	2b20      	cmp	r3, #32
 8001c6e:	d005      	beq.n	8001c7c <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001c70:	e01d      	b.n	8001cae <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8001c72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c74:	f043 0308 	orr.w	r3, r3, #8
 8001c78:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001c7a:	e019      	b.n	8001cb0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c7e:	f043 0310 	orr.w	r3, r3, #16
 8001c82:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001c84:	e014      	b.n	8001cb0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c88:	f043 0320 	orr.w	r3, r3, #32
 8001c8c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001c8e:	e00f      	b.n	8001cb0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8001c90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c92:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001c96:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001c98:	e00a      	b.n	8001cb0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8001c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ca0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001ca2:	e005      	b.n	8001cb0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ca6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001caa:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001cac:	e000      	b.n	8001cb0 <HAL_CAN_IRQHandler+0x336>
            break;
 8001cae:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	699a      	ldr	r2, [r3, #24]
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001cbe:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	2204      	movs	r2, #4
 8001cc6:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001cc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d008      	beq.n	8001ce0 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cd4:	431a      	orrs	r2, r3
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001cda:	6878      	ldr	r0, [r7, #4]
 8001cdc:	f000 f867 	bl	8001dae <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001ce0:	bf00      	nop
 8001ce2:	3728      	adds	r7, #40	; 0x28
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	bd80      	pop	{r7, pc}

08001ce8 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	b083      	sub	sp, #12
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001cf0:	bf00      	nop
 8001cf2:	370c      	adds	r7, #12
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	bc80      	pop	{r7}
 8001cf8:	4770      	bx	lr

08001cfa <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001cfa:	b480      	push	{r7}
 8001cfc:	b083      	sub	sp, #12
 8001cfe:	af00      	add	r7, sp, #0
 8001d00:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001d02:	bf00      	nop
 8001d04:	370c      	adds	r7, #12
 8001d06:	46bd      	mov	sp, r7
 8001d08:	bc80      	pop	{r7}
 8001d0a:	4770      	bx	lr

08001d0c <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	b083      	sub	sp, #12
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001d14:	bf00      	nop
 8001d16:	370c      	adds	r7, #12
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	bc80      	pop	{r7}
 8001d1c:	4770      	bx	lr

08001d1e <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001d1e:	b480      	push	{r7}
 8001d20:	b083      	sub	sp, #12
 8001d22:	af00      	add	r7, sp, #0
 8001d24:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001d26:	bf00      	nop
 8001d28:	370c      	adds	r7, #12
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	bc80      	pop	{r7}
 8001d2e:	4770      	bx	lr

08001d30 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001d30:	b480      	push	{r7}
 8001d32:	b083      	sub	sp, #12
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001d38:	bf00      	nop
 8001d3a:	370c      	adds	r7, #12
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	bc80      	pop	{r7}
 8001d40:	4770      	bx	lr

08001d42 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001d42:	b480      	push	{r7}
 8001d44:	b083      	sub	sp, #12
 8001d46:	af00      	add	r7, sp, #0
 8001d48:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001d4a:	bf00      	nop
 8001d4c:	370c      	adds	r7, #12
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	bc80      	pop	{r7}
 8001d52:	4770      	bx	lr

08001d54 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001d54:	b480      	push	{r7}
 8001d56:	b083      	sub	sp, #12
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001d5c:	bf00      	nop
 8001d5e:	370c      	adds	r7, #12
 8001d60:	46bd      	mov	sp, r7
 8001d62:	bc80      	pop	{r7}
 8001d64:	4770      	bx	lr

08001d66 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001d66:	b480      	push	{r7}
 8001d68:	b083      	sub	sp, #12
 8001d6a:	af00      	add	r7, sp, #0
 8001d6c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001d6e:	bf00      	nop
 8001d70:	370c      	adds	r7, #12
 8001d72:	46bd      	mov	sp, r7
 8001d74:	bc80      	pop	{r7}
 8001d76:	4770      	bx	lr

08001d78 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	b083      	sub	sp, #12
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001d80:	bf00      	nop
 8001d82:	370c      	adds	r7, #12
 8001d84:	46bd      	mov	sp, r7
 8001d86:	bc80      	pop	{r7}
 8001d88:	4770      	bx	lr

08001d8a <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001d8a:	b480      	push	{r7}
 8001d8c:	b083      	sub	sp, #12
 8001d8e:	af00      	add	r7, sp, #0
 8001d90:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001d92:	bf00      	nop
 8001d94:	370c      	adds	r7, #12
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bc80      	pop	{r7}
 8001d9a:	4770      	bx	lr

08001d9c <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	b083      	sub	sp, #12
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001da4:	bf00      	nop
 8001da6:	370c      	adds	r7, #12
 8001da8:	46bd      	mov	sp, r7
 8001daa:	bc80      	pop	{r7}
 8001dac:	4770      	bx	lr

08001dae <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001dae:	b480      	push	{r7}
 8001db0:	b083      	sub	sp, #12
 8001db2:	af00      	add	r7, sp, #0
 8001db4:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001db6:	bf00      	nop
 8001db8:	370c      	adds	r7, #12
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	bc80      	pop	{r7}
 8001dbe:	4770      	bx	lr

08001dc0 <__NVIC_SetPriorityGrouping>:
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	b085      	sub	sp, #20
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	f003 0307 	and.w	r3, r3, #7
 8001dce:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001dd0:	4b0c      	ldr	r3, [pc, #48]	; (8001e04 <__NVIC_SetPriorityGrouping+0x44>)
 8001dd2:	68db      	ldr	r3, [r3, #12]
 8001dd4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001dd6:	68ba      	ldr	r2, [r7, #8]
 8001dd8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ddc:	4013      	ands	r3, r2
 8001dde:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001de4:	68bb      	ldr	r3, [r7, #8]
 8001de6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001de8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001dec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001df0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001df2:	4a04      	ldr	r2, [pc, #16]	; (8001e04 <__NVIC_SetPriorityGrouping+0x44>)
 8001df4:	68bb      	ldr	r3, [r7, #8]
 8001df6:	60d3      	str	r3, [r2, #12]
}
 8001df8:	bf00      	nop
 8001dfa:	3714      	adds	r7, #20
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	bc80      	pop	{r7}
 8001e00:	4770      	bx	lr
 8001e02:	bf00      	nop
 8001e04:	e000ed00 	.word	0xe000ed00

08001e08 <__NVIC_GetPriorityGrouping>:
{
 8001e08:	b480      	push	{r7}
 8001e0a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e0c:	4b04      	ldr	r3, [pc, #16]	; (8001e20 <__NVIC_GetPriorityGrouping+0x18>)
 8001e0e:	68db      	ldr	r3, [r3, #12]
 8001e10:	0a1b      	lsrs	r3, r3, #8
 8001e12:	f003 0307 	and.w	r3, r3, #7
}
 8001e16:	4618      	mov	r0, r3
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	bc80      	pop	{r7}
 8001e1c:	4770      	bx	lr
 8001e1e:	bf00      	nop
 8001e20:	e000ed00 	.word	0xe000ed00

08001e24 <__NVIC_EnableIRQ>:
{
 8001e24:	b480      	push	{r7}
 8001e26:	b083      	sub	sp, #12
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	db0b      	blt.n	8001e4e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e36:	79fb      	ldrb	r3, [r7, #7]
 8001e38:	f003 021f 	and.w	r2, r3, #31
 8001e3c:	4906      	ldr	r1, [pc, #24]	; (8001e58 <__NVIC_EnableIRQ+0x34>)
 8001e3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e42:	095b      	lsrs	r3, r3, #5
 8001e44:	2001      	movs	r0, #1
 8001e46:	fa00 f202 	lsl.w	r2, r0, r2
 8001e4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001e4e:	bf00      	nop
 8001e50:	370c      	adds	r7, #12
 8001e52:	46bd      	mov	sp, r7
 8001e54:	bc80      	pop	{r7}
 8001e56:	4770      	bx	lr
 8001e58:	e000e100 	.word	0xe000e100

08001e5c <__NVIC_SetPriority>:
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	b083      	sub	sp, #12
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	4603      	mov	r3, r0
 8001e64:	6039      	str	r1, [r7, #0]
 8001e66:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	db0a      	blt.n	8001e86 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	b2da      	uxtb	r2, r3
 8001e74:	490c      	ldr	r1, [pc, #48]	; (8001ea8 <__NVIC_SetPriority+0x4c>)
 8001e76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e7a:	0112      	lsls	r2, r2, #4
 8001e7c:	b2d2      	uxtb	r2, r2
 8001e7e:	440b      	add	r3, r1
 8001e80:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001e84:	e00a      	b.n	8001e9c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	b2da      	uxtb	r2, r3
 8001e8a:	4908      	ldr	r1, [pc, #32]	; (8001eac <__NVIC_SetPriority+0x50>)
 8001e8c:	79fb      	ldrb	r3, [r7, #7]
 8001e8e:	f003 030f 	and.w	r3, r3, #15
 8001e92:	3b04      	subs	r3, #4
 8001e94:	0112      	lsls	r2, r2, #4
 8001e96:	b2d2      	uxtb	r2, r2
 8001e98:	440b      	add	r3, r1
 8001e9a:	761a      	strb	r2, [r3, #24]
}
 8001e9c:	bf00      	nop
 8001e9e:	370c      	adds	r7, #12
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	bc80      	pop	{r7}
 8001ea4:	4770      	bx	lr
 8001ea6:	bf00      	nop
 8001ea8:	e000e100 	.word	0xe000e100
 8001eac:	e000ed00 	.word	0xe000ed00

08001eb0 <NVIC_EncodePriority>:
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	b089      	sub	sp, #36	; 0x24
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	60f8      	str	r0, [r7, #12]
 8001eb8:	60b9      	str	r1, [r7, #8]
 8001eba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	f003 0307 	and.w	r3, r3, #7
 8001ec2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ec4:	69fb      	ldr	r3, [r7, #28]
 8001ec6:	f1c3 0307 	rsb	r3, r3, #7
 8001eca:	2b04      	cmp	r3, #4
 8001ecc:	bf28      	it	cs
 8001ece:	2304      	movcs	r3, #4
 8001ed0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ed2:	69fb      	ldr	r3, [r7, #28]
 8001ed4:	3304      	adds	r3, #4
 8001ed6:	2b06      	cmp	r3, #6
 8001ed8:	d902      	bls.n	8001ee0 <NVIC_EncodePriority+0x30>
 8001eda:	69fb      	ldr	r3, [r7, #28]
 8001edc:	3b03      	subs	r3, #3
 8001ede:	e000      	b.n	8001ee2 <NVIC_EncodePriority+0x32>
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ee4:	f04f 32ff 	mov.w	r2, #4294967295
 8001ee8:	69bb      	ldr	r3, [r7, #24]
 8001eea:	fa02 f303 	lsl.w	r3, r2, r3
 8001eee:	43da      	mvns	r2, r3
 8001ef0:	68bb      	ldr	r3, [r7, #8]
 8001ef2:	401a      	ands	r2, r3
 8001ef4:	697b      	ldr	r3, [r7, #20]
 8001ef6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ef8:	f04f 31ff 	mov.w	r1, #4294967295
 8001efc:	697b      	ldr	r3, [r7, #20]
 8001efe:	fa01 f303 	lsl.w	r3, r1, r3
 8001f02:	43d9      	mvns	r1, r3
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f08:	4313      	orrs	r3, r2
}
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	3724      	adds	r7, #36	; 0x24
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bc80      	pop	{r7}
 8001f12:	4770      	bx	lr

08001f14 <SysTick_Config>:
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b082      	sub	sp, #8
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	3b01      	subs	r3, #1
 8001f20:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001f24:	d301      	bcc.n	8001f2a <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8001f26:	2301      	movs	r3, #1
 8001f28:	e00f      	b.n	8001f4a <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f2a:	4a0a      	ldr	r2, [pc, #40]	; (8001f54 <SysTick_Config+0x40>)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	3b01      	subs	r3, #1
 8001f30:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f32:	210f      	movs	r1, #15
 8001f34:	f04f 30ff 	mov.w	r0, #4294967295
 8001f38:	f7ff ff90 	bl	8001e5c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f3c:	4b05      	ldr	r3, [pc, #20]	; (8001f54 <SysTick_Config+0x40>)
 8001f3e:	2200      	movs	r2, #0
 8001f40:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f42:	4b04      	ldr	r3, [pc, #16]	; (8001f54 <SysTick_Config+0x40>)
 8001f44:	2207      	movs	r2, #7
 8001f46:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8001f48:	2300      	movs	r3, #0
}
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	3708      	adds	r7, #8
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bd80      	pop	{r7, pc}
 8001f52:	bf00      	nop
 8001f54:	e000e010 	.word	0xe000e010

08001f58 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b082      	sub	sp, #8
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f60:	6878      	ldr	r0, [r7, #4]
 8001f62:	f7ff ff2d 	bl	8001dc0 <__NVIC_SetPriorityGrouping>
}
 8001f66:	bf00      	nop
 8001f68:	3708      	adds	r7, #8
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	bd80      	pop	{r7, pc}

08001f6e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001f6e:	b580      	push	{r7, lr}
 8001f70:	b086      	sub	sp, #24
 8001f72:	af00      	add	r7, sp, #0
 8001f74:	4603      	mov	r3, r0
 8001f76:	60b9      	str	r1, [r7, #8]
 8001f78:	607a      	str	r2, [r7, #4]
 8001f7a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f80:	f7ff ff42 	bl	8001e08 <__NVIC_GetPriorityGrouping>
 8001f84:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f86:	687a      	ldr	r2, [r7, #4]
 8001f88:	68b9      	ldr	r1, [r7, #8]
 8001f8a:	6978      	ldr	r0, [r7, #20]
 8001f8c:	f7ff ff90 	bl	8001eb0 <NVIC_EncodePriority>
 8001f90:	4602      	mov	r2, r0
 8001f92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f96:	4611      	mov	r1, r2
 8001f98:	4618      	mov	r0, r3
 8001f9a:	f7ff ff5f 	bl	8001e5c <__NVIC_SetPriority>
}
 8001f9e:	bf00      	nop
 8001fa0:	3718      	adds	r7, #24
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	bd80      	pop	{r7, pc}

08001fa6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fa6:	b580      	push	{r7, lr}
 8001fa8:	b082      	sub	sp, #8
 8001faa:	af00      	add	r7, sp, #0
 8001fac:	4603      	mov	r3, r0
 8001fae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001fb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	f7ff ff35 	bl	8001e24 <__NVIC_EnableIRQ>
}
 8001fba:	bf00      	nop
 8001fbc:	3708      	adds	r7, #8
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bd80      	pop	{r7, pc}

08001fc2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001fc2:	b580      	push	{r7, lr}
 8001fc4:	b082      	sub	sp, #8
 8001fc6:	af00      	add	r7, sp, #0
 8001fc8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001fca:	6878      	ldr	r0, [r7, #4]
 8001fcc:	f7ff ffa2 	bl	8001f14 <SysTick_Config>
 8001fd0:	4603      	mov	r3, r0
}
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	3708      	adds	r7, #8
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	bd80      	pop	{r7, pc}
	...

08001fdc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001fdc:	b480      	push	{r7}
 8001fde:	b08b      	sub	sp, #44	; 0x2c
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
 8001fe4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001fea:	2300      	movs	r3, #0
 8001fec:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001fee:	e169      	b.n	80022c4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001ff0:	2201      	movs	r2, #1
 8001ff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001ffa:	683b      	ldr	r3, [r7, #0]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	69fa      	ldr	r2, [r7, #28]
 8002000:	4013      	ands	r3, r2
 8002002:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002004:	69ba      	ldr	r2, [r7, #24]
 8002006:	69fb      	ldr	r3, [r7, #28]
 8002008:	429a      	cmp	r2, r3
 800200a:	f040 8158 	bne.w	80022be <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	685b      	ldr	r3, [r3, #4]
 8002012:	4a9a      	ldr	r2, [pc, #616]	; (800227c <HAL_GPIO_Init+0x2a0>)
 8002014:	4293      	cmp	r3, r2
 8002016:	d05e      	beq.n	80020d6 <HAL_GPIO_Init+0xfa>
 8002018:	4a98      	ldr	r2, [pc, #608]	; (800227c <HAL_GPIO_Init+0x2a0>)
 800201a:	4293      	cmp	r3, r2
 800201c:	d875      	bhi.n	800210a <HAL_GPIO_Init+0x12e>
 800201e:	4a98      	ldr	r2, [pc, #608]	; (8002280 <HAL_GPIO_Init+0x2a4>)
 8002020:	4293      	cmp	r3, r2
 8002022:	d058      	beq.n	80020d6 <HAL_GPIO_Init+0xfa>
 8002024:	4a96      	ldr	r2, [pc, #600]	; (8002280 <HAL_GPIO_Init+0x2a4>)
 8002026:	4293      	cmp	r3, r2
 8002028:	d86f      	bhi.n	800210a <HAL_GPIO_Init+0x12e>
 800202a:	4a96      	ldr	r2, [pc, #600]	; (8002284 <HAL_GPIO_Init+0x2a8>)
 800202c:	4293      	cmp	r3, r2
 800202e:	d052      	beq.n	80020d6 <HAL_GPIO_Init+0xfa>
 8002030:	4a94      	ldr	r2, [pc, #592]	; (8002284 <HAL_GPIO_Init+0x2a8>)
 8002032:	4293      	cmp	r3, r2
 8002034:	d869      	bhi.n	800210a <HAL_GPIO_Init+0x12e>
 8002036:	4a94      	ldr	r2, [pc, #592]	; (8002288 <HAL_GPIO_Init+0x2ac>)
 8002038:	4293      	cmp	r3, r2
 800203a:	d04c      	beq.n	80020d6 <HAL_GPIO_Init+0xfa>
 800203c:	4a92      	ldr	r2, [pc, #584]	; (8002288 <HAL_GPIO_Init+0x2ac>)
 800203e:	4293      	cmp	r3, r2
 8002040:	d863      	bhi.n	800210a <HAL_GPIO_Init+0x12e>
 8002042:	4a92      	ldr	r2, [pc, #584]	; (800228c <HAL_GPIO_Init+0x2b0>)
 8002044:	4293      	cmp	r3, r2
 8002046:	d046      	beq.n	80020d6 <HAL_GPIO_Init+0xfa>
 8002048:	4a90      	ldr	r2, [pc, #576]	; (800228c <HAL_GPIO_Init+0x2b0>)
 800204a:	4293      	cmp	r3, r2
 800204c:	d85d      	bhi.n	800210a <HAL_GPIO_Init+0x12e>
 800204e:	2b12      	cmp	r3, #18
 8002050:	d82a      	bhi.n	80020a8 <HAL_GPIO_Init+0xcc>
 8002052:	2b12      	cmp	r3, #18
 8002054:	d859      	bhi.n	800210a <HAL_GPIO_Init+0x12e>
 8002056:	a201      	add	r2, pc, #4	; (adr r2, 800205c <HAL_GPIO_Init+0x80>)
 8002058:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800205c:	080020d7 	.word	0x080020d7
 8002060:	080020b1 	.word	0x080020b1
 8002064:	080020c3 	.word	0x080020c3
 8002068:	08002105 	.word	0x08002105
 800206c:	0800210b 	.word	0x0800210b
 8002070:	0800210b 	.word	0x0800210b
 8002074:	0800210b 	.word	0x0800210b
 8002078:	0800210b 	.word	0x0800210b
 800207c:	0800210b 	.word	0x0800210b
 8002080:	0800210b 	.word	0x0800210b
 8002084:	0800210b 	.word	0x0800210b
 8002088:	0800210b 	.word	0x0800210b
 800208c:	0800210b 	.word	0x0800210b
 8002090:	0800210b 	.word	0x0800210b
 8002094:	0800210b 	.word	0x0800210b
 8002098:	0800210b 	.word	0x0800210b
 800209c:	0800210b 	.word	0x0800210b
 80020a0:	080020b9 	.word	0x080020b9
 80020a4:	080020cd 	.word	0x080020cd
 80020a8:	4a79      	ldr	r2, [pc, #484]	; (8002290 <HAL_GPIO_Init+0x2b4>)
 80020aa:	4293      	cmp	r3, r2
 80020ac:	d013      	beq.n	80020d6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80020ae:	e02c      	b.n	800210a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	68db      	ldr	r3, [r3, #12]
 80020b4:	623b      	str	r3, [r7, #32]
          break;
 80020b6:	e029      	b.n	800210c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	68db      	ldr	r3, [r3, #12]
 80020bc:	3304      	adds	r3, #4
 80020be:	623b      	str	r3, [r7, #32]
          break;
 80020c0:	e024      	b.n	800210c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	68db      	ldr	r3, [r3, #12]
 80020c6:	3308      	adds	r3, #8
 80020c8:	623b      	str	r3, [r7, #32]
          break;
 80020ca:	e01f      	b.n	800210c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	68db      	ldr	r3, [r3, #12]
 80020d0:	330c      	adds	r3, #12
 80020d2:	623b      	str	r3, [r7, #32]
          break;
 80020d4:	e01a      	b.n	800210c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	689b      	ldr	r3, [r3, #8]
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d102      	bne.n	80020e4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80020de:	2304      	movs	r3, #4
 80020e0:	623b      	str	r3, [r7, #32]
          break;
 80020e2:	e013      	b.n	800210c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	689b      	ldr	r3, [r3, #8]
 80020e8:	2b01      	cmp	r3, #1
 80020ea:	d105      	bne.n	80020f8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80020ec:	2308      	movs	r3, #8
 80020ee:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	69fa      	ldr	r2, [r7, #28]
 80020f4:	611a      	str	r2, [r3, #16]
          break;
 80020f6:	e009      	b.n	800210c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80020f8:	2308      	movs	r3, #8
 80020fa:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	69fa      	ldr	r2, [r7, #28]
 8002100:	615a      	str	r2, [r3, #20]
          break;
 8002102:	e003      	b.n	800210c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002104:	2300      	movs	r3, #0
 8002106:	623b      	str	r3, [r7, #32]
          break;
 8002108:	e000      	b.n	800210c <HAL_GPIO_Init+0x130>
          break;
 800210a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800210c:	69bb      	ldr	r3, [r7, #24]
 800210e:	2bff      	cmp	r3, #255	; 0xff
 8002110:	d801      	bhi.n	8002116 <HAL_GPIO_Init+0x13a>
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	e001      	b.n	800211a <HAL_GPIO_Init+0x13e>
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	3304      	adds	r3, #4
 800211a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800211c:	69bb      	ldr	r3, [r7, #24]
 800211e:	2bff      	cmp	r3, #255	; 0xff
 8002120:	d802      	bhi.n	8002128 <HAL_GPIO_Init+0x14c>
 8002122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002124:	009b      	lsls	r3, r3, #2
 8002126:	e002      	b.n	800212e <HAL_GPIO_Init+0x152>
 8002128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800212a:	3b08      	subs	r3, #8
 800212c:	009b      	lsls	r3, r3, #2
 800212e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002130:	697b      	ldr	r3, [r7, #20]
 8002132:	681a      	ldr	r2, [r3, #0]
 8002134:	210f      	movs	r1, #15
 8002136:	693b      	ldr	r3, [r7, #16]
 8002138:	fa01 f303 	lsl.w	r3, r1, r3
 800213c:	43db      	mvns	r3, r3
 800213e:	401a      	ands	r2, r3
 8002140:	6a39      	ldr	r1, [r7, #32]
 8002142:	693b      	ldr	r3, [r7, #16]
 8002144:	fa01 f303 	lsl.w	r3, r1, r3
 8002148:	431a      	orrs	r2, r3
 800214a:	697b      	ldr	r3, [r7, #20]
 800214c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800214e:	683b      	ldr	r3, [r7, #0]
 8002150:	685b      	ldr	r3, [r3, #4]
 8002152:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002156:	2b00      	cmp	r3, #0
 8002158:	f000 80b1 	beq.w	80022be <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800215c:	4b4d      	ldr	r3, [pc, #308]	; (8002294 <HAL_GPIO_Init+0x2b8>)
 800215e:	699b      	ldr	r3, [r3, #24]
 8002160:	4a4c      	ldr	r2, [pc, #304]	; (8002294 <HAL_GPIO_Init+0x2b8>)
 8002162:	f043 0301 	orr.w	r3, r3, #1
 8002166:	6193      	str	r3, [r2, #24]
 8002168:	4b4a      	ldr	r3, [pc, #296]	; (8002294 <HAL_GPIO_Init+0x2b8>)
 800216a:	699b      	ldr	r3, [r3, #24]
 800216c:	f003 0301 	and.w	r3, r3, #1
 8002170:	60bb      	str	r3, [r7, #8]
 8002172:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002174:	4a48      	ldr	r2, [pc, #288]	; (8002298 <HAL_GPIO_Init+0x2bc>)
 8002176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002178:	089b      	lsrs	r3, r3, #2
 800217a:	3302      	adds	r3, #2
 800217c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002180:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002184:	f003 0303 	and.w	r3, r3, #3
 8002188:	009b      	lsls	r3, r3, #2
 800218a:	220f      	movs	r2, #15
 800218c:	fa02 f303 	lsl.w	r3, r2, r3
 8002190:	43db      	mvns	r3, r3
 8002192:	68fa      	ldr	r2, [r7, #12]
 8002194:	4013      	ands	r3, r2
 8002196:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	4a40      	ldr	r2, [pc, #256]	; (800229c <HAL_GPIO_Init+0x2c0>)
 800219c:	4293      	cmp	r3, r2
 800219e:	d013      	beq.n	80021c8 <HAL_GPIO_Init+0x1ec>
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	4a3f      	ldr	r2, [pc, #252]	; (80022a0 <HAL_GPIO_Init+0x2c4>)
 80021a4:	4293      	cmp	r3, r2
 80021a6:	d00d      	beq.n	80021c4 <HAL_GPIO_Init+0x1e8>
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	4a3e      	ldr	r2, [pc, #248]	; (80022a4 <HAL_GPIO_Init+0x2c8>)
 80021ac:	4293      	cmp	r3, r2
 80021ae:	d007      	beq.n	80021c0 <HAL_GPIO_Init+0x1e4>
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	4a3d      	ldr	r2, [pc, #244]	; (80022a8 <HAL_GPIO_Init+0x2cc>)
 80021b4:	4293      	cmp	r3, r2
 80021b6:	d101      	bne.n	80021bc <HAL_GPIO_Init+0x1e0>
 80021b8:	2303      	movs	r3, #3
 80021ba:	e006      	b.n	80021ca <HAL_GPIO_Init+0x1ee>
 80021bc:	2304      	movs	r3, #4
 80021be:	e004      	b.n	80021ca <HAL_GPIO_Init+0x1ee>
 80021c0:	2302      	movs	r3, #2
 80021c2:	e002      	b.n	80021ca <HAL_GPIO_Init+0x1ee>
 80021c4:	2301      	movs	r3, #1
 80021c6:	e000      	b.n	80021ca <HAL_GPIO_Init+0x1ee>
 80021c8:	2300      	movs	r3, #0
 80021ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80021cc:	f002 0203 	and.w	r2, r2, #3
 80021d0:	0092      	lsls	r2, r2, #2
 80021d2:	4093      	lsls	r3, r2
 80021d4:	68fa      	ldr	r2, [r7, #12]
 80021d6:	4313      	orrs	r3, r2
 80021d8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80021da:	492f      	ldr	r1, [pc, #188]	; (8002298 <HAL_GPIO_Init+0x2bc>)
 80021dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021de:	089b      	lsrs	r3, r3, #2
 80021e0:	3302      	adds	r3, #2
 80021e2:	68fa      	ldr	r2, [r7, #12]
 80021e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	685b      	ldr	r3, [r3, #4]
 80021ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d006      	beq.n	8002202 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80021f4:	4b2d      	ldr	r3, [pc, #180]	; (80022ac <HAL_GPIO_Init+0x2d0>)
 80021f6:	681a      	ldr	r2, [r3, #0]
 80021f8:	492c      	ldr	r1, [pc, #176]	; (80022ac <HAL_GPIO_Init+0x2d0>)
 80021fa:	69bb      	ldr	r3, [r7, #24]
 80021fc:	4313      	orrs	r3, r2
 80021fe:	600b      	str	r3, [r1, #0]
 8002200:	e006      	b.n	8002210 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002202:	4b2a      	ldr	r3, [pc, #168]	; (80022ac <HAL_GPIO_Init+0x2d0>)
 8002204:	681a      	ldr	r2, [r3, #0]
 8002206:	69bb      	ldr	r3, [r7, #24]
 8002208:	43db      	mvns	r3, r3
 800220a:	4928      	ldr	r1, [pc, #160]	; (80022ac <HAL_GPIO_Init+0x2d0>)
 800220c:	4013      	ands	r3, r2
 800220e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	685b      	ldr	r3, [r3, #4]
 8002214:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002218:	2b00      	cmp	r3, #0
 800221a:	d006      	beq.n	800222a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800221c:	4b23      	ldr	r3, [pc, #140]	; (80022ac <HAL_GPIO_Init+0x2d0>)
 800221e:	685a      	ldr	r2, [r3, #4]
 8002220:	4922      	ldr	r1, [pc, #136]	; (80022ac <HAL_GPIO_Init+0x2d0>)
 8002222:	69bb      	ldr	r3, [r7, #24]
 8002224:	4313      	orrs	r3, r2
 8002226:	604b      	str	r3, [r1, #4]
 8002228:	e006      	b.n	8002238 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800222a:	4b20      	ldr	r3, [pc, #128]	; (80022ac <HAL_GPIO_Init+0x2d0>)
 800222c:	685a      	ldr	r2, [r3, #4]
 800222e:	69bb      	ldr	r3, [r7, #24]
 8002230:	43db      	mvns	r3, r3
 8002232:	491e      	ldr	r1, [pc, #120]	; (80022ac <HAL_GPIO_Init+0x2d0>)
 8002234:	4013      	ands	r3, r2
 8002236:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	685b      	ldr	r3, [r3, #4]
 800223c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002240:	2b00      	cmp	r3, #0
 8002242:	d006      	beq.n	8002252 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002244:	4b19      	ldr	r3, [pc, #100]	; (80022ac <HAL_GPIO_Init+0x2d0>)
 8002246:	689a      	ldr	r2, [r3, #8]
 8002248:	4918      	ldr	r1, [pc, #96]	; (80022ac <HAL_GPIO_Init+0x2d0>)
 800224a:	69bb      	ldr	r3, [r7, #24]
 800224c:	4313      	orrs	r3, r2
 800224e:	608b      	str	r3, [r1, #8]
 8002250:	e006      	b.n	8002260 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002252:	4b16      	ldr	r3, [pc, #88]	; (80022ac <HAL_GPIO_Init+0x2d0>)
 8002254:	689a      	ldr	r2, [r3, #8]
 8002256:	69bb      	ldr	r3, [r7, #24]
 8002258:	43db      	mvns	r3, r3
 800225a:	4914      	ldr	r1, [pc, #80]	; (80022ac <HAL_GPIO_Init+0x2d0>)
 800225c:	4013      	ands	r3, r2
 800225e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	685b      	ldr	r3, [r3, #4]
 8002264:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002268:	2b00      	cmp	r3, #0
 800226a:	d021      	beq.n	80022b0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800226c:	4b0f      	ldr	r3, [pc, #60]	; (80022ac <HAL_GPIO_Init+0x2d0>)
 800226e:	68da      	ldr	r2, [r3, #12]
 8002270:	490e      	ldr	r1, [pc, #56]	; (80022ac <HAL_GPIO_Init+0x2d0>)
 8002272:	69bb      	ldr	r3, [r7, #24]
 8002274:	4313      	orrs	r3, r2
 8002276:	60cb      	str	r3, [r1, #12]
 8002278:	e021      	b.n	80022be <HAL_GPIO_Init+0x2e2>
 800227a:	bf00      	nop
 800227c:	10320000 	.word	0x10320000
 8002280:	10310000 	.word	0x10310000
 8002284:	10220000 	.word	0x10220000
 8002288:	10210000 	.word	0x10210000
 800228c:	10120000 	.word	0x10120000
 8002290:	10110000 	.word	0x10110000
 8002294:	40021000 	.word	0x40021000
 8002298:	40010000 	.word	0x40010000
 800229c:	40010800 	.word	0x40010800
 80022a0:	40010c00 	.word	0x40010c00
 80022a4:	40011000 	.word	0x40011000
 80022a8:	40011400 	.word	0x40011400
 80022ac:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80022b0:	4b0b      	ldr	r3, [pc, #44]	; (80022e0 <HAL_GPIO_Init+0x304>)
 80022b2:	68da      	ldr	r2, [r3, #12]
 80022b4:	69bb      	ldr	r3, [r7, #24]
 80022b6:	43db      	mvns	r3, r3
 80022b8:	4909      	ldr	r1, [pc, #36]	; (80022e0 <HAL_GPIO_Init+0x304>)
 80022ba:	4013      	ands	r3, r2
 80022bc:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80022be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022c0:	3301      	adds	r3, #1
 80022c2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	681a      	ldr	r2, [r3, #0]
 80022c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ca:	fa22 f303 	lsr.w	r3, r2, r3
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	f47f ae8e 	bne.w	8001ff0 <HAL_GPIO_Init+0x14>
  }
}
 80022d4:	bf00      	nop
 80022d6:	bf00      	nop
 80022d8:	372c      	adds	r7, #44	; 0x2c
 80022da:	46bd      	mov	sp, r7
 80022dc:	bc80      	pop	{r7}
 80022de:	4770      	bx	lr
 80022e0:	40010400 	.word	0x40010400

080022e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80022e4:	b480      	push	{r7}
 80022e6:	b083      	sub	sp, #12
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
 80022ec:	460b      	mov	r3, r1
 80022ee:	807b      	strh	r3, [r7, #2]
 80022f0:	4613      	mov	r3, r2
 80022f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80022f4:	787b      	ldrb	r3, [r7, #1]
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d003      	beq.n	8002302 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80022fa:	887a      	ldrh	r2, [r7, #2]
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002300:	e003      	b.n	800230a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002302:	887b      	ldrh	r3, [r7, #2]
 8002304:	041a      	lsls	r2, r3, #16
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	611a      	str	r2, [r3, #16]
}
 800230a:	bf00      	nop
 800230c:	370c      	adds	r7, #12
 800230e:	46bd      	mov	sp, r7
 8002310:	bc80      	pop	{r7}
 8002312:	4770      	bx	lr

08002314 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002314:	b480      	push	{r7}
 8002316:	b085      	sub	sp, #20
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
 800231c:	460b      	mov	r3, r1
 800231e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	68db      	ldr	r3, [r3, #12]
 8002324:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002326:	887a      	ldrh	r2, [r7, #2]
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	4013      	ands	r3, r2
 800232c:	041a      	lsls	r2, r3, #16
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	43d9      	mvns	r1, r3
 8002332:	887b      	ldrh	r3, [r7, #2]
 8002334:	400b      	ands	r3, r1
 8002336:	431a      	orrs	r2, r3
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	611a      	str	r2, [r3, #16]
}
 800233c:	bf00      	nop
 800233e:	3714      	adds	r7, #20
 8002340:	46bd      	mov	sp, r7
 8002342:	bc80      	pop	{r7}
 8002344:	4770      	bx	lr
	...

08002348 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b084      	sub	sp, #16
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	2b00      	cmp	r3, #0
 8002354:	d101      	bne.n	800235a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002356:	2301      	movs	r3, #1
 8002358:	e12b      	b.n	80025b2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002360:	b2db      	uxtb	r3, r3
 8002362:	2b00      	cmp	r3, #0
 8002364:	d106      	bne.n	8002374 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	2200      	movs	r2, #0
 800236a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800236e:	6878      	ldr	r0, [r7, #4]
 8002370:	f7fe fd4e 	bl	8000e10 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	2224      	movs	r2, #36	; 0x24
 8002378:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	681a      	ldr	r2, [r3, #0]
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f022 0201 	bic.w	r2, r2, #1
 800238a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	681a      	ldr	r2, [r3, #0]
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800239a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	681a      	ldr	r2, [r3, #0]
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80023aa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80023ac:	f001 fb6e 	bl	8003a8c <HAL_RCC_GetPCLK1Freq>
 80023b0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	685b      	ldr	r3, [r3, #4]
 80023b6:	4a81      	ldr	r2, [pc, #516]	; (80025bc <HAL_I2C_Init+0x274>)
 80023b8:	4293      	cmp	r3, r2
 80023ba:	d807      	bhi.n	80023cc <HAL_I2C_Init+0x84>
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	4a80      	ldr	r2, [pc, #512]	; (80025c0 <HAL_I2C_Init+0x278>)
 80023c0:	4293      	cmp	r3, r2
 80023c2:	bf94      	ite	ls
 80023c4:	2301      	movls	r3, #1
 80023c6:	2300      	movhi	r3, #0
 80023c8:	b2db      	uxtb	r3, r3
 80023ca:	e006      	b.n	80023da <HAL_I2C_Init+0x92>
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	4a7d      	ldr	r2, [pc, #500]	; (80025c4 <HAL_I2C_Init+0x27c>)
 80023d0:	4293      	cmp	r3, r2
 80023d2:	bf94      	ite	ls
 80023d4:	2301      	movls	r3, #1
 80023d6:	2300      	movhi	r3, #0
 80023d8:	b2db      	uxtb	r3, r3
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d001      	beq.n	80023e2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80023de:	2301      	movs	r3, #1
 80023e0:	e0e7      	b.n	80025b2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	4a78      	ldr	r2, [pc, #480]	; (80025c8 <HAL_I2C_Init+0x280>)
 80023e6:	fba2 2303 	umull	r2, r3, r2, r3
 80023ea:	0c9b      	lsrs	r3, r3, #18
 80023ec:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	685b      	ldr	r3, [r3, #4]
 80023f4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	68ba      	ldr	r2, [r7, #8]
 80023fe:	430a      	orrs	r2, r1
 8002400:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	6a1b      	ldr	r3, [r3, #32]
 8002408:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	685b      	ldr	r3, [r3, #4]
 8002410:	4a6a      	ldr	r2, [pc, #424]	; (80025bc <HAL_I2C_Init+0x274>)
 8002412:	4293      	cmp	r3, r2
 8002414:	d802      	bhi.n	800241c <HAL_I2C_Init+0xd4>
 8002416:	68bb      	ldr	r3, [r7, #8]
 8002418:	3301      	adds	r3, #1
 800241a:	e009      	b.n	8002430 <HAL_I2C_Init+0xe8>
 800241c:	68bb      	ldr	r3, [r7, #8]
 800241e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002422:	fb02 f303 	mul.w	r3, r2, r3
 8002426:	4a69      	ldr	r2, [pc, #420]	; (80025cc <HAL_I2C_Init+0x284>)
 8002428:	fba2 2303 	umull	r2, r3, r2, r3
 800242c:	099b      	lsrs	r3, r3, #6
 800242e:	3301      	adds	r3, #1
 8002430:	687a      	ldr	r2, [r7, #4]
 8002432:	6812      	ldr	r2, [r2, #0]
 8002434:	430b      	orrs	r3, r1
 8002436:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	69db      	ldr	r3, [r3, #28]
 800243e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002442:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	685b      	ldr	r3, [r3, #4]
 800244a:	495c      	ldr	r1, [pc, #368]	; (80025bc <HAL_I2C_Init+0x274>)
 800244c:	428b      	cmp	r3, r1
 800244e:	d819      	bhi.n	8002484 <HAL_I2C_Init+0x13c>
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	1e59      	subs	r1, r3, #1
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	685b      	ldr	r3, [r3, #4]
 8002458:	005b      	lsls	r3, r3, #1
 800245a:	fbb1 f3f3 	udiv	r3, r1, r3
 800245e:	1c59      	adds	r1, r3, #1
 8002460:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002464:	400b      	ands	r3, r1
 8002466:	2b00      	cmp	r3, #0
 8002468:	d00a      	beq.n	8002480 <HAL_I2C_Init+0x138>
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	1e59      	subs	r1, r3, #1
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	685b      	ldr	r3, [r3, #4]
 8002472:	005b      	lsls	r3, r3, #1
 8002474:	fbb1 f3f3 	udiv	r3, r1, r3
 8002478:	3301      	adds	r3, #1
 800247a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800247e:	e051      	b.n	8002524 <HAL_I2C_Init+0x1dc>
 8002480:	2304      	movs	r3, #4
 8002482:	e04f      	b.n	8002524 <HAL_I2C_Init+0x1dc>
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	689b      	ldr	r3, [r3, #8]
 8002488:	2b00      	cmp	r3, #0
 800248a:	d111      	bne.n	80024b0 <HAL_I2C_Init+0x168>
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	1e58      	subs	r0, r3, #1
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	6859      	ldr	r1, [r3, #4]
 8002494:	460b      	mov	r3, r1
 8002496:	005b      	lsls	r3, r3, #1
 8002498:	440b      	add	r3, r1
 800249a:	fbb0 f3f3 	udiv	r3, r0, r3
 800249e:	3301      	adds	r3, #1
 80024a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	bf0c      	ite	eq
 80024a8:	2301      	moveq	r3, #1
 80024aa:	2300      	movne	r3, #0
 80024ac:	b2db      	uxtb	r3, r3
 80024ae:	e012      	b.n	80024d6 <HAL_I2C_Init+0x18e>
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	1e58      	subs	r0, r3, #1
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6859      	ldr	r1, [r3, #4]
 80024b8:	460b      	mov	r3, r1
 80024ba:	009b      	lsls	r3, r3, #2
 80024bc:	440b      	add	r3, r1
 80024be:	0099      	lsls	r1, r3, #2
 80024c0:	440b      	add	r3, r1
 80024c2:	fbb0 f3f3 	udiv	r3, r0, r3
 80024c6:	3301      	adds	r3, #1
 80024c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	bf0c      	ite	eq
 80024d0:	2301      	moveq	r3, #1
 80024d2:	2300      	movne	r3, #0
 80024d4:	b2db      	uxtb	r3, r3
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d001      	beq.n	80024de <HAL_I2C_Init+0x196>
 80024da:	2301      	movs	r3, #1
 80024dc:	e022      	b.n	8002524 <HAL_I2C_Init+0x1dc>
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	689b      	ldr	r3, [r3, #8]
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d10e      	bne.n	8002504 <HAL_I2C_Init+0x1bc>
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	1e58      	subs	r0, r3, #1
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	6859      	ldr	r1, [r3, #4]
 80024ee:	460b      	mov	r3, r1
 80024f0:	005b      	lsls	r3, r3, #1
 80024f2:	440b      	add	r3, r1
 80024f4:	fbb0 f3f3 	udiv	r3, r0, r3
 80024f8:	3301      	adds	r3, #1
 80024fa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80024fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002502:	e00f      	b.n	8002524 <HAL_I2C_Init+0x1dc>
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	1e58      	subs	r0, r3, #1
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	6859      	ldr	r1, [r3, #4]
 800250c:	460b      	mov	r3, r1
 800250e:	009b      	lsls	r3, r3, #2
 8002510:	440b      	add	r3, r1
 8002512:	0099      	lsls	r1, r3, #2
 8002514:	440b      	add	r3, r1
 8002516:	fbb0 f3f3 	udiv	r3, r0, r3
 800251a:	3301      	adds	r3, #1
 800251c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002520:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002524:	6879      	ldr	r1, [r7, #4]
 8002526:	6809      	ldr	r1, [r1, #0]
 8002528:	4313      	orrs	r3, r2
 800252a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	69da      	ldr	r2, [r3, #28]
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6a1b      	ldr	r3, [r3, #32]
 800253e:	431a      	orrs	r2, r3
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	430a      	orrs	r2, r1
 8002546:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	689b      	ldr	r3, [r3, #8]
 800254e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002552:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002556:	687a      	ldr	r2, [r7, #4]
 8002558:	6911      	ldr	r1, [r2, #16]
 800255a:	687a      	ldr	r2, [r7, #4]
 800255c:	68d2      	ldr	r2, [r2, #12]
 800255e:	4311      	orrs	r1, r2
 8002560:	687a      	ldr	r2, [r7, #4]
 8002562:	6812      	ldr	r2, [r2, #0]
 8002564:	430b      	orrs	r3, r1
 8002566:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	68db      	ldr	r3, [r3, #12]
 800256e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	695a      	ldr	r2, [r3, #20]
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	699b      	ldr	r3, [r3, #24]
 800257a:	431a      	orrs	r2, r3
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	430a      	orrs	r2, r1
 8002582:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	681a      	ldr	r2, [r3, #0]
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f042 0201 	orr.w	r2, r2, #1
 8002592:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	2200      	movs	r2, #0
 8002598:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	2220      	movs	r2, #32
 800259e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	2200      	movs	r2, #0
 80025a6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	2200      	movs	r2, #0
 80025ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80025b0:	2300      	movs	r3, #0
}
 80025b2:	4618      	mov	r0, r3
 80025b4:	3710      	adds	r7, #16
 80025b6:	46bd      	mov	sp, r7
 80025b8:	bd80      	pop	{r7, pc}
 80025ba:	bf00      	nop
 80025bc:	000186a0 	.word	0x000186a0
 80025c0:	001e847f 	.word	0x001e847f
 80025c4:	003d08ff 	.word	0x003d08ff
 80025c8:	431bde83 	.word	0x431bde83
 80025cc:	10624dd3 	.word	0x10624dd3

080025d0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b088      	sub	sp, #32
 80025d4:	af02      	add	r7, sp, #8
 80025d6:	60f8      	str	r0, [r7, #12]
 80025d8:	607a      	str	r2, [r7, #4]
 80025da:	461a      	mov	r2, r3
 80025dc:	460b      	mov	r3, r1
 80025de:	817b      	strh	r3, [r7, #10]
 80025e0:	4613      	mov	r3, r2
 80025e2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80025e4:	f7fe fda8 	bl	8001138 <HAL_GetTick>
 80025e8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025f0:	b2db      	uxtb	r3, r3
 80025f2:	2b20      	cmp	r3, #32
 80025f4:	f040 80e0 	bne.w	80027b8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80025f8:	697b      	ldr	r3, [r7, #20]
 80025fa:	9300      	str	r3, [sp, #0]
 80025fc:	2319      	movs	r3, #25
 80025fe:	2201      	movs	r2, #1
 8002600:	4970      	ldr	r1, [pc, #448]	; (80027c4 <HAL_I2C_Master_Transmit+0x1f4>)
 8002602:	68f8      	ldr	r0, [r7, #12]
 8002604:	f000 fc92 	bl	8002f2c <I2C_WaitOnFlagUntilTimeout>
 8002608:	4603      	mov	r3, r0
 800260a:	2b00      	cmp	r3, #0
 800260c:	d001      	beq.n	8002612 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800260e:	2302      	movs	r3, #2
 8002610:	e0d3      	b.n	80027ba <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002618:	2b01      	cmp	r3, #1
 800261a:	d101      	bne.n	8002620 <HAL_I2C_Master_Transmit+0x50>
 800261c:	2302      	movs	r3, #2
 800261e:	e0cc      	b.n	80027ba <HAL_I2C_Master_Transmit+0x1ea>
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	2201      	movs	r2, #1
 8002624:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f003 0301 	and.w	r3, r3, #1
 8002632:	2b01      	cmp	r3, #1
 8002634:	d007      	beq.n	8002646 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	681a      	ldr	r2, [r3, #0]
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f042 0201 	orr.w	r2, r2, #1
 8002644:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	681a      	ldr	r2, [r3, #0]
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002654:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	2221      	movs	r2, #33	; 0x21
 800265a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	2210      	movs	r2, #16
 8002662:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	2200      	movs	r2, #0
 800266a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	687a      	ldr	r2, [r7, #4]
 8002670:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	893a      	ldrh	r2, [r7, #8]
 8002676:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800267c:	b29a      	uxth	r2, r3
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	4a50      	ldr	r2, [pc, #320]	; (80027c8 <HAL_I2C_Master_Transmit+0x1f8>)
 8002686:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002688:	8979      	ldrh	r1, [r7, #10]
 800268a:	697b      	ldr	r3, [r7, #20]
 800268c:	6a3a      	ldr	r2, [r7, #32]
 800268e:	68f8      	ldr	r0, [r7, #12]
 8002690:	f000 fafc 	bl	8002c8c <I2C_MasterRequestWrite>
 8002694:	4603      	mov	r3, r0
 8002696:	2b00      	cmp	r3, #0
 8002698:	d001      	beq.n	800269e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800269a:	2301      	movs	r3, #1
 800269c:	e08d      	b.n	80027ba <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800269e:	2300      	movs	r3, #0
 80026a0:	613b      	str	r3, [r7, #16]
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	695b      	ldr	r3, [r3, #20]
 80026a8:	613b      	str	r3, [r7, #16]
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	699b      	ldr	r3, [r3, #24]
 80026b0:	613b      	str	r3, [r7, #16]
 80026b2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80026b4:	e066      	b.n	8002784 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80026b6:	697a      	ldr	r2, [r7, #20]
 80026b8:	6a39      	ldr	r1, [r7, #32]
 80026ba:	68f8      	ldr	r0, [r7, #12]
 80026bc:	f000 fd0c 	bl	80030d8 <I2C_WaitOnTXEFlagUntilTimeout>
 80026c0:	4603      	mov	r3, r0
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d00d      	beq.n	80026e2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ca:	2b04      	cmp	r3, #4
 80026cc:	d107      	bne.n	80026de <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	681a      	ldr	r2, [r3, #0]
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80026dc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80026de:	2301      	movs	r3, #1
 80026e0:	e06b      	b.n	80027ba <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026e6:	781a      	ldrb	r2, [r3, #0]
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026f2:	1c5a      	adds	r2, r3, #1
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026fc:	b29b      	uxth	r3, r3
 80026fe:	3b01      	subs	r3, #1
 8002700:	b29a      	uxth	r2, r3
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800270a:	3b01      	subs	r3, #1
 800270c:	b29a      	uxth	r2, r3
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	695b      	ldr	r3, [r3, #20]
 8002718:	f003 0304 	and.w	r3, r3, #4
 800271c:	2b04      	cmp	r3, #4
 800271e:	d11b      	bne.n	8002758 <HAL_I2C_Master_Transmit+0x188>
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002724:	2b00      	cmp	r3, #0
 8002726:	d017      	beq.n	8002758 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800272c:	781a      	ldrb	r2, [r3, #0]
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002738:	1c5a      	adds	r2, r3, #1
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002742:	b29b      	uxth	r3, r3
 8002744:	3b01      	subs	r3, #1
 8002746:	b29a      	uxth	r2, r3
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002750:	3b01      	subs	r3, #1
 8002752:	b29a      	uxth	r2, r3
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002758:	697a      	ldr	r2, [r7, #20]
 800275a:	6a39      	ldr	r1, [r7, #32]
 800275c:	68f8      	ldr	r0, [r7, #12]
 800275e:	f000 fcfc 	bl	800315a <I2C_WaitOnBTFFlagUntilTimeout>
 8002762:	4603      	mov	r3, r0
 8002764:	2b00      	cmp	r3, #0
 8002766:	d00d      	beq.n	8002784 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800276c:	2b04      	cmp	r3, #4
 800276e:	d107      	bne.n	8002780 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	681a      	ldr	r2, [r3, #0]
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800277e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002780:	2301      	movs	r3, #1
 8002782:	e01a      	b.n	80027ba <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002788:	2b00      	cmp	r3, #0
 800278a:	d194      	bne.n	80026b6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	681a      	ldr	r2, [r3, #0]
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800279a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	2220      	movs	r2, #32
 80027a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	2200      	movs	r2, #0
 80027a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	2200      	movs	r2, #0
 80027b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80027b4:	2300      	movs	r3, #0
 80027b6:	e000      	b.n	80027ba <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80027b8:	2302      	movs	r3, #2
  }
}
 80027ba:	4618      	mov	r0, r3
 80027bc:	3718      	adds	r7, #24
 80027be:	46bd      	mov	sp, r7
 80027c0:	bd80      	pop	{r7, pc}
 80027c2:	bf00      	nop
 80027c4:	00100002 	.word	0x00100002
 80027c8:	ffff0000 	.word	0xffff0000

080027cc <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b08c      	sub	sp, #48	; 0x30
 80027d0:	af02      	add	r7, sp, #8
 80027d2:	60f8      	str	r0, [r7, #12]
 80027d4:	607a      	str	r2, [r7, #4]
 80027d6:	461a      	mov	r2, r3
 80027d8:	460b      	mov	r3, r1
 80027da:	817b      	strh	r3, [r7, #10]
 80027dc:	4613      	mov	r3, r2
 80027de:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 80027e0:	2300      	movs	r3, #0
 80027e2:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80027e4:	f7fe fca8 	bl	8001138 <HAL_GetTick>
 80027e8:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027f0:	b2db      	uxtb	r3, r3
 80027f2:	2b20      	cmp	r3, #32
 80027f4:	f040 823f 	bne.w	8002c76 <HAL_I2C_Master_Receive+0x4aa>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80027f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027fa:	9300      	str	r3, [sp, #0]
 80027fc:	2319      	movs	r3, #25
 80027fe:	2201      	movs	r2, #1
 8002800:	497f      	ldr	r1, [pc, #508]	; (8002a00 <HAL_I2C_Master_Receive+0x234>)
 8002802:	68f8      	ldr	r0, [r7, #12]
 8002804:	f000 fb92 	bl	8002f2c <I2C_WaitOnFlagUntilTimeout>
 8002808:	4603      	mov	r3, r0
 800280a:	2b00      	cmp	r3, #0
 800280c:	d001      	beq.n	8002812 <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 800280e:	2302      	movs	r3, #2
 8002810:	e232      	b.n	8002c78 <HAL_I2C_Master_Receive+0x4ac>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002818:	2b01      	cmp	r3, #1
 800281a:	d101      	bne.n	8002820 <HAL_I2C_Master_Receive+0x54>
 800281c:	2302      	movs	r3, #2
 800281e:	e22b      	b.n	8002c78 <HAL_I2C_Master_Receive+0x4ac>
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	2201      	movs	r2, #1
 8002824:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f003 0301 	and.w	r3, r3, #1
 8002832:	2b01      	cmp	r3, #1
 8002834:	d007      	beq.n	8002846 <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	681a      	ldr	r2, [r3, #0]
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f042 0201 	orr.w	r2, r2, #1
 8002844:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	681a      	ldr	r2, [r3, #0]
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002854:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	2222      	movs	r2, #34	; 0x22
 800285a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	2210      	movs	r2, #16
 8002862:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	2200      	movs	r2, #0
 800286a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	687a      	ldr	r2, [r7, #4]
 8002870:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	893a      	ldrh	r2, [r7, #8]
 8002876:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800287c:	b29a      	uxth	r2, r3
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	4a5f      	ldr	r2, [pc, #380]	; (8002a04 <HAL_I2C_Master_Receive+0x238>)
 8002886:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002888:	8979      	ldrh	r1, [r7, #10]
 800288a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800288c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800288e:	68f8      	ldr	r0, [r7, #12]
 8002890:	f000 fa7e 	bl	8002d90 <I2C_MasterRequestRead>
 8002894:	4603      	mov	r3, r0
 8002896:	2b00      	cmp	r3, #0
 8002898:	d001      	beq.n	800289e <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 800289a:	2301      	movs	r3, #1
 800289c:	e1ec      	b.n	8002c78 <HAL_I2C_Master_Receive+0x4ac>
    }

    if (hi2c->XferSize == 0U)
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d113      	bne.n	80028ce <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80028a6:	2300      	movs	r3, #0
 80028a8:	61fb      	str	r3, [r7, #28]
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	695b      	ldr	r3, [r3, #20]
 80028b0:	61fb      	str	r3, [r7, #28]
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	699b      	ldr	r3, [r3, #24]
 80028b8:	61fb      	str	r3, [r7, #28]
 80028ba:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	681a      	ldr	r2, [r3, #0]
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80028ca:	601a      	str	r2, [r3, #0]
 80028cc:	e1c0      	b.n	8002c50 <HAL_I2C_Master_Receive+0x484>
    }
    else if (hi2c->XferSize == 1U)
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028d2:	2b01      	cmp	r3, #1
 80028d4:	d11e      	bne.n	8002914 <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	681a      	ldr	r2, [r3, #0]
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80028e4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80028e6:	b672      	cpsid	i
}
 80028e8:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80028ea:	2300      	movs	r3, #0
 80028ec:	61bb      	str	r3, [r7, #24]
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	695b      	ldr	r3, [r3, #20]
 80028f4:	61bb      	str	r3, [r7, #24]
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	699b      	ldr	r3, [r3, #24]
 80028fc:	61bb      	str	r3, [r7, #24]
 80028fe:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	681a      	ldr	r2, [r3, #0]
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800290e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002910:	b662      	cpsie	i
}
 8002912:	e035      	b.n	8002980 <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002918:	2b02      	cmp	r3, #2
 800291a:	d11e      	bne.n	800295a <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	681a      	ldr	r2, [r3, #0]
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800292a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800292c:	b672      	cpsid	i
}
 800292e:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002930:	2300      	movs	r3, #0
 8002932:	617b      	str	r3, [r7, #20]
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	695b      	ldr	r3, [r3, #20]
 800293a:	617b      	str	r3, [r7, #20]
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	699b      	ldr	r3, [r3, #24]
 8002942:	617b      	str	r3, [r7, #20]
 8002944:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	681a      	ldr	r2, [r3, #0]
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002954:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002956:	b662      	cpsie	i
}
 8002958:	e012      	b.n	8002980 <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	681a      	ldr	r2, [r3, #0]
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002968:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800296a:	2300      	movs	r3, #0
 800296c:	613b      	str	r3, [r7, #16]
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	695b      	ldr	r3, [r3, #20]
 8002974:	613b      	str	r3, [r7, #16]
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	699b      	ldr	r3, [r3, #24]
 800297c:	613b      	str	r3, [r7, #16]
 800297e:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8002980:	e166      	b.n	8002c50 <HAL_I2C_Master_Receive+0x484>
    {
      if (hi2c->XferSize <= 3U)
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002986:	2b03      	cmp	r3, #3
 8002988:	f200 811f 	bhi.w	8002bca <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002990:	2b01      	cmp	r3, #1
 8002992:	d123      	bne.n	80029dc <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002994:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002996:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002998:	68f8      	ldr	r0, [r7, #12]
 800299a:	f000 fc1f 	bl	80031dc <I2C_WaitOnRXNEFlagUntilTimeout>
 800299e:	4603      	mov	r3, r0
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d001      	beq.n	80029a8 <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 80029a4:	2301      	movs	r3, #1
 80029a6:	e167      	b.n	8002c78 <HAL_I2C_Master_Receive+0x4ac>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	691a      	ldr	r2, [r3, #16]
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029b2:	b2d2      	uxtb	r2, r2
 80029b4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029ba:	1c5a      	adds	r2, r3, #1
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029c4:	3b01      	subs	r3, #1
 80029c6:	b29a      	uxth	r2, r3
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029d0:	b29b      	uxth	r3, r3
 80029d2:	3b01      	subs	r3, #1
 80029d4:	b29a      	uxth	r2, r3
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	855a      	strh	r2, [r3, #42]	; 0x2a
 80029da:	e139      	b.n	8002c50 <HAL_I2C_Master_Receive+0x484>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029e0:	2b02      	cmp	r3, #2
 80029e2:	d152      	bne.n	8002a8a <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80029e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029e6:	9300      	str	r3, [sp, #0]
 80029e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029ea:	2200      	movs	r2, #0
 80029ec:	4906      	ldr	r1, [pc, #24]	; (8002a08 <HAL_I2C_Master_Receive+0x23c>)
 80029ee:	68f8      	ldr	r0, [r7, #12]
 80029f0:	f000 fa9c 	bl	8002f2c <I2C_WaitOnFlagUntilTimeout>
 80029f4:	4603      	mov	r3, r0
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d008      	beq.n	8002a0c <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 80029fa:	2301      	movs	r3, #1
 80029fc:	e13c      	b.n	8002c78 <HAL_I2C_Master_Receive+0x4ac>
 80029fe:	bf00      	nop
 8002a00:	00100002 	.word	0x00100002
 8002a04:	ffff0000 	.word	0xffff0000
 8002a08:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8002a0c:	b672      	cpsid	i
}
 8002a0e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	681a      	ldr	r2, [r3, #0]
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a1e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	691a      	ldr	r2, [r3, #16]
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a2a:	b2d2      	uxtb	r2, r2
 8002a2c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a32:	1c5a      	adds	r2, r3, #1
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a3c:	3b01      	subs	r3, #1
 8002a3e:	b29a      	uxth	r2, r3
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a48:	b29b      	uxth	r3, r3
 8002a4a:	3b01      	subs	r3, #1
 8002a4c:	b29a      	uxth	r2, r3
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002a52:	b662      	cpsie	i
}
 8002a54:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	691a      	ldr	r2, [r3, #16]
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a60:	b2d2      	uxtb	r2, r2
 8002a62:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a68:	1c5a      	adds	r2, r3, #1
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a72:	3b01      	subs	r3, #1
 8002a74:	b29a      	uxth	r2, r3
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a7e:	b29b      	uxth	r3, r3
 8002a80:	3b01      	subs	r3, #1
 8002a82:	b29a      	uxth	r2, r3
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002a88:	e0e2      	b.n	8002c50 <HAL_I2C_Master_Receive+0x484>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a8c:	9300      	str	r3, [sp, #0]
 8002a8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a90:	2200      	movs	r2, #0
 8002a92:	497b      	ldr	r1, [pc, #492]	; (8002c80 <HAL_I2C_Master_Receive+0x4b4>)
 8002a94:	68f8      	ldr	r0, [r7, #12]
 8002a96:	f000 fa49 	bl	8002f2c <I2C_WaitOnFlagUntilTimeout>
 8002a9a:	4603      	mov	r3, r0
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d001      	beq.n	8002aa4 <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 8002aa0:	2301      	movs	r3, #1
 8002aa2:	e0e9      	b.n	8002c78 <HAL_I2C_Master_Receive+0x4ac>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	681a      	ldr	r2, [r3, #0]
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ab2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002ab4:	b672      	cpsid	i
}
 8002ab6:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	691a      	ldr	r2, [r3, #16]
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ac2:	b2d2      	uxtb	r2, r2
 8002ac4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aca:	1c5a      	adds	r2, r3, #1
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ad4:	3b01      	subs	r3, #1
 8002ad6:	b29a      	uxth	r2, r3
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ae0:	b29b      	uxth	r3, r3
 8002ae2:	3b01      	subs	r3, #1
 8002ae4:	b29a      	uxth	r2, r3
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8002aea:	4b66      	ldr	r3, [pc, #408]	; (8002c84 <HAL_I2C_Master_Receive+0x4b8>)
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	08db      	lsrs	r3, r3, #3
 8002af0:	4a65      	ldr	r2, [pc, #404]	; (8002c88 <HAL_I2C_Master_Receive+0x4bc>)
 8002af2:	fba2 2303 	umull	r2, r3, r2, r3
 8002af6:	0a1a      	lsrs	r2, r3, #8
 8002af8:	4613      	mov	r3, r2
 8002afa:	009b      	lsls	r3, r3, #2
 8002afc:	4413      	add	r3, r2
 8002afe:	00da      	lsls	r2, r3, #3
 8002b00:	1ad3      	subs	r3, r2, r3
 8002b02:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8002b04:	6a3b      	ldr	r3, [r7, #32]
 8002b06:	3b01      	subs	r3, #1
 8002b08:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8002b0a:	6a3b      	ldr	r3, [r7, #32]
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d118      	bne.n	8002b42 <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	2200      	movs	r2, #0
 8002b14:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	2220      	movs	r2, #32
 8002b1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	2200      	movs	r2, #0
 8002b22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b2a:	f043 0220 	orr.w	r2, r3, #32
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8002b32:	b662      	cpsie	i
}
 8002b34:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	2200      	movs	r2, #0
 8002b3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8002b3e:	2301      	movs	r3, #1
 8002b40:	e09a      	b.n	8002c78 <HAL_I2C_Master_Receive+0x4ac>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	695b      	ldr	r3, [r3, #20]
 8002b48:	f003 0304 	and.w	r3, r3, #4
 8002b4c:	2b04      	cmp	r3, #4
 8002b4e:	d1d9      	bne.n	8002b04 <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	681a      	ldr	r2, [r3, #0]
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b5e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	691a      	ldr	r2, [r3, #16]
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b6a:	b2d2      	uxtb	r2, r2
 8002b6c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b72:	1c5a      	adds	r2, r3, #1
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b7c:	3b01      	subs	r3, #1
 8002b7e:	b29a      	uxth	r2, r3
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b88:	b29b      	uxth	r3, r3
 8002b8a:	3b01      	subs	r3, #1
 8002b8c:	b29a      	uxth	r2, r3
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002b92:	b662      	cpsie	i
}
 8002b94:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	691a      	ldr	r2, [r3, #16]
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ba0:	b2d2      	uxtb	r2, r2
 8002ba2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ba8:	1c5a      	adds	r2, r3, #1
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bb2:	3b01      	subs	r3, #1
 8002bb4:	b29a      	uxth	r2, r3
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bbe:	b29b      	uxth	r3, r3
 8002bc0:	3b01      	subs	r3, #1
 8002bc2:	b29a      	uxth	r2, r3
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002bc8:	e042      	b.n	8002c50 <HAL_I2C_Master_Receive+0x484>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002bca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002bcc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002bce:	68f8      	ldr	r0, [r7, #12]
 8002bd0:	f000 fb04 	bl	80031dc <I2C_WaitOnRXNEFlagUntilTimeout>
 8002bd4:	4603      	mov	r3, r0
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d001      	beq.n	8002bde <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 8002bda:	2301      	movs	r3, #1
 8002bdc:	e04c      	b.n	8002c78 <HAL_I2C_Master_Receive+0x4ac>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	691a      	ldr	r2, [r3, #16]
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002be8:	b2d2      	uxtb	r2, r2
 8002bea:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bf0:	1c5a      	adds	r2, r3, #1
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bfa:	3b01      	subs	r3, #1
 8002bfc:	b29a      	uxth	r2, r3
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c06:	b29b      	uxth	r3, r3
 8002c08:	3b01      	subs	r3, #1
 8002c0a:	b29a      	uxth	r2, r3
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	695b      	ldr	r3, [r3, #20]
 8002c16:	f003 0304 	and.w	r3, r3, #4
 8002c1a:	2b04      	cmp	r3, #4
 8002c1c:	d118      	bne.n	8002c50 <HAL_I2C_Master_Receive+0x484>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	691a      	ldr	r2, [r3, #16]
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c28:	b2d2      	uxtb	r2, r2
 8002c2a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c30:	1c5a      	adds	r2, r3, #1
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c3a:	3b01      	subs	r3, #1
 8002c3c:	b29a      	uxth	r2, r3
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c46:	b29b      	uxth	r3, r3
 8002c48:	3b01      	subs	r3, #1
 8002c4a:	b29a      	uxth	r2, r3
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	f47f ae94 	bne.w	8002982 <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	2220      	movs	r2, #32
 8002c5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	2200      	movs	r2, #0
 8002c66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002c72:	2300      	movs	r3, #0
 8002c74:	e000      	b.n	8002c78 <HAL_I2C_Master_Receive+0x4ac>
  }
  else
  {
    return HAL_BUSY;
 8002c76:	2302      	movs	r3, #2
  }
}
 8002c78:	4618      	mov	r0, r3
 8002c7a:	3728      	adds	r7, #40	; 0x28
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	bd80      	pop	{r7, pc}
 8002c80:	00010004 	.word	0x00010004
 8002c84:	20000000 	.word	0x20000000
 8002c88:	14f8b589 	.word	0x14f8b589

08002c8c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b088      	sub	sp, #32
 8002c90:	af02      	add	r7, sp, #8
 8002c92:	60f8      	str	r0, [r7, #12]
 8002c94:	607a      	str	r2, [r7, #4]
 8002c96:	603b      	str	r3, [r7, #0]
 8002c98:	460b      	mov	r3, r1
 8002c9a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ca0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002ca2:	697b      	ldr	r3, [r7, #20]
 8002ca4:	2b08      	cmp	r3, #8
 8002ca6:	d006      	beq.n	8002cb6 <I2C_MasterRequestWrite+0x2a>
 8002ca8:	697b      	ldr	r3, [r7, #20]
 8002caa:	2b01      	cmp	r3, #1
 8002cac:	d003      	beq.n	8002cb6 <I2C_MasterRequestWrite+0x2a>
 8002cae:	697b      	ldr	r3, [r7, #20]
 8002cb0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002cb4:	d108      	bne.n	8002cc8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	681a      	ldr	r2, [r3, #0]
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002cc4:	601a      	str	r2, [r3, #0]
 8002cc6:	e00b      	b.n	8002ce0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ccc:	2b12      	cmp	r3, #18
 8002cce:	d107      	bne.n	8002ce0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	681a      	ldr	r2, [r3, #0]
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002cde:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	9300      	str	r3, [sp, #0]
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002cec:	68f8      	ldr	r0, [r7, #12]
 8002cee:	f000 f91d 	bl	8002f2c <I2C_WaitOnFlagUntilTimeout>
 8002cf2:	4603      	mov	r3, r0
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d00d      	beq.n	8002d14 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d02:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d06:	d103      	bne.n	8002d10 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002d0e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002d10:	2303      	movs	r3, #3
 8002d12:	e035      	b.n	8002d80 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	691b      	ldr	r3, [r3, #16]
 8002d18:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002d1c:	d108      	bne.n	8002d30 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002d1e:	897b      	ldrh	r3, [r7, #10]
 8002d20:	b2db      	uxtb	r3, r3
 8002d22:	461a      	mov	r2, r3
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002d2c:	611a      	str	r2, [r3, #16]
 8002d2e:	e01b      	b.n	8002d68 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002d30:	897b      	ldrh	r3, [r7, #10]
 8002d32:	11db      	asrs	r3, r3, #7
 8002d34:	b2db      	uxtb	r3, r3
 8002d36:	f003 0306 	and.w	r3, r3, #6
 8002d3a:	b2db      	uxtb	r3, r3
 8002d3c:	f063 030f 	orn	r3, r3, #15
 8002d40:	b2da      	uxtb	r2, r3
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	687a      	ldr	r2, [r7, #4]
 8002d4c:	490e      	ldr	r1, [pc, #56]	; (8002d88 <I2C_MasterRequestWrite+0xfc>)
 8002d4e:	68f8      	ldr	r0, [r7, #12]
 8002d50:	f000 f943 	bl	8002fda <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002d54:	4603      	mov	r3, r0
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d001      	beq.n	8002d5e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002d5a:	2301      	movs	r3, #1
 8002d5c:	e010      	b.n	8002d80 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002d5e:	897b      	ldrh	r3, [r7, #10]
 8002d60:	b2da      	uxtb	r2, r3
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	687a      	ldr	r2, [r7, #4]
 8002d6c:	4907      	ldr	r1, [pc, #28]	; (8002d8c <I2C_MasterRequestWrite+0x100>)
 8002d6e:	68f8      	ldr	r0, [r7, #12]
 8002d70:	f000 f933 	bl	8002fda <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002d74:	4603      	mov	r3, r0
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d001      	beq.n	8002d7e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002d7a:	2301      	movs	r3, #1
 8002d7c:	e000      	b.n	8002d80 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002d7e:	2300      	movs	r3, #0
}
 8002d80:	4618      	mov	r0, r3
 8002d82:	3718      	adds	r7, #24
 8002d84:	46bd      	mov	sp, r7
 8002d86:	bd80      	pop	{r7, pc}
 8002d88:	00010008 	.word	0x00010008
 8002d8c:	00010002 	.word	0x00010002

08002d90 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b088      	sub	sp, #32
 8002d94:	af02      	add	r7, sp, #8
 8002d96:	60f8      	str	r0, [r7, #12]
 8002d98:	607a      	str	r2, [r7, #4]
 8002d9a:	603b      	str	r3, [r7, #0]
 8002d9c:	460b      	mov	r3, r1
 8002d9e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002da4:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	681a      	ldr	r2, [r3, #0]
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002db4:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002db6:	697b      	ldr	r3, [r7, #20]
 8002db8:	2b08      	cmp	r3, #8
 8002dba:	d006      	beq.n	8002dca <I2C_MasterRequestRead+0x3a>
 8002dbc:	697b      	ldr	r3, [r7, #20]
 8002dbe:	2b01      	cmp	r3, #1
 8002dc0:	d003      	beq.n	8002dca <I2C_MasterRequestRead+0x3a>
 8002dc2:	697b      	ldr	r3, [r7, #20]
 8002dc4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002dc8:	d108      	bne.n	8002ddc <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	681a      	ldr	r2, [r3, #0]
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002dd8:	601a      	str	r2, [r3, #0]
 8002dda:	e00b      	b.n	8002df4 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002de0:	2b11      	cmp	r3, #17
 8002de2:	d107      	bne.n	8002df4 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	681a      	ldr	r2, [r3, #0]
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002df2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	9300      	str	r3, [sp, #0]
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002e00:	68f8      	ldr	r0, [r7, #12]
 8002e02:	f000 f893 	bl	8002f2c <I2C_WaitOnFlagUntilTimeout>
 8002e06:	4603      	mov	r3, r0
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d00d      	beq.n	8002e28 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e16:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e1a:	d103      	bne.n	8002e24 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002e22:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002e24:	2303      	movs	r3, #3
 8002e26:	e079      	b.n	8002f1c <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	691b      	ldr	r3, [r3, #16]
 8002e2c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002e30:	d108      	bne.n	8002e44 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002e32:	897b      	ldrh	r3, [r7, #10]
 8002e34:	b2db      	uxtb	r3, r3
 8002e36:	f043 0301 	orr.w	r3, r3, #1
 8002e3a:	b2da      	uxtb	r2, r3
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	611a      	str	r2, [r3, #16]
 8002e42:	e05f      	b.n	8002f04 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002e44:	897b      	ldrh	r3, [r7, #10]
 8002e46:	11db      	asrs	r3, r3, #7
 8002e48:	b2db      	uxtb	r3, r3
 8002e4a:	f003 0306 	and.w	r3, r3, #6
 8002e4e:	b2db      	uxtb	r3, r3
 8002e50:	f063 030f 	orn	r3, r3, #15
 8002e54:	b2da      	uxtb	r2, r3
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	687a      	ldr	r2, [r7, #4]
 8002e60:	4930      	ldr	r1, [pc, #192]	; (8002f24 <I2C_MasterRequestRead+0x194>)
 8002e62:	68f8      	ldr	r0, [r7, #12]
 8002e64:	f000 f8b9 	bl	8002fda <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002e68:	4603      	mov	r3, r0
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d001      	beq.n	8002e72 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8002e6e:	2301      	movs	r3, #1
 8002e70:	e054      	b.n	8002f1c <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002e72:	897b      	ldrh	r3, [r7, #10]
 8002e74:	b2da      	uxtb	r2, r3
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	687a      	ldr	r2, [r7, #4]
 8002e80:	4929      	ldr	r1, [pc, #164]	; (8002f28 <I2C_MasterRequestRead+0x198>)
 8002e82:	68f8      	ldr	r0, [r7, #12]
 8002e84:	f000 f8a9 	bl	8002fda <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002e88:	4603      	mov	r3, r0
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d001      	beq.n	8002e92 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8002e8e:	2301      	movs	r3, #1
 8002e90:	e044      	b.n	8002f1c <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e92:	2300      	movs	r3, #0
 8002e94:	613b      	str	r3, [r7, #16]
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	695b      	ldr	r3, [r3, #20]
 8002e9c:	613b      	str	r3, [r7, #16]
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	699b      	ldr	r3, [r3, #24]
 8002ea4:	613b      	str	r3, [r7, #16]
 8002ea6:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	681a      	ldr	r2, [r3, #0]
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002eb6:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002eb8:	683b      	ldr	r3, [r7, #0]
 8002eba:	9300      	str	r3, [sp, #0]
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002ec4:	68f8      	ldr	r0, [r7, #12]
 8002ec6:	f000 f831 	bl	8002f2c <I2C_WaitOnFlagUntilTimeout>
 8002eca:	4603      	mov	r3, r0
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d00d      	beq.n	8002eec <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002eda:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ede:	d103      	bne.n	8002ee8 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002ee6:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8002ee8:	2303      	movs	r3, #3
 8002eea:	e017      	b.n	8002f1c <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8002eec:	897b      	ldrh	r3, [r7, #10]
 8002eee:	11db      	asrs	r3, r3, #7
 8002ef0:	b2db      	uxtb	r3, r3
 8002ef2:	f003 0306 	and.w	r3, r3, #6
 8002ef6:	b2db      	uxtb	r3, r3
 8002ef8:	f063 030e 	orn	r3, r3, #14
 8002efc:	b2da      	uxtb	r2, r3
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	687a      	ldr	r2, [r7, #4]
 8002f08:	4907      	ldr	r1, [pc, #28]	; (8002f28 <I2C_MasterRequestRead+0x198>)
 8002f0a:	68f8      	ldr	r0, [r7, #12]
 8002f0c:	f000 f865 	bl	8002fda <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002f10:	4603      	mov	r3, r0
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d001      	beq.n	8002f1a <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8002f16:	2301      	movs	r3, #1
 8002f18:	e000      	b.n	8002f1c <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8002f1a:	2300      	movs	r3, #0
}
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	3718      	adds	r7, #24
 8002f20:	46bd      	mov	sp, r7
 8002f22:	bd80      	pop	{r7, pc}
 8002f24:	00010008 	.word	0x00010008
 8002f28:	00010002 	.word	0x00010002

08002f2c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b084      	sub	sp, #16
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	60f8      	str	r0, [r7, #12]
 8002f34:	60b9      	str	r1, [r7, #8]
 8002f36:	603b      	str	r3, [r7, #0]
 8002f38:	4613      	mov	r3, r2
 8002f3a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002f3c:	e025      	b.n	8002f8a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f3e:	683b      	ldr	r3, [r7, #0]
 8002f40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f44:	d021      	beq.n	8002f8a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f46:	f7fe f8f7 	bl	8001138 <HAL_GetTick>
 8002f4a:	4602      	mov	r2, r0
 8002f4c:	69bb      	ldr	r3, [r7, #24]
 8002f4e:	1ad3      	subs	r3, r2, r3
 8002f50:	683a      	ldr	r2, [r7, #0]
 8002f52:	429a      	cmp	r2, r3
 8002f54:	d302      	bcc.n	8002f5c <I2C_WaitOnFlagUntilTimeout+0x30>
 8002f56:	683b      	ldr	r3, [r7, #0]
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d116      	bne.n	8002f8a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	2200      	movs	r2, #0
 8002f60:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	2220      	movs	r2, #32
 8002f66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f76:	f043 0220 	orr.w	r2, r3, #32
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	2200      	movs	r2, #0
 8002f82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002f86:	2301      	movs	r3, #1
 8002f88:	e023      	b.n	8002fd2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002f8a:	68bb      	ldr	r3, [r7, #8]
 8002f8c:	0c1b      	lsrs	r3, r3, #16
 8002f8e:	b2db      	uxtb	r3, r3
 8002f90:	2b01      	cmp	r3, #1
 8002f92:	d10d      	bne.n	8002fb0 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	695b      	ldr	r3, [r3, #20]
 8002f9a:	43da      	mvns	r2, r3
 8002f9c:	68bb      	ldr	r3, [r7, #8]
 8002f9e:	4013      	ands	r3, r2
 8002fa0:	b29b      	uxth	r3, r3
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	bf0c      	ite	eq
 8002fa6:	2301      	moveq	r3, #1
 8002fa8:	2300      	movne	r3, #0
 8002faa:	b2db      	uxtb	r3, r3
 8002fac:	461a      	mov	r2, r3
 8002fae:	e00c      	b.n	8002fca <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	699b      	ldr	r3, [r3, #24]
 8002fb6:	43da      	mvns	r2, r3
 8002fb8:	68bb      	ldr	r3, [r7, #8]
 8002fba:	4013      	ands	r3, r2
 8002fbc:	b29b      	uxth	r3, r3
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	bf0c      	ite	eq
 8002fc2:	2301      	moveq	r3, #1
 8002fc4:	2300      	movne	r3, #0
 8002fc6:	b2db      	uxtb	r3, r3
 8002fc8:	461a      	mov	r2, r3
 8002fca:	79fb      	ldrb	r3, [r7, #7]
 8002fcc:	429a      	cmp	r2, r3
 8002fce:	d0b6      	beq.n	8002f3e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002fd0:	2300      	movs	r3, #0
}
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	3710      	adds	r7, #16
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	bd80      	pop	{r7, pc}

08002fda <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002fda:	b580      	push	{r7, lr}
 8002fdc:	b084      	sub	sp, #16
 8002fde:	af00      	add	r7, sp, #0
 8002fe0:	60f8      	str	r0, [r7, #12]
 8002fe2:	60b9      	str	r1, [r7, #8]
 8002fe4:	607a      	str	r2, [r7, #4]
 8002fe6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002fe8:	e051      	b.n	800308e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	695b      	ldr	r3, [r3, #20]
 8002ff0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ff4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ff8:	d123      	bne.n	8003042 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	681a      	ldr	r2, [r3, #0]
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003008:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003012:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	2200      	movs	r2, #0
 8003018:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	2220      	movs	r2, #32
 800301e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	2200      	movs	r2, #0
 8003026:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800302e:	f043 0204 	orr.w	r2, r3, #4
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	2200      	movs	r2, #0
 800303a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800303e:	2301      	movs	r3, #1
 8003040:	e046      	b.n	80030d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003048:	d021      	beq.n	800308e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800304a:	f7fe f875 	bl	8001138 <HAL_GetTick>
 800304e:	4602      	mov	r2, r0
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	1ad3      	subs	r3, r2, r3
 8003054:	687a      	ldr	r2, [r7, #4]
 8003056:	429a      	cmp	r2, r3
 8003058:	d302      	bcc.n	8003060 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	2b00      	cmp	r3, #0
 800305e:	d116      	bne.n	800308e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	2200      	movs	r2, #0
 8003064:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	2220      	movs	r2, #32
 800306a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	2200      	movs	r2, #0
 8003072:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800307a:	f043 0220 	orr.w	r2, r3, #32
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	2200      	movs	r2, #0
 8003086:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800308a:	2301      	movs	r3, #1
 800308c:	e020      	b.n	80030d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800308e:	68bb      	ldr	r3, [r7, #8]
 8003090:	0c1b      	lsrs	r3, r3, #16
 8003092:	b2db      	uxtb	r3, r3
 8003094:	2b01      	cmp	r3, #1
 8003096:	d10c      	bne.n	80030b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	695b      	ldr	r3, [r3, #20]
 800309e:	43da      	mvns	r2, r3
 80030a0:	68bb      	ldr	r3, [r7, #8]
 80030a2:	4013      	ands	r3, r2
 80030a4:	b29b      	uxth	r3, r3
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	bf14      	ite	ne
 80030aa:	2301      	movne	r3, #1
 80030ac:	2300      	moveq	r3, #0
 80030ae:	b2db      	uxtb	r3, r3
 80030b0:	e00b      	b.n	80030ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	699b      	ldr	r3, [r3, #24]
 80030b8:	43da      	mvns	r2, r3
 80030ba:	68bb      	ldr	r3, [r7, #8]
 80030bc:	4013      	ands	r3, r2
 80030be:	b29b      	uxth	r3, r3
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	bf14      	ite	ne
 80030c4:	2301      	movne	r3, #1
 80030c6:	2300      	moveq	r3, #0
 80030c8:	b2db      	uxtb	r3, r3
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d18d      	bne.n	8002fea <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80030ce:	2300      	movs	r3, #0
}
 80030d0:	4618      	mov	r0, r3
 80030d2:	3710      	adds	r7, #16
 80030d4:	46bd      	mov	sp, r7
 80030d6:	bd80      	pop	{r7, pc}

080030d8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	b084      	sub	sp, #16
 80030dc:	af00      	add	r7, sp, #0
 80030de:	60f8      	str	r0, [r7, #12]
 80030e0:	60b9      	str	r1, [r7, #8]
 80030e2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80030e4:	e02d      	b.n	8003142 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80030e6:	68f8      	ldr	r0, [r7, #12]
 80030e8:	f000 f8ce 	bl	8003288 <I2C_IsAcknowledgeFailed>
 80030ec:	4603      	mov	r3, r0
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d001      	beq.n	80030f6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80030f2:	2301      	movs	r3, #1
 80030f4:	e02d      	b.n	8003152 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80030f6:	68bb      	ldr	r3, [r7, #8]
 80030f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030fc:	d021      	beq.n	8003142 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030fe:	f7fe f81b 	bl	8001138 <HAL_GetTick>
 8003102:	4602      	mov	r2, r0
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	1ad3      	subs	r3, r2, r3
 8003108:	68ba      	ldr	r2, [r7, #8]
 800310a:	429a      	cmp	r2, r3
 800310c:	d302      	bcc.n	8003114 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800310e:	68bb      	ldr	r3, [r7, #8]
 8003110:	2b00      	cmp	r3, #0
 8003112:	d116      	bne.n	8003142 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	2200      	movs	r2, #0
 8003118:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	2220      	movs	r2, #32
 800311e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	2200      	movs	r2, #0
 8003126:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800312e:	f043 0220 	orr.w	r2, r3, #32
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	2200      	movs	r2, #0
 800313a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800313e:	2301      	movs	r3, #1
 8003140:	e007      	b.n	8003152 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	695b      	ldr	r3, [r3, #20]
 8003148:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800314c:	2b80      	cmp	r3, #128	; 0x80
 800314e:	d1ca      	bne.n	80030e6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003150:	2300      	movs	r3, #0
}
 8003152:	4618      	mov	r0, r3
 8003154:	3710      	adds	r7, #16
 8003156:	46bd      	mov	sp, r7
 8003158:	bd80      	pop	{r7, pc}

0800315a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800315a:	b580      	push	{r7, lr}
 800315c:	b084      	sub	sp, #16
 800315e:	af00      	add	r7, sp, #0
 8003160:	60f8      	str	r0, [r7, #12]
 8003162:	60b9      	str	r1, [r7, #8]
 8003164:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003166:	e02d      	b.n	80031c4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003168:	68f8      	ldr	r0, [r7, #12]
 800316a:	f000 f88d 	bl	8003288 <I2C_IsAcknowledgeFailed>
 800316e:	4603      	mov	r3, r0
 8003170:	2b00      	cmp	r3, #0
 8003172:	d001      	beq.n	8003178 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003174:	2301      	movs	r3, #1
 8003176:	e02d      	b.n	80031d4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003178:	68bb      	ldr	r3, [r7, #8]
 800317a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800317e:	d021      	beq.n	80031c4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003180:	f7fd ffda 	bl	8001138 <HAL_GetTick>
 8003184:	4602      	mov	r2, r0
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	1ad3      	subs	r3, r2, r3
 800318a:	68ba      	ldr	r2, [r7, #8]
 800318c:	429a      	cmp	r2, r3
 800318e:	d302      	bcc.n	8003196 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003190:	68bb      	ldr	r3, [r7, #8]
 8003192:	2b00      	cmp	r3, #0
 8003194:	d116      	bne.n	80031c4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	2200      	movs	r2, #0
 800319a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	2220      	movs	r2, #32
 80031a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	2200      	movs	r2, #0
 80031a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031b0:	f043 0220 	orr.w	r2, r3, #32
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	2200      	movs	r2, #0
 80031bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80031c0:	2301      	movs	r3, #1
 80031c2:	e007      	b.n	80031d4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	695b      	ldr	r3, [r3, #20]
 80031ca:	f003 0304 	and.w	r3, r3, #4
 80031ce:	2b04      	cmp	r3, #4
 80031d0:	d1ca      	bne.n	8003168 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80031d2:	2300      	movs	r3, #0
}
 80031d4:	4618      	mov	r0, r3
 80031d6:	3710      	adds	r7, #16
 80031d8:	46bd      	mov	sp, r7
 80031da:	bd80      	pop	{r7, pc}

080031dc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	b084      	sub	sp, #16
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	60f8      	str	r0, [r7, #12]
 80031e4:	60b9      	str	r1, [r7, #8]
 80031e6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80031e8:	e042      	b.n	8003270 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	695b      	ldr	r3, [r3, #20]
 80031f0:	f003 0310 	and.w	r3, r3, #16
 80031f4:	2b10      	cmp	r3, #16
 80031f6:	d119      	bne.n	800322c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f06f 0210 	mvn.w	r2, #16
 8003200:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	2200      	movs	r2, #0
 8003206:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	2220      	movs	r2, #32
 800320c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	2200      	movs	r2, #0
 8003214:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	2200      	movs	r2, #0
 8003224:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003228:	2301      	movs	r3, #1
 800322a:	e029      	b.n	8003280 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800322c:	f7fd ff84 	bl	8001138 <HAL_GetTick>
 8003230:	4602      	mov	r2, r0
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	1ad3      	subs	r3, r2, r3
 8003236:	68ba      	ldr	r2, [r7, #8]
 8003238:	429a      	cmp	r2, r3
 800323a:	d302      	bcc.n	8003242 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800323c:	68bb      	ldr	r3, [r7, #8]
 800323e:	2b00      	cmp	r3, #0
 8003240:	d116      	bne.n	8003270 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	2200      	movs	r2, #0
 8003246:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	2220      	movs	r2, #32
 800324c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	2200      	movs	r2, #0
 8003254:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800325c:	f043 0220 	orr.w	r2, r3, #32
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	2200      	movs	r2, #0
 8003268:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800326c:	2301      	movs	r3, #1
 800326e:	e007      	b.n	8003280 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	695b      	ldr	r3, [r3, #20]
 8003276:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800327a:	2b40      	cmp	r3, #64	; 0x40
 800327c:	d1b5      	bne.n	80031ea <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800327e:	2300      	movs	r3, #0
}
 8003280:	4618      	mov	r0, r3
 8003282:	3710      	adds	r7, #16
 8003284:	46bd      	mov	sp, r7
 8003286:	bd80      	pop	{r7, pc}

08003288 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003288:	b480      	push	{r7}
 800328a:	b083      	sub	sp, #12
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	695b      	ldr	r3, [r3, #20]
 8003296:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800329a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800329e:	d11b      	bne.n	80032d8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80032a8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	2200      	movs	r2, #0
 80032ae:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2220      	movs	r2, #32
 80032b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	2200      	movs	r2, #0
 80032bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032c4:	f043 0204 	orr.w	r2, r3, #4
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	2200      	movs	r2, #0
 80032d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80032d4:	2301      	movs	r3, #1
 80032d6:	e000      	b.n	80032da <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80032d8:	2300      	movs	r3, #0
}
 80032da:	4618      	mov	r0, r3
 80032dc:	370c      	adds	r7, #12
 80032de:	46bd      	mov	sp, r7
 80032e0:	bc80      	pop	{r7}
 80032e2:	4770      	bx	lr

080032e4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	b086      	sub	sp, #24
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d101      	bne.n	80032f6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80032f2:	2301      	movs	r3, #1
 80032f4:	e272      	b.n	80037dc <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f003 0301 	and.w	r3, r3, #1
 80032fe:	2b00      	cmp	r3, #0
 8003300:	f000 8087 	beq.w	8003412 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003304:	4b92      	ldr	r3, [pc, #584]	; (8003550 <HAL_RCC_OscConfig+0x26c>)
 8003306:	685b      	ldr	r3, [r3, #4]
 8003308:	f003 030c 	and.w	r3, r3, #12
 800330c:	2b04      	cmp	r3, #4
 800330e:	d00c      	beq.n	800332a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003310:	4b8f      	ldr	r3, [pc, #572]	; (8003550 <HAL_RCC_OscConfig+0x26c>)
 8003312:	685b      	ldr	r3, [r3, #4]
 8003314:	f003 030c 	and.w	r3, r3, #12
 8003318:	2b08      	cmp	r3, #8
 800331a:	d112      	bne.n	8003342 <HAL_RCC_OscConfig+0x5e>
 800331c:	4b8c      	ldr	r3, [pc, #560]	; (8003550 <HAL_RCC_OscConfig+0x26c>)
 800331e:	685b      	ldr	r3, [r3, #4]
 8003320:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003324:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003328:	d10b      	bne.n	8003342 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800332a:	4b89      	ldr	r3, [pc, #548]	; (8003550 <HAL_RCC_OscConfig+0x26c>)
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003332:	2b00      	cmp	r3, #0
 8003334:	d06c      	beq.n	8003410 <HAL_RCC_OscConfig+0x12c>
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	685b      	ldr	r3, [r3, #4]
 800333a:	2b00      	cmp	r3, #0
 800333c:	d168      	bne.n	8003410 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800333e:	2301      	movs	r3, #1
 8003340:	e24c      	b.n	80037dc <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	685b      	ldr	r3, [r3, #4]
 8003346:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800334a:	d106      	bne.n	800335a <HAL_RCC_OscConfig+0x76>
 800334c:	4b80      	ldr	r3, [pc, #512]	; (8003550 <HAL_RCC_OscConfig+0x26c>)
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	4a7f      	ldr	r2, [pc, #508]	; (8003550 <HAL_RCC_OscConfig+0x26c>)
 8003352:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003356:	6013      	str	r3, [r2, #0]
 8003358:	e02e      	b.n	80033b8 <HAL_RCC_OscConfig+0xd4>
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	685b      	ldr	r3, [r3, #4]
 800335e:	2b00      	cmp	r3, #0
 8003360:	d10c      	bne.n	800337c <HAL_RCC_OscConfig+0x98>
 8003362:	4b7b      	ldr	r3, [pc, #492]	; (8003550 <HAL_RCC_OscConfig+0x26c>)
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	4a7a      	ldr	r2, [pc, #488]	; (8003550 <HAL_RCC_OscConfig+0x26c>)
 8003368:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800336c:	6013      	str	r3, [r2, #0]
 800336e:	4b78      	ldr	r3, [pc, #480]	; (8003550 <HAL_RCC_OscConfig+0x26c>)
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	4a77      	ldr	r2, [pc, #476]	; (8003550 <HAL_RCC_OscConfig+0x26c>)
 8003374:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003378:	6013      	str	r3, [r2, #0]
 800337a:	e01d      	b.n	80033b8 <HAL_RCC_OscConfig+0xd4>
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	685b      	ldr	r3, [r3, #4]
 8003380:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003384:	d10c      	bne.n	80033a0 <HAL_RCC_OscConfig+0xbc>
 8003386:	4b72      	ldr	r3, [pc, #456]	; (8003550 <HAL_RCC_OscConfig+0x26c>)
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	4a71      	ldr	r2, [pc, #452]	; (8003550 <HAL_RCC_OscConfig+0x26c>)
 800338c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003390:	6013      	str	r3, [r2, #0]
 8003392:	4b6f      	ldr	r3, [pc, #444]	; (8003550 <HAL_RCC_OscConfig+0x26c>)
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	4a6e      	ldr	r2, [pc, #440]	; (8003550 <HAL_RCC_OscConfig+0x26c>)
 8003398:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800339c:	6013      	str	r3, [r2, #0]
 800339e:	e00b      	b.n	80033b8 <HAL_RCC_OscConfig+0xd4>
 80033a0:	4b6b      	ldr	r3, [pc, #428]	; (8003550 <HAL_RCC_OscConfig+0x26c>)
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	4a6a      	ldr	r2, [pc, #424]	; (8003550 <HAL_RCC_OscConfig+0x26c>)
 80033a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033aa:	6013      	str	r3, [r2, #0]
 80033ac:	4b68      	ldr	r3, [pc, #416]	; (8003550 <HAL_RCC_OscConfig+0x26c>)
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	4a67      	ldr	r2, [pc, #412]	; (8003550 <HAL_RCC_OscConfig+0x26c>)
 80033b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80033b6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	685b      	ldr	r3, [r3, #4]
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d013      	beq.n	80033e8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033c0:	f7fd feba 	bl	8001138 <HAL_GetTick>
 80033c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033c6:	e008      	b.n	80033da <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80033c8:	f7fd feb6 	bl	8001138 <HAL_GetTick>
 80033cc:	4602      	mov	r2, r0
 80033ce:	693b      	ldr	r3, [r7, #16]
 80033d0:	1ad3      	subs	r3, r2, r3
 80033d2:	2b64      	cmp	r3, #100	; 0x64
 80033d4:	d901      	bls.n	80033da <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80033d6:	2303      	movs	r3, #3
 80033d8:	e200      	b.n	80037dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033da:	4b5d      	ldr	r3, [pc, #372]	; (8003550 <HAL_RCC_OscConfig+0x26c>)
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d0f0      	beq.n	80033c8 <HAL_RCC_OscConfig+0xe4>
 80033e6:	e014      	b.n	8003412 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033e8:	f7fd fea6 	bl	8001138 <HAL_GetTick>
 80033ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80033ee:	e008      	b.n	8003402 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80033f0:	f7fd fea2 	bl	8001138 <HAL_GetTick>
 80033f4:	4602      	mov	r2, r0
 80033f6:	693b      	ldr	r3, [r7, #16]
 80033f8:	1ad3      	subs	r3, r2, r3
 80033fa:	2b64      	cmp	r3, #100	; 0x64
 80033fc:	d901      	bls.n	8003402 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80033fe:	2303      	movs	r3, #3
 8003400:	e1ec      	b.n	80037dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003402:	4b53      	ldr	r3, [pc, #332]	; (8003550 <HAL_RCC_OscConfig+0x26c>)
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800340a:	2b00      	cmp	r3, #0
 800340c:	d1f0      	bne.n	80033f0 <HAL_RCC_OscConfig+0x10c>
 800340e:	e000      	b.n	8003412 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003410:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f003 0302 	and.w	r3, r3, #2
 800341a:	2b00      	cmp	r3, #0
 800341c:	d063      	beq.n	80034e6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800341e:	4b4c      	ldr	r3, [pc, #304]	; (8003550 <HAL_RCC_OscConfig+0x26c>)
 8003420:	685b      	ldr	r3, [r3, #4]
 8003422:	f003 030c 	and.w	r3, r3, #12
 8003426:	2b00      	cmp	r3, #0
 8003428:	d00b      	beq.n	8003442 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800342a:	4b49      	ldr	r3, [pc, #292]	; (8003550 <HAL_RCC_OscConfig+0x26c>)
 800342c:	685b      	ldr	r3, [r3, #4]
 800342e:	f003 030c 	and.w	r3, r3, #12
 8003432:	2b08      	cmp	r3, #8
 8003434:	d11c      	bne.n	8003470 <HAL_RCC_OscConfig+0x18c>
 8003436:	4b46      	ldr	r3, [pc, #280]	; (8003550 <HAL_RCC_OscConfig+0x26c>)
 8003438:	685b      	ldr	r3, [r3, #4]
 800343a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800343e:	2b00      	cmp	r3, #0
 8003440:	d116      	bne.n	8003470 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003442:	4b43      	ldr	r3, [pc, #268]	; (8003550 <HAL_RCC_OscConfig+0x26c>)
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f003 0302 	and.w	r3, r3, #2
 800344a:	2b00      	cmp	r3, #0
 800344c:	d005      	beq.n	800345a <HAL_RCC_OscConfig+0x176>
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	691b      	ldr	r3, [r3, #16]
 8003452:	2b01      	cmp	r3, #1
 8003454:	d001      	beq.n	800345a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003456:	2301      	movs	r3, #1
 8003458:	e1c0      	b.n	80037dc <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800345a:	4b3d      	ldr	r3, [pc, #244]	; (8003550 <HAL_RCC_OscConfig+0x26c>)
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	695b      	ldr	r3, [r3, #20]
 8003466:	00db      	lsls	r3, r3, #3
 8003468:	4939      	ldr	r1, [pc, #228]	; (8003550 <HAL_RCC_OscConfig+0x26c>)
 800346a:	4313      	orrs	r3, r2
 800346c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800346e:	e03a      	b.n	80034e6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	691b      	ldr	r3, [r3, #16]
 8003474:	2b00      	cmp	r3, #0
 8003476:	d020      	beq.n	80034ba <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003478:	4b36      	ldr	r3, [pc, #216]	; (8003554 <HAL_RCC_OscConfig+0x270>)
 800347a:	2201      	movs	r2, #1
 800347c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800347e:	f7fd fe5b 	bl	8001138 <HAL_GetTick>
 8003482:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003484:	e008      	b.n	8003498 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003486:	f7fd fe57 	bl	8001138 <HAL_GetTick>
 800348a:	4602      	mov	r2, r0
 800348c:	693b      	ldr	r3, [r7, #16]
 800348e:	1ad3      	subs	r3, r2, r3
 8003490:	2b02      	cmp	r3, #2
 8003492:	d901      	bls.n	8003498 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003494:	2303      	movs	r3, #3
 8003496:	e1a1      	b.n	80037dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003498:	4b2d      	ldr	r3, [pc, #180]	; (8003550 <HAL_RCC_OscConfig+0x26c>)
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f003 0302 	and.w	r3, r3, #2
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d0f0      	beq.n	8003486 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034a4:	4b2a      	ldr	r3, [pc, #168]	; (8003550 <HAL_RCC_OscConfig+0x26c>)
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	695b      	ldr	r3, [r3, #20]
 80034b0:	00db      	lsls	r3, r3, #3
 80034b2:	4927      	ldr	r1, [pc, #156]	; (8003550 <HAL_RCC_OscConfig+0x26c>)
 80034b4:	4313      	orrs	r3, r2
 80034b6:	600b      	str	r3, [r1, #0]
 80034b8:	e015      	b.n	80034e6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80034ba:	4b26      	ldr	r3, [pc, #152]	; (8003554 <HAL_RCC_OscConfig+0x270>)
 80034bc:	2200      	movs	r2, #0
 80034be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034c0:	f7fd fe3a 	bl	8001138 <HAL_GetTick>
 80034c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80034c6:	e008      	b.n	80034da <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80034c8:	f7fd fe36 	bl	8001138 <HAL_GetTick>
 80034cc:	4602      	mov	r2, r0
 80034ce:	693b      	ldr	r3, [r7, #16]
 80034d0:	1ad3      	subs	r3, r2, r3
 80034d2:	2b02      	cmp	r3, #2
 80034d4:	d901      	bls.n	80034da <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80034d6:	2303      	movs	r3, #3
 80034d8:	e180      	b.n	80037dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80034da:	4b1d      	ldr	r3, [pc, #116]	; (8003550 <HAL_RCC_OscConfig+0x26c>)
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f003 0302 	and.w	r3, r3, #2
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d1f0      	bne.n	80034c8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f003 0308 	and.w	r3, r3, #8
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d03a      	beq.n	8003568 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	699b      	ldr	r3, [r3, #24]
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d019      	beq.n	800352e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80034fa:	4b17      	ldr	r3, [pc, #92]	; (8003558 <HAL_RCC_OscConfig+0x274>)
 80034fc:	2201      	movs	r2, #1
 80034fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003500:	f7fd fe1a 	bl	8001138 <HAL_GetTick>
 8003504:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003506:	e008      	b.n	800351a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003508:	f7fd fe16 	bl	8001138 <HAL_GetTick>
 800350c:	4602      	mov	r2, r0
 800350e:	693b      	ldr	r3, [r7, #16]
 8003510:	1ad3      	subs	r3, r2, r3
 8003512:	2b02      	cmp	r3, #2
 8003514:	d901      	bls.n	800351a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003516:	2303      	movs	r3, #3
 8003518:	e160      	b.n	80037dc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800351a:	4b0d      	ldr	r3, [pc, #52]	; (8003550 <HAL_RCC_OscConfig+0x26c>)
 800351c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800351e:	f003 0302 	and.w	r3, r3, #2
 8003522:	2b00      	cmp	r3, #0
 8003524:	d0f0      	beq.n	8003508 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003526:	2001      	movs	r0, #1
 8003528:	f000 fac4 	bl	8003ab4 <RCC_Delay>
 800352c:	e01c      	b.n	8003568 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800352e:	4b0a      	ldr	r3, [pc, #40]	; (8003558 <HAL_RCC_OscConfig+0x274>)
 8003530:	2200      	movs	r2, #0
 8003532:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003534:	f7fd fe00 	bl	8001138 <HAL_GetTick>
 8003538:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800353a:	e00f      	b.n	800355c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800353c:	f7fd fdfc 	bl	8001138 <HAL_GetTick>
 8003540:	4602      	mov	r2, r0
 8003542:	693b      	ldr	r3, [r7, #16]
 8003544:	1ad3      	subs	r3, r2, r3
 8003546:	2b02      	cmp	r3, #2
 8003548:	d908      	bls.n	800355c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800354a:	2303      	movs	r3, #3
 800354c:	e146      	b.n	80037dc <HAL_RCC_OscConfig+0x4f8>
 800354e:	bf00      	nop
 8003550:	40021000 	.word	0x40021000
 8003554:	42420000 	.word	0x42420000
 8003558:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800355c:	4b92      	ldr	r3, [pc, #584]	; (80037a8 <HAL_RCC_OscConfig+0x4c4>)
 800355e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003560:	f003 0302 	and.w	r3, r3, #2
 8003564:	2b00      	cmp	r3, #0
 8003566:	d1e9      	bne.n	800353c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f003 0304 	and.w	r3, r3, #4
 8003570:	2b00      	cmp	r3, #0
 8003572:	f000 80a6 	beq.w	80036c2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003576:	2300      	movs	r3, #0
 8003578:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800357a:	4b8b      	ldr	r3, [pc, #556]	; (80037a8 <HAL_RCC_OscConfig+0x4c4>)
 800357c:	69db      	ldr	r3, [r3, #28]
 800357e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003582:	2b00      	cmp	r3, #0
 8003584:	d10d      	bne.n	80035a2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003586:	4b88      	ldr	r3, [pc, #544]	; (80037a8 <HAL_RCC_OscConfig+0x4c4>)
 8003588:	69db      	ldr	r3, [r3, #28]
 800358a:	4a87      	ldr	r2, [pc, #540]	; (80037a8 <HAL_RCC_OscConfig+0x4c4>)
 800358c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003590:	61d3      	str	r3, [r2, #28]
 8003592:	4b85      	ldr	r3, [pc, #532]	; (80037a8 <HAL_RCC_OscConfig+0x4c4>)
 8003594:	69db      	ldr	r3, [r3, #28]
 8003596:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800359a:	60bb      	str	r3, [r7, #8]
 800359c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800359e:	2301      	movs	r3, #1
 80035a0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035a2:	4b82      	ldr	r3, [pc, #520]	; (80037ac <HAL_RCC_OscConfig+0x4c8>)
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d118      	bne.n	80035e0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80035ae:	4b7f      	ldr	r3, [pc, #508]	; (80037ac <HAL_RCC_OscConfig+0x4c8>)
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	4a7e      	ldr	r2, [pc, #504]	; (80037ac <HAL_RCC_OscConfig+0x4c8>)
 80035b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80035ba:	f7fd fdbd 	bl	8001138 <HAL_GetTick>
 80035be:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035c0:	e008      	b.n	80035d4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035c2:	f7fd fdb9 	bl	8001138 <HAL_GetTick>
 80035c6:	4602      	mov	r2, r0
 80035c8:	693b      	ldr	r3, [r7, #16]
 80035ca:	1ad3      	subs	r3, r2, r3
 80035cc:	2b64      	cmp	r3, #100	; 0x64
 80035ce:	d901      	bls.n	80035d4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80035d0:	2303      	movs	r3, #3
 80035d2:	e103      	b.n	80037dc <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035d4:	4b75      	ldr	r3, [pc, #468]	; (80037ac <HAL_RCC_OscConfig+0x4c8>)
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d0f0      	beq.n	80035c2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	68db      	ldr	r3, [r3, #12]
 80035e4:	2b01      	cmp	r3, #1
 80035e6:	d106      	bne.n	80035f6 <HAL_RCC_OscConfig+0x312>
 80035e8:	4b6f      	ldr	r3, [pc, #444]	; (80037a8 <HAL_RCC_OscConfig+0x4c4>)
 80035ea:	6a1b      	ldr	r3, [r3, #32]
 80035ec:	4a6e      	ldr	r2, [pc, #440]	; (80037a8 <HAL_RCC_OscConfig+0x4c4>)
 80035ee:	f043 0301 	orr.w	r3, r3, #1
 80035f2:	6213      	str	r3, [r2, #32]
 80035f4:	e02d      	b.n	8003652 <HAL_RCC_OscConfig+0x36e>
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	68db      	ldr	r3, [r3, #12]
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d10c      	bne.n	8003618 <HAL_RCC_OscConfig+0x334>
 80035fe:	4b6a      	ldr	r3, [pc, #424]	; (80037a8 <HAL_RCC_OscConfig+0x4c4>)
 8003600:	6a1b      	ldr	r3, [r3, #32]
 8003602:	4a69      	ldr	r2, [pc, #420]	; (80037a8 <HAL_RCC_OscConfig+0x4c4>)
 8003604:	f023 0301 	bic.w	r3, r3, #1
 8003608:	6213      	str	r3, [r2, #32]
 800360a:	4b67      	ldr	r3, [pc, #412]	; (80037a8 <HAL_RCC_OscConfig+0x4c4>)
 800360c:	6a1b      	ldr	r3, [r3, #32]
 800360e:	4a66      	ldr	r2, [pc, #408]	; (80037a8 <HAL_RCC_OscConfig+0x4c4>)
 8003610:	f023 0304 	bic.w	r3, r3, #4
 8003614:	6213      	str	r3, [r2, #32]
 8003616:	e01c      	b.n	8003652 <HAL_RCC_OscConfig+0x36e>
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	68db      	ldr	r3, [r3, #12]
 800361c:	2b05      	cmp	r3, #5
 800361e:	d10c      	bne.n	800363a <HAL_RCC_OscConfig+0x356>
 8003620:	4b61      	ldr	r3, [pc, #388]	; (80037a8 <HAL_RCC_OscConfig+0x4c4>)
 8003622:	6a1b      	ldr	r3, [r3, #32]
 8003624:	4a60      	ldr	r2, [pc, #384]	; (80037a8 <HAL_RCC_OscConfig+0x4c4>)
 8003626:	f043 0304 	orr.w	r3, r3, #4
 800362a:	6213      	str	r3, [r2, #32]
 800362c:	4b5e      	ldr	r3, [pc, #376]	; (80037a8 <HAL_RCC_OscConfig+0x4c4>)
 800362e:	6a1b      	ldr	r3, [r3, #32]
 8003630:	4a5d      	ldr	r2, [pc, #372]	; (80037a8 <HAL_RCC_OscConfig+0x4c4>)
 8003632:	f043 0301 	orr.w	r3, r3, #1
 8003636:	6213      	str	r3, [r2, #32]
 8003638:	e00b      	b.n	8003652 <HAL_RCC_OscConfig+0x36e>
 800363a:	4b5b      	ldr	r3, [pc, #364]	; (80037a8 <HAL_RCC_OscConfig+0x4c4>)
 800363c:	6a1b      	ldr	r3, [r3, #32]
 800363e:	4a5a      	ldr	r2, [pc, #360]	; (80037a8 <HAL_RCC_OscConfig+0x4c4>)
 8003640:	f023 0301 	bic.w	r3, r3, #1
 8003644:	6213      	str	r3, [r2, #32]
 8003646:	4b58      	ldr	r3, [pc, #352]	; (80037a8 <HAL_RCC_OscConfig+0x4c4>)
 8003648:	6a1b      	ldr	r3, [r3, #32]
 800364a:	4a57      	ldr	r2, [pc, #348]	; (80037a8 <HAL_RCC_OscConfig+0x4c4>)
 800364c:	f023 0304 	bic.w	r3, r3, #4
 8003650:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	68db      	ldr	r3, [r3, #12]
 8003656:	2b00      	cmp	r3, #0
 8003658:	d015      	beq.n	8003686 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800365a:	f7fd fd6d 	bl	8001138 <HAL_GetTick>
 800365e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003660:	e00a      	b.n	8003678 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003662:	f7fd fd69 	bl	8001138 <HAL_GetTick>
 8003666:	4602      	mov	r2, r0
 8003668:	693b      	ldr	r3, [r7, #16]
 800366a:	1ad3      	subs	r3, r2, r3
 800366c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003670:	4293      	cmp	r3, r2
 8003672:	d901      	bls.n	8003678 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003674:	2303      	movs	r3, #3
 8003676:	e0b1      	b.n	80037dc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003678:	4b4b      	ldr	r3, [pc, #300]	; (80037a8 <HAL_RCC_OscConfig+0x4c4>)
 800367a:	6a1b      	ldr	r3, [r3, #32]
 800367c:	f003 0302 	and.w	r3, r3, #2
 8003680:	2b00      	cmp	r3, #0
 8003682:	d0ee      	beq.n	8003662 <HAL_RCC_OscConfig+0x37e>
 8003684:	e014      	b.n	80036b0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003686:	f7fd fd57 	bl	8001138 <HAL_GetTick>
 800368a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800368c:	e00a      	b.n	80036a4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800368e:	f7fd fd53 	bl	8001138 <HAL_GetTick>
 8003692:	4602      	mov	r2, r0
 8003694:	693b      	ldr	r3, [r7, #16]
 8003696:	1ad3      	subs	r3, r2, r3
 8003698:	f241 3288 	movw	r2, #5000	; 0x1388
 800369c:	4293      	cmp	r3, r2
 800369e:	d901      	bls.n	80036a4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80036a0:	2303      	movs	r3, #3
 80036a2:	e09b      	b.n	80037dc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80036a4:	4b40      	ldr	r3, [pc, #256]	; (80037a8 <HAL_RCC_OscConfig+0x4c4>)
 80036a6:	6a1b      	ldr	r3, [r3, #32]
 80036a8:	f003 0302 	and.w	r3, r3, #2
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d1ee      	bne.n	800368e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80036b0:	7dfb      	ldrb	r3, [r7, #23]
 80036b2:	2b01      	cmp	r3, #1
 80036b4:	d105      	bne.n	80036c2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80036b6:	4b3c      	ldr	r3, [pc, #240]	; (80037a8 <HAL_RCC_OscConfig+0x4c4>)
 80036b8:	69db      	ldr	r3, [r3, #28]
 80036ba:	4a3b      	ldr	r2, [pc, #236]	; (80037a8 <HAL_RCC_OscConfig+0x4c4>)
 80036bc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80036c0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	69db      	ldr	r3, [r3, #28]
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	f000 8087 	beq.w	80037da <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80036cc:	4b36      	ldr	r3, [pc, #216]	; (80037a8 <HAL_RCC_OscConfig+0x4c4>)
 80036ce:	685b      	ldr	r3, [r3, #4]
 80036d0:	f003 030c 	and.w	r3, r3, #12
 80036d4:	2b08      	cmp	r3, #8
 80036d6:	d061      	beq.n	800379c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	69db      	ldr	r3, [r3, #28]
 80036dc:	2b02      	cmp	r3, #2
 80036de:	d146      	bne.n	800376e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036e0:	4b33      	ldr	r3, [pc, #204]	; (80037b0 <HAL_RCC_OscConfig+0x4cc>)
 80036e2:	2200      	movs	r2, #0
 80036e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036e6:	f7fd fd27 	bl	8001138 <HAL_GetTick>
 80036ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80036ec:	e008      	b.n	8003700 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036ee:	f7fd fd23 	bl	8001138 <HAL_GetTick>
 80036f2:	4602      	mov	r2, r0
 80036f4:	693b      	ldr	r3, [r7, #16]
 80036f6:	1ad3      	subs	r3, r2, r3
 80036f8:	2b02      	cmp	r3, #2
 80036fa:	d901      	bls.n	8003700 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80036fc:	2303      	movs	r3, #3
 80036fe:	e06d      	b.n	80037dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003700:	4b29      	ldr	r3, [pc, #164]	; (80037a8 <HAL_RCC_OscConfig+0x4c4>)
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003708:	2b00      	cmp	r3, #0
 800370a:	d1f0      	bne.n	80036ee <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	6a1b      	ldr	r3, [r3, #32]
 8003710:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003714:	d108      	bne.n	8003728 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003716:	4b24      	ldr	r3, [pc, #144]	; (80037a8 <HAL_RCC_OscConfig+0x4c4>)
 8003718:	685b      	ldr	r3, [r3, #4]
 800371a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	689b      	ldr	r3, [r3, #8]
 8003722:	4921      	ldr	r1, [pc, #132]	; (80037a8 <HAL_RCC_OscConfig+0x4c4>)
 8003724:	4313      	orrs	r3, r2
 8003726:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003728:	4b1f      	ldr	r3, [pc, #124]	; (80037a8 <HAL_RCC_OscConfig+0x4c4>)
 800372a:	685b      	ldr	r3, [r3, #4]
 800372c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6a19      	ldr	r1, [r3, #32]
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003738:	430b      	orrs	r3, r1
 800373a:	491b      	ldr	r1, [pc, #108]	; (80037a8 <HAL_RCC_OscConfig+0x4c4>)
 800373c:	4313      	orrs	r3, r2
 800373e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003740:	4b1b      	ldr	r3, [pc, #108]	; (80037b0 <HAL_RCC_OscConfig+0x4cc>)
 8003742:	2201      	movs	r2, #1
 8003744:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003746:	f7fd fcf7 	bl	8001138 <HAL_GetTick>
 800374a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800374c:	e008      	b.n	8003760 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800374e:	f7fd fcf3 	bl	8001138 <HAL_GetTick>
 8003752:	4602      	mov	r2, r0
 8003754:	693b      	ldr	r3, [r7, #16]
 8003756:	1ad3      	subs	r3, r2, r3
 8003758:	2b02      	cmp	r3, #2
 800375a:	d901      	bls.n	8003760 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800375c:	2303      	movs	r3, #3
 800375e:	e03d      	b.n	80037dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003760:	4b11      	ldr	r3, [pc, #68]	; (80037a8 <HAL_RCC_OscConfig+0x4c4>)
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003768:	2b00      	cmp	r3, #0
 800376a:	d0f0      	beq.n	800374e <HAL_RCC_OscConfig+0x46a>
 800376c:	e035      	b.n	80037da <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800376e:	4b10      	ldr	r3, [pc, #64]	; (80037b0 <HAL_RCC_OscConfig+0x4cc>)
 8003770:	2200      	movs	r2, #0
 8003772:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003774:	f7fd fce0 	bl	8001138 <HAL_GetTick>
 8003778:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800377a:	e008      	b.n	800378e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800377c:	f7fd fcdc 	bl	8001138 <HAL_GetTick>
 8003780:	4602      	mov	r2, r0
 8003782:	693b      	ldr	r3, [r7, #16]
 8003784:	1ad3      	subs	r3, r2, r3
 8003786:	2b02      	cmp	r3, #2
 8003788:	d901      	bls.n	800378e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800378a:	2303      	movs	r3, #3
 800378c:	e026      	b.n	80037dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800378e:	4b06      	ldr	r3, [pc, #24]	; (80037a8 <HAL_RCC_OscConfig+0x4c4>)
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003796:	2b00      	cmp	r3, #0
 8003798:	d1f0      	bne.n	800377c <HAL_RCC_OscConfig+0x498>
 800379a:	e01e      	b.n	80037da <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	69db      	ldr	r3, [r3, #28]
 80037a0:	2b01      	cmp	r3, #1
 80037a2:	d107      	bne.n	80037b4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80037a4:	2301      	movs	r3, #1
 80037a6:	e019      	b.n	80037dc <HAL_RCC_OscConfig+0x4f8>
 80037a8:	40021000 	.word	0x40021000
 80037ac:	40007000 	.word	0x40007000
 80037b0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80037b4:	4b0b      	ldr	r3, [pc, #44]	; (80037e4 <HAL_RCC_OscConfig+0x500>)
 80037b6:	685b      	ldr	r3, [r3, #4]
 80037b8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6a1b      	ldr	r3, [r3, #32]
 80037c4:	429a      	cmp	r2, r3
 80037c6:	d106      	bne.n	80037d6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037d2:	429a      	cmp	r2, r3
 80037d4:	d001      	beq.n	80037da <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80037d6:	2301      	movs	r3, #1
 80037d8:	e000      	b.n	80037dc <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80037da:	2300      	movs	r3, #0
}
 80037dc:	4618      	mov	r0, r3
 80037de:	3718      	adds	r7, #24
 80037e0:	46bd      	mov	sp, r7
 80037e2:	bd80      	pop	{r7, pc}
 80037e4:	40021000 	.word	0x40021000

080037e8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80037e8:	b580      	push	{r7, lr}
 80037ea:	b084      	sub	sp, #16
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	6078      	str	r0, [r7, #4]
 80037f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d101      	bne.n	80037fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80037f8:	2301      	movs	r3, #1
 80037fa:	e0d0      	b.n	800399e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80037fc:	4b6a      	ldr	r3, [pc, #424]	; (80039a8 <HAL_RCC_ClockConfig+0x1c0>)
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f003 0307 	and.w	r3, r3, #7
 8003804:	683a      	ldr	r2, [r7, #0]
 8003806:	429a      	cmp	r2, r3
 8003808:	d910      	bls.n	800382c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800380a:	4b67      	ldr	r3, [pc, #412]	; (80039a8 <HAL_RCC_ClockConfig+0x1c0>)
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f023 0207 	bic.w	r2, r3, #7
 8003812:	4965      	ldr	r1, [pc, #404]	; (80039a8 <HAL_RCC_ClockConfig+0x1c0>)
 8003814:	683b      	ldr	r3, [r7, #0]
 8003816:	4313      	orrs	r3, r2
 8003818:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800381a:	4b63      	ldr	r3, [pc, #396]	; (80039a8 <HAL_RCC_ClockConfig+0x1c0>)
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f003 0307 	and.w	r3, r3, #7
 8003822:	683a      	ldr	r2, [r7, #0]
 8003824:	429a      	cmp	r2, r3
 8003826:	d001      	beq.n	800382c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003828:	2301      	movs	r3, #1
 800382a:	e0b8      	b.n	800399e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f003 0302 	and.w	r3, r3, #2
 8003834:	2b00      	cmp	r3, #0
 8003836:	d020      	beq.n	800387a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f003 0304 	and.w	r3, r3, #4
 8003840:	2b00      	cmp	r3, #0
 8003842:	d005      	beq.n	8003850 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003844:	4b59      	ldr	r3, [pc, #356]	; (80039ac <HAL_RCC_ClockConfig+0x1c4>)
 8003846:	685b      	ldr	r3, [r3, #4]
 8003848:	4a58      	ldr	r2, [pc, #352]	; (80039ac <HAL_RCC_ClockConfig+0x1c4>)
 800384a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800384e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f003 0308 	and.w	r3, r3, #8
 8003858:	2b00      	cmp	r3, #0
 800385a:	d005      	beq.n	8003868 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800385c:	4b53      	ldr	r3, [pc, #332]	; (80039ac <HAL_RCC_ClockConfig+0x1c4>)
 800385e:	685b      	ldr	r3, [r3, #4]
 8003860:	4a52      	ldr	r2, [pc, #328]	; (80039ac <HAL_RCC_ClockConfig+0x1c4>)
 8003862:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003866:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003868:	4b50      	ldr	r3, [pc, #320]	; (80039ac <HAL_RCC_ClockConfig+0x1c4>)
 800386a:	685b      	ldr	r3, [r3, #4]
 800386c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	689b      	ldr	r3, [r3, #8]
 8003874:	494d      	ldr	r1, [pc, #308]	; (80039ac <HAL_RCC_ClockConfig+0x1c4>)
 8003876:	4313      	orrs	r3, r2
 8003878:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f003 0301 	and.w	r3, r3, #1
 8003882:	2b00      	cmp	r3, #0
 8003884:	d040      	beq.n	8003908 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	685b      	ldr	r3, [r3, #4]
 800388a:	2b01      	cmp	r3, #1
 800388c:	d107      	bne.n	800389e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800388e:	4b47      	ldr	r3, [pc, #284]	; (80039ac <HAL_RCC_ClockConfig+0x1c4>)
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003896:	2b00      	cmp	r3, #0
 8003898:	d115      	bne.n	80038c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800389a:	2301      	movs	r3, #1
 800389c:	e07f      	b.n	800399e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	685b      	ldr	r3, [r3, #4]
 80038a2:	2b02      	cmp	r3, #2
 80038a4:	d107      	bne.n	80038b6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038a6:	4b41      	ldr	r3, [pc, #260]	; (80039ac <HAL_RCC_ClockConfig+0x1c4>)
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d109      	bne.n	80038c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038b2:	2301      	movs	r3, #1
 80038b4:	e073      	b.n	800399e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038b6:	4b3d      	ldr	r3, [pc, #244]	; (80039ac <HAL_RCC_ClockConfig+0x1c4>)
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f003 0302 	and.w	r3, r3, #2
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d101      	bne.n	80038c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038c2:	2301      	movs	r3, #1
 80038c4:	e06b      	b.n	800399e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80038c6:	4b39      	ldr	r3, [pc, #228]	; (80039ac <HAL_RCC_ClockConfig+0x1c4>)
 80038c8:	685b      	ldr	r3, [r3, #4]
 80038ca:	f023 0203 	bic.w	r2, r3, #3
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	685b      	ldr	r3, [r3, #4]
 80038d2:	4936      	ldr	r1, [pc, #216]	; (80039ac <HAL_RCC_ClockConfig+0x1c4>)
 80038d4:	4313      	orrs	r3, r2
 80038d6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80038d8:	f7fd fc2e 	bl	8001138 <HAL_GetTick>
 80038dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038de:	e00a      	b.n	80038f6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80038e0:	f7fd fc2a 	bl	8001138 <HAL_GetTick>
 80038e4:	4602      	mov	r2, r0
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	1ad3      	subs	r3, r2, r3
 80038ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d901      	bls.n	80038f6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80038f2:	2303      	movs	r3, #3
 80038f4:	e053      	b.n	800399e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038f6:	4b2d      	ldr	r3, [pc, #180]	; (80039ac <HAL_RCC_ClockConfig+0x1c4>)
 80038f8:	685b      	ldr	r3, [r3, #4]
 80038fa:	f003 020c 	and.w	r2, r3, #12
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	685b      	ldr	r3, [r3, #4]
 8003902:	009b      	lsls	r3, r3, #2
 8003904:	429a      	cmp	r2, r3
 8003906:	d1eb      	bne.n	80038e0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003908:	4b27      	ldr	r3, [pc, #156]	; (80039a8 <HAL_RCC_ClockConfig+0x1c0>)
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f003 0307 	and.w	r3, r3, #7
 8003910:	683a      	ldr	r2, [r7, #0]
 8003912:	429a      	cmp	r2, r3
 8003914:	d210      	bcs.n	8003938 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003916:	4b24      	ldr	r3, [pc, #144]	; (80039a8 <HAL_RCC_ClockConfig+0x1c0>)
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f023 0207 	bic.w	r2, r3, #7
 800391e:	4922      	ldr	r1, [pc, #136]	; (80039a8 <HAL_RCC_ClockConfig+0x1c0>)
 8003920:	683b      	ldr	r3, [r7, #0]
 8003922:	4313      	orrs	r3, r2
 8003924:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003926:	4b20      	ldr	r3, [pc, #128]	; (80039a8 <HAL_RCC_ClockConfig+0x1c0>)
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f003 0307 	and.w	r3, r3, #7
 800392e:	683a      	ldr	r2, [r7, #0]
 8003930:	429a      	cmp	r2, r3
 8003932:	d001      	beq.n	8003938 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003934:	2301      	movs	r3, #1
 8003936:	e032      	b.n	800399e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f003 0304 	and.w	r3, r3, #4
 8003940:	2b00      	cmp	r3, #0
 8003942:	d008      	beq.n	8003956 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003944:	4b19      	ldr	r3, [pc, #100]	; (80039ac <HAL_RCC_ClockConfig+0x1c4>)
 8003946:	685b      	ldr	r3, [r3, #4]
 8003948:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	68db      	ldr	r3, [r3, #12]
 8003950:	4916      	ldr	r1, [pc, #88]	; (80039ac <HAL_RCC_ClockConfig+0x1c4>)
 8003952:	4313      	orrs	r3, r2
 8003954:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f003 0308 	and.w	r3, r3, #8
 800395e:	2b00      	cmp	r3, #0
 8003960:	d009      	beq.n	8003976 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003962:	4b12      	ldr	r3, [pc, #72]	; (80039ac <HAL_RCC_ClockConfig+0x1c4>)
 8003964:	685b      	ldr	r3, [r3, #4]
 8003966:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	691b      	ldr	r3, [r3, #16]
 800396e:	00db      	lsls	r3, r3, #3
 8003970:	490e      	ldr	r1, [pc, #56]	; (80039ac <HAL_RCC_ClockConfig+0x1c4>)
 8003972:	4313      	orrs	r3, r2
 8003974:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003976:	f000 f821 	bl	80039bc <HAL_RCC_GetSysClockFreq>
 800397a:	4602      	mov	r2, r0
 800397c:	4b0b      	ldr	r3, [pc, #44]	; (80039ac <HAL_RCC_ClockConfig+0x1c4>)
 800397e:	685b      	ldr	r3, [r3, #4]
 8003980:	091b      	lsrs	r3, r3, #4
 8003982:	f003 030f 	and.w	r3, r3, #15
 8003986:	490a      	ldr	r1, [pc, #40]	; (80039b0 <HAL_RCC_ClockConfig+0x1c8>)
 8003988:	5ccb      	ldrb	r3, [r1, r3]
 800398a:	fa22 f303 	lsr.w	r3, r2, r3
 800398e:	4a09      	ldr	r2, [pc, #36]	; (80039b4 <HAL_RCC_ClockConfig+0x1cc>)
 8003990:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003992:	4b09      	ldr	r3, [pc, #36]	; (80039b8 <HAL_RCC_ClockConfig+0x1d0>)
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	4618      	mov	r0, r3
 8003998:	f7fd fb8c 	bl	80010b4 <HAL_InitTick>

  return HAL_OK;
 800399c:	2300      	movs	r3, #0
}
 800399e:	4618      	mov	r0, r3
 80039a0:	3710      	adds	r7, #16
 80039a2:	46bd      	mov	sp, r7
 80039a4:	bd80      	pop	{r7, pc}
 80039a6:	bf00      	nop
 80039a8:	40022000 	.word	0x40022000
 80039ac:	40021000 	.word	0x40021000
 80039b0:	08004af0 	.word	0x08004af0
 80039b4:	20000000 	.word	0x20000000
 80039b8:	20000004 	.word	0x20000004

080039bc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80039bc:	b490      	push	{r4, r7}
 80039be:	b08a      	sub	sp, #40	; 0x28
 80039c0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80039c2:	4b29      	ldr	r3, [pc, #164]	; (8003a68 <HAL_RCC_GetSysClockFreq+0xac>)
 80039c4:	1d3c      	adds	r4, r7, #4
 80039c6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80039c8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80039cc:	f240 2301 	movw	r3, #513	; 0x201
 80039d0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80039d2:	2300      	movs	r3, #0
 80039d4:	61fb      	str	r3, [r7, #28]
 80039d6:	2300      	movs	r3, #0
 80039d8:	61bb      	str	r3, [r7, #24]
 80039da:	2300      	movs	r3, #0
 80039dc:	627b      	str	r3, [r7, #36]	; 0x24
 80039de:	2300      	movs	r3, #0
 80039e0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80039e2:	2300      	movs	r3, #0
 80039e4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80039e6:	4b21      	ldr	r3, [pc, #132]	; (8003a6c <HAL_RCC_GetSysClockFreq+0xb0>)
 80039e8:	685b      	ldr	r3, [r3, #4]
 80039ea:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80039ec:	69fb      	ldr	r3, [r7, #28]
 80039ee:	f003 030c 	and.w	r3, r3, #12
 80039f2:	2b04      	cmp	r3, #4
 80039f4:	d002      	beq.n	80039fc <HAL_RCC_GetSysClockFreq+0x40>
 80039f6:	2b08      	cmp	r3, #8
 80039f8:	d003      	beq.n	8003a02 <HAL_RCC_GetSysClockFreq+0x46>
 80039fa:	e02b      	b.n	8003a54 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80039fc:	4b1c      	ldr	r3, [pc, #112]	; (8003a70 <HAL_RCC_GetSysClockFreq+0xb4>)
 80039fe:	623b      	str	r3, [r7, #32]
      break;
 8003a00:	e02b      	b.n	8003a5a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003a02:	69fb      	ldr	r3, [r7, #28]
 8003a04:	0c9b      	lsrs	r3, r3, #18
 8003a06:	f003 030f 	and.w	r3, r3, #15
 8003a0a:	3328      	adds	r3, #40	; 0x28
 8003a0c:	443b      	add	r3, r7
 8003a0e:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003a12:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003a14:	69fb      	ldr	r3, [r7, #28]
 8003a16:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d012      	beq.n	8003a44 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003a1e:	4b13      	ldr	r3, [pc, #76]	; (8003a6c <HAL_RCC_GetSysClockFreq+0xb0>)
 8003a20:	685b      	ldr	r3, [r3, #4]
 8003a22:	0c5b      	lsrs	r3, r3, #17
 8003a24:	f003 0301 	and.w	r3, r3, #1
 8003a28:	3328      	adds	r3, #40	; 0x28
 8003a2a:	443b      	add	r3, r7
 8003a2c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003a30:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003a32:	697b      	ldr	r3, [r7, #20]
 8003a34:	4a0e      	ldr	r2, [pc, #56]	; (8003a70 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003a36:	fb03 f202 	mul.w	r2, r3, r2
 8003a3a:	69bb      	ldr	r3, [r7, #24]
 8003a3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a40:	627b      	str	r3, [r7, #36]	; 0x24
 8003a42:	e004      	b.n	8003a4e <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003a44:	697b      	ldr	r3, [r7, #20]
 8003a46:	4a0b      	ldr	r2, [pc, #44]	; (8003a74 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003a48:	fb02 f303 	mul.w	r3, r2, r3
 8003a4c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003a4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a50:	623b      	str	r3, [r7, #32]
      break;
 8003a52:	e002      	b.n	8003a5a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003a54:	4b06      	ldr	r3, [pc, #24]	; (8003a70 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003a56:	623b      	str	r3, [r7, #32]
      break;
 8003a58:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003a5a:	6a3b      	ldr	r3, [r7, #32]
}
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	3728      	adds	r7, #40	; 0x28
 8003a60:	46bd      	mov	sp, r7
 8003a62:	bc90      	pop	{r4, r7}
 8003a64:	4770      	bx	lr
 8003a66:	bf00      	nop
 8003a68:	08004ae0 	.word	0x08004ae0
 8003a6c:	40021000 	.word	0x40021000
 8003a70:	007a1200 	.word	0x007a1200
 8003a74:	003d0900 	.word	0x003d0900

08003a78 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003a78:	b480      	push	{r7}
 8003a7a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003a7c:	4b02      	ldr	r3, [pc, #8]	; (8003a88 <HAL_RCC_GetHCLKFreq+0x10>)
 8003a7e:	681b      	ldr	r3, [r3, #0]
}
 8003a80:	4618      	mov	r0, r3
 8003a82:	46bd      	mov	sp, r7
 8003a84:	bc80      	pop	{r7}
 8003a86:	4770      	bx	lr
 8003a88:	20000000 	.word	0x20000000

08003a8c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003a90:	f7ff fff2 	bl	8003a78 <HAL_RCC_GetHCLKFreq>
 8003a94:	4602      	mov	r2, r0
 8003a96:	4b05      	ldr	r3, [pc, #20]	; (8003aac <HAL_RCC_GetPCLK1Freq+0x20>)
 8003a98:	685b      	ldr	r3, [r3, #4]
 8003a9a:	0a1b      	lsrs	r3, r3, #8
 8003a9c:	f003 0307 	and.w	r3, r3, #7
 8003aa0:	4903      	ldr	r1, [pc, #12]	; (8003ab0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003aa2:	5ccb      	ldrb	r3, [r1, r3]
 8003aa4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003aa8:	4618      	mov	r0, r3
 8003aaa:	bd80      	pop	{r7, pc}
 8003aac:	40021000 	.word	0x40021000
 8003ab0:	08004b00 	.word	0x08004b00

08003ab4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003ab4:	b480      	push	{r7}
 8003ab6:	b085      	sub	sp, #20
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003abc:	4b0a      	ldr	r3, [pc, #40]	; (8003ae8 <RCC_Delay+0x34>)
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	4a0a      	ldr	r2, [pc, #40]	; (8003aec <RCC_Delay+0x38>)
 8003ac2:	fba2 2303 	umull	r2, r3, r2, r3
 8003ac6:	0a5b      	lsrs	r3, r3, #9
 8003ac8:	687a      	ldr	r2, [r7, #4]
 8003aca:	fb02 f303 	mul.w	r3, r2, r3
 8003ace:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003ad0:	bf00      	nop
  }
  while (Delay --);
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	1e5a      	subs	r2, r3, #1
 8003ad6:	60fa      	str	r2, [r7, #12]
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d1f9      	bne.n	8003ad0 <RCC_Delay+0x1c>
}
 8003adc:	bf00      	nop
 8003ade:	bf00      	nop
 8003ae0:	3714      	adds	r7, #20
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	bc80      	pop	{r7}
 8003ae6:	4770      	bx	lr
 8003ae8:	20000000 	.word	0x20000000
 8003aec:	10624dd3 	.word	0x10624dd3

08003af0 <__errno>:
 8003af0:	4b01      	ldr	r3, [pc, #4]	; (8003af8 <__errno+0x8>)
 8003af2:	6818      	ldr	r0, [r3, #0]
 8003af4:	4770      	bx	lr
 8003af6:	bf00      	nop
 8003af8:	2000000c 	.word	0x2000000c

08003afc <__libc_init_array>:
 8003afc:	b570      	push	{r4, r5, r6, lr}
 8003afe:	2600      	movs	r6, #0
 8003b00:	4d0c      	ldr	r5, [pc, #48]	; (8003b34 <__libc_init_array+0x38>)
 8003b02:	4c0d      	ldr	r4, [pc, #52]	; (8003b38 <__libc_init_array+0x3c>)
 8003b04:	1b64      	subs	r4, r4, r5
 8003b06:	10a4      	asrs	r4, r4, #2
 8003b08:	42a6      	cmp	r6, r4
 8003b0a:	d109      	bne.n	8003b20 <__libc_init_array+0x24>
 8003b0c:	f000 ffb6 	bl	8004a7c <_init>
 8003b10:	2600      	movs	r6, #0
 8003b12:	4d0a      	ldr	r5, [pc, #40]	; (8003b3c <__libc_init_array+0x40>)
 8003b14:	4c0a      	ldr	r4, [pc, #40]	; (8003b40 <__libc_init_array+0x44>)
 8003b16:	1b64      	subs	r4, r4, r5
 8003b18:	10a4      	asrs	r4, r4, #2
 8003b1a:	42a6      	cmp	r6, r4
 8003b1c:	d105      	bne.n	8003b2a <__libc_init_array+0x2e>
 8003b1e:	bd70      	pop	{r4, r5, r6, pc}
 8003b20:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b24:	4798      	blx	r3
 8003b26:	3601      	adds	r6, #1
 8003b28:	e7ee      	b.n	8003b08 <__libc_init_array+0xc>
 8003b2a:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b2e:	4798      	blx	r3
 8003b30:	3601      	adds	r6, #1
 8003b32:	e7f2      	b.n	8003b1a <__libc_init_array+0x1e>
 8003b34:	08004ba0 	.word	0x08004ba0
 8003b38:	08004ba0 	.word	0x08004ba0
 8003b3c:	08004ba0 	.word	0x08004ba0
 8003b40:	08004ba4 	.word	0x08004ba4

08003b44 <memset>:
 8003b44:	4603      	mov	r3, r0
 8003b46:	4402      	add	r2, r0
 8003b48:	4293      	cmp	r3, r2
 8003b4a:	d100      	bne.n	8003b4e <memset+0xa>
 8003b4c:	4770      	bx	lr
 8003b4e:	f803 1b01 	strb.w	r1, [r3], #1
 8003b52:	e7f9      	b.n	8003b48 <memset+0x4>

08003b54 <iprintf>:
 8003b54:	b40f      	push	{r0, r1, r2, r3}
 8003b56:	4b0a      	ldr	r3, [pc, #40]	; (8003b80 <iprintf+0x2c>)
 8003b58:	b513      	push	{r0, r1, r4, lr}
 8003b5a:	681c      	ldr	r4, [r3, #0]
 8003b5c:	b124      	cbz	r4, 8003b68 <iprintf+0x14>
 8003b5e:	69a3      	ldr	r3, [r4, #24]
 8003b60:	b913      	cbnz	r3, 8003b68 <iprintf+0x14>
 8003b62:	4620      	mov	r0, r4
 8003b64:	f000 f866 	bl	8003c34 <__sinit>
 8003b68:	ab05      	add	r3, sp, #20
 8003b6a:	4620      	mov	r0, r4
 8003b6c:	9a04      	ldr	r2, [sp, #16]
 8003b6e:	68a1      	ldr	r1, [r4, #8]
 8003b70:	9301      	str	r3, [sp, #4]
 8003b72:	f000 f9bb 	bl	8003eec <_vfiprintf_r>
 8003b76:	b002      	add	sp, #8
 8003b78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003b7c:	b004      	add	sp, #16
 8003b7e:	4770      	bx	lr
 8003b80:	2000000c 	.word	0x2000000c

08003b84 <std>:
 8003b84:	2300      	movs	r3, #0
 8003b86:	b510      	push	{r4, lr}
 8003b88:	4604      	mov	r4, r0
 8003b8a:	e9c0 3300 	strd	r3, r3, [r0]
 8003b8e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003b92:	6083      	str	r3, [r0, #8]
 8003b94:	8181      	strh	r1, [r0, #12]
 8003b96:	6643      	str	r3, [r0, #100]	; 0x64
 8003b98:	81c2      	strh	r2, [r0, #14]
 8003b9a:	6183      	str	r3, [r0, #24]
 8003b9c:	4619      	mov	r1, r3
 8003b9e:	2208      	movs	r2, #8
 8003ba0:	305c      	adds	r0, #92	; 0x5c
 8003ba2:	f7ff ffcf 	bl	8003b44 <memset>
 8003ba6:	4b05      	ldr	r3, [pc, #20]	; (8003bbc <std+0x38>)
 8003ba8:	6224      	str	r4, [r4, #32]
 8003baa:	6263      	str	r3, [r4, #36]	; 0x24
 8003bac:	4b04      	ldr	r3, [pc, #16]	; (8003bc0 <std+0x3c>)
 8003bae:	62a3      	str	r3, [r4, #40]	; 0x28
 8003bb0:	4b04      	ldr	r3, [pc, #16]	; (8003bc4 <std+0x40>)
 8003bb2:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003bb4:	4b04      	ldr	r3, [pc, #16]	; (8003bc8 <std+0x44>)
 8003bb6:	6323      	str	r3, [r4, #48]	; 0x30
 8003bb8:	bd10      	pop	{r4, pc}
 8003bba:	bf00      	nop
 8003bbc:	08004499 	.word	0x08004499
 8003bc0:	080044bb 	.word	0x080044bb
 8003bc4:	080044f3 	.word	0x080044f3
 8003bc8:	08004517 	.word	0x08004517

08003bcc <_cleanup_r>:
 8003bcc:	4901      	ldr	r1, [pc, #4]	; (8003bd4 <_cleanup_r+0x8>)
 8003bce:	f000 b8af 	b.w	8003d30 <_fwalk_reent>
 8003bd2:	bf00      	nop
 8003bd4:	080047e9 	.word	0x080047e9

08003bd8 <__sfmoreglue>:
 8003bd8:	2268      	movs	r2, #104	; 0x68
 8003bda:	b570      	push	{r4, r5, r6, lr}
 8003bdc:	1e4d      	subs	r5, r1, #1
 8003bde:	4355      	muls	r5, r2
 8003be0:	460e      	mov	r6, r1
 8003be2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8003be6:	f000 f8e5 	bl	8003db4 <_malloc_r>
 8003bea:	4604      	mov	r4, r0
 8003bec:	b140      	cbz	r0, 8003c00 <__sfmoreglue+0x28>
 8003bee:	2100      	movs	r1, #0
 8003bf0:	e9c0 1600 	strd	r1, r6, [r0]
 8003bf4:	300c      	adds	r0, #12
 8003bf6:	60a0      	str	r0, [r4, #8]
 8003bf8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003bfc:	f7ff ffa2 	bl	8003b44 <memset>
 8003c00:	4620      	mov	r0, r4
 8003c02:	bd70      	pop	{r4, r5, r6, pc}

08003c04 <__sfp_lock_acquire>:
 8003c04:	4801      	ldr	r0, [pc, #4]	; (8003c0c <__sfp_lock_acquire+0x8>)
 8003c06:	f000 b8b3 	b.w	8003d70 <__retarget_lock_acquire_recursive>
 8003c0a:	bf00      	nop
 8003c0c:	2000018d 	.word	0x2000018d

08003c10 <__sfp_lock_release>:
 8003c10:	4801      	ldr	r0, [pc, #4]	; (8003c18 <__sfp_lock_release+0x8>)
 8003c12:	f000 b8ae 	b.w	8003d72 <__retarget_lock_release_recursive>
 8003c16:	bf00      	nop
 8003c18:	2000018d 	.word	0x2000018d

08003c1c <__sinit_lock_acquire>:
 8003c1c:	4801      	ldr	r0, [pc, #4]	; (8003c24 <__sinit_lock_acquire+0x8>)
 8003c1e:	f000 b8a7 	b.w	8003d70 <__retarget_lock_acquire_recursive>
 8003c22:	bf00      	nop
 8003c24:	2000018e 	.word	0x2000018e

08003c28 <__sinit_lock_release>:
 8003c28:	4801      	ldr	r0, [pc, #4]	; (8003c30 <__sinit_lock_release+0x8>)
 8003c2a:	f000 b8a2 	b.w	8003d72 <__retarget_lock_release_recursive>
 8003c2e:	bf00      	nop
 8003c30:	2000018e 	.word	0x2000018e

08003c34 <__sinit>:
 8003c34:	b510      	push	{r4, lr}
 8003c36:	4604      	mov	r4, r0
 8003c38:	f7ff fff0 	bl	8003c1c <__sinit_lock_acquire>
 8003c3c:	69a3      	ldr	r3, [r4, #24]
 8003c3e:	b11b      	cbz	r3, 8003c48 <__sinit+0x14>
 8003c40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003c44:	f7ff bff0 	b.w	8003c28 <__sinit_lock_release>
 8003c48:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8003c4c:	6523      	str	r3, [r4, #80]	; 0x50
 8003c4e:	4b13      	ldr	r3, [pc, #76]	; (8003c9c <__sinit+0x68>)
 8003c50:	4a13      	ldr	r2, [pc, #76]	; (8003ca0 <__sinit+0x6c>)
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	62a2      	str	r2, [r4, #40]	; 0x28
 8003c56:	42a3      	cmp	r3, r4
 8003c58:	bf08      	it	eq
 8003c5a:	2301      	moveq	r3, #1
 8003c5c:	4620      	mov	r0, r4
 8003c5e:	bf08      	it	eq
 8003c60:	61a3      	streq	r3, [r4, #24]
 8003c62:	f000 f81f 	bl	8003ca4 <__sfp>
 8003c66:	6060      	str	r0, [r4, #4]
 8003c68:	4620      	mov	r0, r4
 8003c6a:	f000 f81b 	bl	8003ca4 <__sfp>
 8003c6e:	60a0      	str	r0, [r4, #8]
 8003c70:	4620      	mov	r0, r4
 8003c72:	f000 f817 	bl	8003ca4 <__sfp>
 8003c76:	2200      	movs	r2, #0
 8003c78:	2104      	movs	r1, #4
 8003c7a:	60e0      	str	r0, [r4, #12]
 8003c7c:	6860      	ldr	r0, [r4, #4]
 8003c7e:	f7ff ff81 	bl	8003b84 <std>
 8003c82:	2201      	movs	r2, #1
 8003c84:	2109      	movs	r1, #9
 8003c86:	68a0      	ldr	r0, [r4, #8]
 8003c88:	f7ff ff7c 	bl	8003b84 <std>
 8003c8c:	2202      	movs	r2, #2
 8003c8e:	2112      	movs	r1, #18
 8003c90:	68e0      	ldr	r0, [r4, #12]
 8003c92:	f7ff ff77 	bl	8003b84 <std>
 8003c96:	2301      	movs	r3, #1
 8003c98:	61a3      	str	r3, [r4, #24]
 8003c9a:	e7d1      	b.n	8003c40 <__sinit+0xc>
 8003c9c:	08004b08 	.word	0x08004b08
 8003ca0:	08003bcd 	.word	0x08003bcd

08003ca4 <__sfp>:
 8003ca4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ca6:	4607      	mov	r7, r0
 8003ca8:	f7ff ffac 	bl	8003c04 <__sfp_lock_acquire>
 8003cac:	4b1e      	ldr	r3, [pc, #120]	; (8003d28 <__sfp+0x84>)
 8003cae:	681e      	ldr	r6, [r3, #0]
 8003cb0:	69b3      	ldr	r3, [r6, #24]
 8003cb2:	b913      	cbnz	r3, 8003cba <__sfp+0x16>
 8003cb4:	4630      	mov	r0, r6
 8003cb6:	f7ff ffbd 	bl	8003c34 <__sinit>
 8003cba:	3648      	adds	r6, #72	; 0x48
 8003cbc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003cc0:	3b01      	subs	r3, #1
 8003cc2:	d503      	bpl.n	8003ccc <__sfp+0x28>
 8003cc4:	6833      	ldr	r3, [r6, #0]
 8003cc6:	b30b      	cbz	r3, 8003d0c <__sfp+0x68>
 8003cc8:	6836      	ldr	r6, [r6, #0]
 8003cca:	e7f7      	b.n	8003cbc <__sfp+0x18>
 8003ccc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003cd0:	b9d5      	cbnz	r5, 8003d08 <__sfp+0x64>
 8003cd2:	4b16      	ldr	r3, [pc, #88]	; (8003d2c <__sfp+0x88>)
 8003cd4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003cd8:	60e3      	str	r3, [r4, #12]
 8003cda:	6665      	str	r5, [r4, #100]	; 0x64
 8003cdc:	f000 f847 	bl	8003d6e <__retarget_lock_init_recursive>
 8003ce0:	f7ff ff96 	bl	8003c10 <__sfp_lock_release>
 8003ce4:	2208      	movs	r2, #8
 8003ce6:	4629      	mov	r1, r5
 8003ce8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8003cec:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8003cf0:	6025      	str	r5, [r4, #0]
 8003cf2:	61a5      	str	r5, [r4, #24]
 8003cf4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003cf8:	f7ff ff24 	bl	8003b44 <memset>
 8003cfc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003d00:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003d04:	4620      	mov	r0, r4
 8003d06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003d08:	3468      	adds	r4, #104	; 0x68
 8003d0a:	e7d9      	b.n	8003cc0 <__sfp+0x1c>
 8003d0c:	2104      	movs	r1, #4
 8003d0e:	4638      	mov	r0, r7
 8003d10:	f7ff ff62 	bl	8003bd8 <__sfmoreglue>
 8003d14:	4604      	mov	r4, r0
 8003d16:	6030      	str	r0, [r6, #0]
 8003d18:	2800      	cmp	r0, #0
 8003d1a:	d1d5      	bne.n	8003cc8 <__sfp+0x24>
 8003d1c:	f7ff ff78 	bl	8003c10 <__sfp_lock_release>
 8003d20:	230c      	movs	r3, #12
 8003d22:	603b      	str	r3, [r7, #0]
 8003d24:	e7ee      	b.n	8003d04 <__sfp+0x60>
 8003d26:	bf00      	nop
 8003d28:	08004b08 	.word	0x08004b08
 8003d2c:	ffff0001 	.word	0xffff0001

08003d30 <_fwalk_reent>:
 8003d30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003d34:	4606      	mov	r6, r0
 8003d36:	4688      	mov	r8, r1
 8003d38:	2700      	movs	r7, #0
 8003d3a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003d3e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003d42:	f1b9 0901 	subs.w	r9, r9, #1
 8003d46:	d505      	bpl.n	8003d54 <_fwalk_reent+0x24>
 8003d48:	6824      	ldr	r4, [r4, #0]
 8003d4a:	2c00      	cmp	r4, #0
 8003d4c:	d1f7      	bne.n	8003d3e <_fwalk_reent+0xe>
 8003d4e:	4638      	mov	r0, r7
 8003d50:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003d54:	89ab      	ldrh	r3, [r5, #12]
 8003d56:	2b01      	cmp	r3, #1
 8003d58:	d907      	bls.n	8003d6a <_fwalk_reent+0x3a>
 8003d5a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003d5e:	3301      	adds	r3, #1
 8003d60:	d003      	beq.n	8003d6a <_fwalk_reent+0x3a>
 8003d62:	4629      	mov	r1, r5
 8003d64:	4630      	mov	r0, r6
 8003d66:	47c0      	blx	r8
 8003d68:	4307      	orrs	r7, r0
 8003d6a:	3568      	adds	r5, #104	; 0x68
 8003d6c:	e7e9      	b.n	8003d42 <_fwalk_reent+0x12>

08003d6e <__retarget_lock_init_recursive>:
 8003d6e:	4770      	bx	lr

08003d70 <__retarget_lock_acquire_recursive>:
 8003d70:	4770      	bx	lr

08003d72 <__retarget_lock_release_recursive>:
 8003d72:	4770      	bx	lr

08003d74 <sbrk_aligned>:
 8003d74:	b570      	push	{r4, r5, r6, lr}
 8003d76:	4e0e      	ldr	r6, [pc, #56]	; (8003db0 <sbrk_aligned+0x3c>)
 8003d78:	460c      	mov	r4, r1
 8003d7a:	6831      	ldr	r1, [r6, #0]
 8003d7c:	4605      	mov	r5, r0
 8003d7e:	b911      	cbnz	r1, 8003d86 <sbrk_aligned+0x12>
 8003d80:	f000 fb7a 	bl	8004478 <_sbrk_r>
 8003d84:	6030      	str	r0, [r6, #0]
 8003d86:	4621      	mov	r1, r4
 8003d88:	4628      	mov	r0, r5
 8003d8a:	f000 fb75 	bl	8004478 <_sbrk_r>
 8003d8e:	1c43      	adds	r3, r0, #1
 8003d90:	d00a      	beq.n	8003da8 <sbrk_aligned+0x34>
 8003d92:	1cc4      	adds	r4, r0, #3
 8003d94:	f024 0403 	bic.w	r4, r4, #3
 8003d98:	42a0      	cmp	r0, r4
 8003d9a:	d007      	beq.n	8003dac <sbrk_aligned+0x38>
 8003d9c:	1a21      	subs	r1, r4, r0
 8003d9e:	4628      	mov	r0, r5
 8003da0:	f000 fb6a 	bl	8004478 <_sbrk_r>
 8003da4:	3001      	adds	r0, #1
 8003da6:	d101      	bne.n	8003dac <sbrk_aligned+0x38>
 8003da8:	f04f 34ff 	mov.w	r4, #4294967295
 8003dac:	4620      	mov	r0, r4
 8003dae:	bd70      	pop	{r4, r5, r6, pc}
 8003db0:	20000194 	.word	0x20000194

08003db4 <_malloc_r>:
 8003db4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003db8:	1ccd      	adds	r5, r1, #3
 8003dba:	f025 0503 	bic.w	r5, r5, #3
 8003dbe:	3508      	adds	r5, #8
 8003dc0:	2d0c      	cmp	r5, #12
 8003dc2:	bf38      	it	cc
 8003dc4:	250c      	movcc	r5, #12
 8003dc6:	2d00      	cmp	r5, #0
 8003dc8:	4607      	mov	r7, r0
 8003dca:	db01      	blt.n	8003dd0 <_malloc_r+0x1c>
 8003dcc:	42a9      	cmp	r1, r5
 8003dce:	d905      	bls.n	8003ddc <_malloc_r+0x28>
 8003dd0:	230c      	movs	r3, #12
 8003dd2:	2600      	movs	r6, #0
 8003dd4:	603b      	str	r3, [r7, #0]
 8003dd6:	4630      	mov	r0, r6
 8003dd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003ddc:	4e2e      	ldr	r6, [pc, #184]	; (8003e98 <_malloc_r+0xe4>)
 8003dde:	f000 fdc5 	bl	800496c <__malloc_lock>
 8003de2:	6833      	ldr	r3, [r6, #0]
 8003de4:	461c      	mov	r4, r3
 8003de6:	bb34      	cbnz	r4, 8003e36 <_malloc_r+0x82>
 8003de8:	4629      	mov	r1, r5
 8003dea:	4638      	mov	r0, r7
 8003dec:	f7ff ffc2 	bl	8003d74 <sbrk_aligned>
 8003df0:	1c43      	adds	r3, r0, #1
 8003df2:	4604      	mov	r4, r0
 8003df4:	d14d      	bne.n	8003e92 <_malloc_r+0xde>
 8003df6:	6834      	ldr	r4, [r6, #0]
 8003df8:	4626      	mov	r6, r4
 8003dfa:	2e00      	cmp	r6, #0
 8003dfc:	d140      	bne.n	8003e80 <_malloc_r+0xcc>
 8003dfe:	6823      	ldr	r3, [r4, #0]
 8003e00:	4631      	mov	r1, r6
 8003e02:	4638      	mov	r0, r7
 8003e04:	eb04 0803 	add.w	r8, r4, r3
 8003e08:	f000 fb36 	bl	8004478 <_sbrk_r>
 8003e0c:	4580      	cmp	r8, r0
 8003e0e:	d13a      	bne.n	8003e86 <_malloc_r+0xd2>
 8003e10:	6821      	ldr	r1, [r4, #0]
 8003e12:	3503      	adds	r5, #3
 8003e14:	1a6d      	subs	r5, r5, r1
 8003e16:	f025 0503 	bic.w	r5, r5, #3
 8003e1a:	3508      	adds	r5, #8
 8003e1c:	2d0c      	cmp	r5, #12
 8003e1e:	bf38      	it	cc
 8003e20:	250c      	movcc	r5, #12
 8003e22:	4638      	mov	r0, r7
 8003e24:	4629      	mov	r1, r5
 8003e26:	f7ff ffa5 	bl	8003d74 <sbrk_aligned>
 8003e2a:	3001      	adds	r0, #1
 8003e2c:	d02b      	beq.n	8003e86 <_malloc_r+0xd2>
 8003e2e:	6823      	ldr	r3, [r4, #0]
 8003e30:	442b      	add	r3, r5
 8003e32:	6023      	str	r3, [r4, #0]
 8003e34:	e00e      	b.n	8003e54 <_malloc_r+0xa0>
 8003e36:	6822      	ldr	r2, [r4, #0]
 8003e38:	1b52      	subs	r2, r2, r5
 8003e3a:	d41e      	bmi.n	8003e7a <_malloc_r+0xc6>
 8003e3c:	2a0b      	cmp	r2, #11
 8003e3e:	d916      	bls.n	8003e6e <_malloc_r+0xba>
 8003e40:	1961      	adds	r1, r4, r5
 8003e42:	42a3      	cmp	r3, r4
 8003e44:	6025      	str	r5, [r4, #0]
 8003e46:	bf18      	it	ne
 8003e48:	6059      	strne	r1, [r3, #4]
 8003e4a:	6863      	ldr	r3, [r4, #4]
 8003e4c:	bf08      	it	eq
 8003e4e:	6031      	streq	r1, [r6, #0]
 8003e50:	5162      	str	r2, [r4, r5]
 8003e52:	604b      	str	r3, [r1, #4]
 8003e54:	4638      	mov	r0, r7
 8003e56:	f104 060b 	add.w	r6, r4, #11
 8003e5a:	f000 fd8d 	bl	8004978 <__malloc_unlock>
 8003e5e:	f026 0607 	bic.w	r6, r6, #7
 8003e62:	1d23      	adds	r3, r4, #4
 8003e64:	1af2      	subs	r2, r6, r3
 8003e66:	d0b6      	beq.n	8003dd6 <_malloc_r+0x22>
 8003e68:	1b9b      	subs	r3, r3, r6
 8003e6a:	50a3      	str	r3, [r4, r2]
 8003e6c:	e7b3      	b.n	8003dd6 <_malloc_r+0x22>
 8003e6e:	6862      	ldr	r2, [r4, #4]
 8003e70:	42a3      	cmp	r3, r4
 8003e72:	bf0c      	ite	eq
 8003e74:	6032      	streq	r2, [r6, #0]
 8003e76:	605a      	strne	r2, [r3, #4]
 8003e78:	e7ec      	b.n	8003e54 <_malloc_r+0xa0>
 8003e7a:	4623      	mov	r3, r4
 8003e7c:	6864      	ldr	r4, [r4, #4]
 8003e7e:	e7b2      	b.n	8003de6 <_malloc_r+0x32>
 8003e80:	4634      	mov	r4, r6
 8003e82:	6876      	ldr	r6, [r6, #4]
 8003e84:	e7b9      	b.n	8003dfa <_malloc_r+0x46>
 8003e86:	230c      	movs	r3, #12
 8003e88:	4638      	mov	r0, r7
 8003e8a:	603b      	str	r3, [r7, #0]
 8003e8c:	f000 fd74 	bl	8004978 <__malloc_unlock>
 8003e90:	e7a1      	b.n	8003dd6 <_malloc_r+0x22>
 8003e92:	6025      	str	r5, [r4, #0]
 8003e94:	e7de      	b.n	8003e54 <_malloc_r+0xa0>
 8003e96:	bf00      	nop
 8003e98:	20000190 	.word	0x20000190

08003e9c <__sfputc_r>:
 8003e9c:	6893      	ldr	r3, [r2, #8]
 8003e9e:	b410      	push	{r4}
 8003ea0:	3b01      	subs	r3, #1
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	6093      	str	r3, [r2, #8]
 8003ea6:	da07      	bge.n	8003eb8 <__sfputc_r+0x1c>
 8003ea8:	6994      	ldr	r4, [r2, #24]
 8003eaa:	42a3      	cmp	r3, r4
 8003eac:	db01      	blt.n	8003eb2 <__sfputc_r+0x16>
 8003eae:	290a      	cmp	r1, #10
 8003eb0:	d102      	bne.n	8003eb8 <__sfputc_r+0x1c>
 8003eb2:	bc10      	pop	{r4}
 8003eb4:	f000 bb34 	b.w	8004520 <__swbuf_r>
 8003eb8:	6813      	ldr	r3, [r2, #0]
 8003eba:	1c58      	adds	r0, r3, #1
 8003ebc:	6010      	str	r0, [r2, #0]
 8003ebe:	7019      	strb	r1, [r3, #0]
 8003ec0:	4608      	mov	r0, r1
 8003ec2:	bc10      	pop	{r4}
 8003ec4:	4770      	bx	lr

08003ec6 <__sfputs_r>:
 8003ec6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ec8:	4606      	mov	r6, r0
 8003eca:	460f      	mov	r7, r1
 8003ecc:	4614      	mov	r4, r2
 8003ece:	18d5      	adds	r5, r2, r3
 8003ed0:	42ac      	cmp	r4, r5
 8003ed2:	d101      	bne.n	8003ed8 <__sfputs_r+0x12>
 8003ed4:	2000      	movs	r0, #0
 8003ed6:	e007      	b.n	8003ee8 <__sfputs_r+0x22>
 8003ed8:	463a      	mov	r2, r7
 8003eda:	4630      	mov	r0, r6
 8003edc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003ee0:	f7ff ffdc 	bl	8003e9c <__sfputc_r>
 8003ee4:	1c43      	adds	r3, r0, #1
 8003ee6:	d1f3      	bne.n	8003ed0 <__sfputs_r+0xa>
 8003ee8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003eec <_vfiprintf_r>:
 8003eec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ef0:	460d      	mov	r5, r1
 8003ef2:	4614      	mov	r4, r2
 8003ef4:	4698      	mov	r8, r3
 8003ef6:	4606      	mov	r6, r0
 8003ef8:	b09d      	sub	sp, #116	; 0x74
 8003efa:	b118      	cbz	r0, 8003f04 <_vfiprintf_r+0x18>
 8003efc:	6983      	ldr	r3, [r0, #24]
 8003efe:	b90b      	cbnz	r3, 8003f04 <_vfiprintf_r+0x18>
 8003f00:	f7ff fe98 	bl	8003c34 <__sinit>
 8003f04:	4b89      	ldr	r3, [pc, #548]	; (800412c <_vfiprintf_r+0x240>)
 8003f06:	429d      	cmp	r5, r3
 8003f08:	d11b      	bne.n	8003f42 <_vfiprintf_r+0x56>
 8003f0a:	6875      	ldr	r5, [r6, #4]
 8003f0c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003f0e:	07d9      	lsls	r1, r3, #31
 8003f10:	d405      	bmi.n	8003f1e <_vfiprintf_r+0x32>
 8003f12:	89ab      	ldrh	r3, [r5, #12]
 8003f14:	059a      	lsls	r2, r3, #22
 8003f16:	d402      	bmi.n	8003f1e <_vfiprintf_r+0x32>
 8003f18:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003f1a:	f7ff ff29 	bl	8003d70 <__retarget_lock_acquire_recursive>
 8003f1e:	89ab      	ldrh	r3, [r5, #12]
 8003f20:	071b      	lsls	r3, r3, #28
 8003f22:	d501      	bpl.n	8003f28 <_vfiprintf_r+0x3c>
 8003f24:	692b      	ldr	r3, [r5, #16]
 8003f26:	b9eb      	cbnz	r3, 8003f64 <_vfiprintf_r+0x78>
 8003f28:	4629      	mov	r1, r5
 8003f2a:	4630      	mov	r0, r6
 8003f2c:	f000 fb5c 	bl	80045e8 <__swsetup_r>
 8003f30:	b1c0      	cbz	r0, 8003f64 <_vfiprintf_r+0x78>
 8003f32:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003f34:	07dc      	lsls	r4, r3, #31
 8003f36:	d50e      	bpl.n	8003f56 <_vfiprintf_r+0x6a>
 8003f38:	f04f 30ff 	mov.w	r0, #4294967295
 8003f3c:	b01d      	add	sp, #116	; 0x74
 8003f3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003f42:	4b7b      	ldr	r3, [pc, #492]	; (8004130 <_vfiprintf_r+0x244>)
 8003f44:	429d      	cmp	r5, r3
 8003f46:	d101      	bne.n	8003f4c <_vfiprintf_r+0x60>
 8003f48:	68b5      	ldr	r5, [r6, #8]
 8003f4a:	e7df      	b.n	8003f0c <_vfiprintf_r+0x20>
 8003f4c:	4b79      	ldr	r3, [pc, #484]	; (8004134 <_vfiprintf_r+0x248>)
 8003f4e:	429d      	cmp	r5, r3
 8003f50:	bf08      	it	eq
 8003f52:	68f5      	ldreq	r5, [r6, #12]
 8003f54:	e7da      	b.n	8003f0c <_vfiprintf_r+0x20>
 8003f56:	89ab      	ldrh	r3, [r5, #12]
 8003f58:	0598      	lsls	r0, r3, #22
 8003f5a:	d4ed      	bmi.n	8003f38 <_vfiprintf_r+0x4c>
 8003f5c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003f5e:	f7ff ff08 	bl	8003d72 <__retarget_lock_release_recursive>
 8003f62:	e7e9      	b.n	8003f38 <_vfiprintf_r+0x4c>
 8003f64:	2300      	movs	r3, #0
 8003f66:	9309      	str	r3, [sp, #36]	; 0x24
 8003f68:	2320      	movs	r3, #32
 8003f6a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003f6e:	2330      	movs	r3, #48	; 0x30
 8003f70:	f04f 0901 	mov.w	r9, #1
 8003f74:	f8cd 800c 	str.w	r8, [sp, #12]
 8003f78:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8004138 <_vfiprintf_r+0x24c>
 8003f7c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003f80:	4623      	mov	r3, r4
 8003f82:	469a      	mov	sl, r3
 8003f84:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003f88:	b10a      	cbz	r2, 8003f8e <_vfiprintf_r+0xa2>
 8003f8a:	2a25      	cmp	r2, #37	; 0x25
 8003f8c:	d1f9      	bne.n	8003f82 <_vfiprintf_r+0x96>
 8003f8e:	ebba 0b04 	subs.w	fp, sl, r4
 8003f92:	d00b      	beq.n	8003fac <_vfiprintf_r+0xc0>
 8003f94:	465b      	mov	r3, fp
 8003f96:	4622      	mov	r2, r4
 8003f98:	4629      	mov	r1, r5
 8003f9a:	4630      	mov	r0, r6
 8003f9c:	f7ff ff93 	bl	8003ec6 <__sfputs_r>
 8003fa0:	3001      	adds	r0, #1
 8003fa2:	f000 80aa 	beq.w	80040fa <_vfiprintf_r+0x20e>
 8003fa6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003fa8:	445a      	add	r2, fp
 8003faa:	9209      	str	r2, [sp, #36]	; 0x24
 8003fac:	f89a 3000 	ldrb.w	r3, [sl]
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	f000 80a2 	beq.w	80040fa <_vfiprintf_r+0x20e>
 8003fb6:	2300      	movs	r3, #0
 8003fb8:	f04f 32ff 	mov.w	r2, #4294967295
 8003fbc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003fc0:	f10a 0a01 	add.w	sl, sl, #1
 8003fc4:	9304      	str	r3, [sp, #16]
 8003fc6:	9307      	str	r3, [sp, #28]
 8003fc8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003fcc:	931a      	str	r3, [sp, #104]	; 0x68
 8003fce:	4654      	mov	r4, sl
 8003fd0:	2205      	movs	r2, #5
 8003fd2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003fd6:	4858      	ldr	r0, [pc, #352]	; (8004138 <_vfiprintf_r+0x24c>)
 8003fd8:	f000 fcba 	bl	8004950 <memchr>
 8003fdc:	9a04      	ldr	r2, [sp, #16]
 8003fde:	b9d8      	cbnz	r0, 8004018 <_vfiprintf_r+0x12c>
 8003fe0:	06d1      	lsls	r1, r2, #27
 8003fe2:	bf44      	itt	mi
 8003fe4:	2320      	movmi	r3, #32
 8003fe6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003fea:	0713      	lsls	r3, r2, #28
 8003fec:	bf44      	itt	mi
 8003fee:	232b      	movmi	r3, #43	; 0x2b
 8003ff0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003ff4:	f89a 3000 	ldrb.w	r3, [sl]
 8003ff8:	2b2a      	cmp	r3, #42	; 0x2a
 8003ffa:	d015      	beq.n	8004028 <_vfiprintf_r+0x13c>
 8003ffc:	4654      	mov	r4, sl
 8003ffe:	2000      	movs	r0, #0
 8004000:	f04f 0c0a 	mov.w	ip, #10
 8004004:	9a07      	ldr	r2, [sp, #28]
 8004006:	4621      	mov	r1, r4
 8004008:	f811 3b01 	ldrb.w	r3, [r1], #1
 800400c:	3b30      	subs	r3, #48	; 0x30
 800400e:	2b09      	cmp	r3, #9
 8004010:	d94e      	bls.n	80040b0 <_vfiprintf_r+0x1c4>
 8004012:	b1b0      	cbz	r0, 8004042 <_vfiprintf_r+0x156>
 8004014:	9207      	str	r2, [sp, #28]
 8004016:	e014      	b.n	8004042 <_vfiprintf_r+0x156>
 8004018:	eba0 0308 	sub.w	r3, r0, r8
 800401c:	fa09 f303 	lsl.w	r3, r9, r3
 8004020:	4313      	orrs	r3, r2
 8004022:	46a2      	mov	sl, r4
 8004024:	9304      	str	r3, [sp, #16]
 8004026:	e7d2      	b.n	8003fce <_vfiprintf_r+0xe2>
 8004028:	9b03      	ldr	r3, [sp, #12]
 800402a:	1d19      	adds	r1, r3, #4
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	9103      	str	r1, [sp, #12]
 8004030:	2b00      	cmp	r3, #0
 8004032:	bfbb      	ittet	lt
 8004034:	425b      	neglt	r3, r3
 8004036:	f042 0202 	orrlt.w	r2, r2, #2
 800403a:	9307      	strge	r3, [sp, #28]
 800403c:	9307      	strlt	r3, [sp, #28]
 800403e:	bfb8      	it	lt
 8004040:	9204      	strlt	r2, [sp, #16]
 8004042:	7823      	ldrb	r3, [r4, #0]
 8004044:	2b2e      	cmp	r3, #46	; 0x2e
 8004046:	d10c      	bne.n	8004062 <_vfiprintf_r+0x176>
 8004048:	7863      	ldrb	r3, [r4, #1]
 800404a:	2b2a      	cmp	r3, #42	; 0x2a
 800404c:	d135      	bne.n	80040ba <_vfiprintf_r+0x1ce>
 800404e:	9b03      	ldr	r3, [sp, #12]
 8004050:	3402      	adds	r4, #2
 8004052:	1d1a      	adds	r2, r3, #4
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	9203      	str	r2, [sp, #12]
 8004058:	2b00      	cmp	r3, #0
 800405a:	bfb8      	it	lt
 800405c:	f04f 33ff 	movlt.w	r3, #4294967295
 8004060:	9305      	str	r3, [sp, #20]
 8004062:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 800413c <_vfiprintf_r+0x250>
 8004066:	2203      	movs	r2, #3
 8004068:	4650      	mov	r0, sl
 800406a:	7821      	ldrb	r1, [r4, #0]
 800406c:	f000 fc70 	bl	8004950 <memchr>
 8004070:	b140      	cbz	r0, 8004084 <_vfiprintf_r+0x198>
 8004072:	2340      	movs	r3, #64	; 0x40
 8004074:	eba0 000a 	sub.w	r0, r0, sl
 8004078:	fa03 f000 	lsl.w	r0, r3, r0
 800407c:	9b04      	ldr	r3, [sp, #16]
 800407e:	3401      	adds	r4, #1
 8004080:	4303      	orrs	r3, r0
 8004082:	9304      	str	r3, [sp, #16]
 8004084:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004088:	2206      	movs	r2, #6
 800408a:	482d      	ldr	r0, [pc, #180]	; (8004140 <_vfiprintf_r+0x254>)
 800408c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004090:	f000 fc5e 	bl	8004950 <memchr>
 8004094:	2800      	cmp	r0, #0
 8004096:	d03f      	beq.n	8004118 <_vfiprintf_r+0x22c>
 8004098:	4b2a      	ldr	r3, [pc, #168]	; (8004144 <_vfiprintf_r+0x258>)
 800409a:	bb1b      	cbnz	r3, 80040e4 <_vfiprintf_r+0x1f8>
 800409c:	9b03      	ldr	r3, [sp, #12]
 800409e:	3307      	adds	r3, #7
 80040a0:	f023 0307 	bic.w	r3, r3, #7
 80040a4:	3308      	adds	r3, #8
 80040a6:	9303      	str	r3, [sp, #12]
 80040a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80040aa:	443b      	add	r3, r7
 80040ac:	9309      	str	r3, [sp, #36]	; 0x24
 80040ae:	e767      	b.n	8003f80 <_vfiprintf_r+0x94>
 80040b0:	460c      	mov	r4, r1
 80040b2:	2001      	movs	r0, #1
 80040b4:	fb0c 3202 	mla	r2, ip, r2, r3
 80040b8:	e7a5      	b.n	8004006 <_vfiprintf_r+0x11a>
 80040ba:	2300      	movs	r3, #0
 80040bc:	f04f 0c0a 	mov.w	ip, #10
 80040c0:	4619      	mov	r1, r3
 80040c2:	3401      	adds	r4, #1
 80040c4:	9305      	str	r3, [sp, #20]
 80040c6:	4620      	mov	r0, r4
 80040c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80040cc:	3a30      	subs	r2, #48	; 0x30
 80040ce:	2a09      	cmp	r2, #9
 80040d0:	d903      	bls.n	80040da <_vfiprintf_r+0x1ee>
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d0c5      	beq.n	8004062 <_vfiprintf_r+0x176>
 80040d6:	9105      	str	r1, [sp, #20]
 80040d8:	e7c3      	b.n	8004062 <_vfiprintf_r+0x176>
 80040da:	4604      	mov	r4, r0
 80040dc:	2301      	movs	r3, #1
 80040de:	fb0c 2101 	mla	r1, ip, r1, r2
 80040e2:	e7f0      	b.n	80040c6 <_vfiprintf_r+0x1da>
 80040e4:	ab03      	add	r3, sp, #12
 80040e6:	9300      	str	r3, [sp, #0]
 80040e8:	462a      	mov	r2, r5
 80040ea:	4630      	mov	r0, r6
 80040ec:	4b16      	ldr	r3, [pc, #88]	; (8004148 <_vfiprintf_r+0x25c>)
 80040ee:	a904      	add	r1, sp, #16
 80040f0:	f3af 8000 	nop.w
 80040f4:	4607      	mov	r7, r0
 80040f6:	1c78      	adds	r0, r7, #1
 80040f8:	d1d6      	bne.n	80040a8 <_vfiprintf_r+0x1bc>
 80040fa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80040fc:	07d9      	lsls	r1, r3, #31
 80040fe:	d405      	bmi.n	800410c <_vfiprintf_r+0x220>
 8004100:	89ab      	ldrh	r3, [r5, #12]
 8004102:	059a      	lsls	r2, r3, #22
 8004104:	d402      	bmi.n	800410c <_vfiprintf_r+0x220>
 8004106:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004108:	f7ff fe33 	bl	8003d72 <__retarget_lock_release_recursive>
 800410c:	89ab      	ldrh	r3, [r5, #12]
 800410e:	065b      	lsls	r3, r3, #25
 8004110:	f53f af12 	bmi.w	8003f38 <_vfiprintf_r+0x4c>
 8004114:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004116:	e711      	b.n	8003f3c <_vfiprintf_r+0x50>
 8004118:	ab03      	add	r3, sp, #12
 800411a:	9300      	str	r3, [sp, #0]
 800411c:	462a      	mov	r2, r5
 800411e:	4630      	mov	r0, r6
 8004120:	4b09      	ldr	r3, [pc, #36]	; (8004148 <_vfiprintf_r+0x25c>)
 8004122:	a904      	add	r1, sp, #16
 8004124:	f000 f882 	bl	800422c <_printf_i>
 8004128:	e7e4      	b.n	80040f4 <_vfiprintf_r+0x208>
 800412a:	bf00      	nop
 800412c:	08004b2c 	.word	0x08004b2c
 8004130:	08004b4c 	.word	0x08004b4c
 8004134:	08004b0c 	.word	0x08004b0c
 8004138:	08004b6c 	.word	0x08004b6c
 800413c:	08004b72 	.word	0x08004b72
 8004140:	08004b76 	.word	0x08004b76
 8004144:	00000000 	.word	0x00000000
 8004148:	08003ec7 	.word	0x08003ec7

0800414c <_printf_common>:
 800414c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004150:	4616      	mov	r6, r2
 8004152:	4699      	mov	r9, r3
 8004154:	688a      	ldr	r2, [r1, #8]
 8004156:	690b      	ldr	r3, [r1, #16]
 8004158:	4607      	mov	r7, r0
 800415a:	4293      	cmp	r3, r2
 800415c:	bfb8      	it	lt
 800415e:	4613      	movlt	r3, r2
 8004160:	6033      	str	r3, [r6, #0]
 8004162:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004166:	460c      	mov	r4, r1
 8004168:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800416c:	b10a      	cbz	r2, 8004172 <_printf_common+0x26>
 800416e:	3301      	adds	r3, #1
 8004170:	6033      	str	r3, [r6, #0]
 8004172:	6823      	ldr	r3, [r4, #0]
 8004174:	0699      	lsls	r1, r3, #26
 8004176:	bf42      	ittt	mi
 8004178:	6833      	ldrmi	r3, [r6, #0]
 800417a:	3302      	addmi	r3, #2
 800417c:	6033      	strmi	r3, [r6, #0]
 800417e:	6825      	ldr	r5, [r4, #0]
 8004180:	f015 0506 	ands.w	r5, r5, #6
 8004184:	d106      	bne.n	8004194 <_printf_common+0x48>
 8004186:	f104 0a19 	add.w	sl, r4, #25
 800418a:	68e3      	ldr	r3, [r4, #12]
 800418c:	6832      	ldr	r2, [r6, #0]
 800418e:	1a9b      	subs	r3, r3, r2
 8004190:	42ab      	cmp	r3, r5
 8004192:	dc28      	bgt.n	80041e6 <_printf_common+0x9a>
 8004194:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004198:	1e13      	subs	r3, r2, #0
 800419a:	6822      	ldr	r2, [r4, #0]
 800419c:	bf18      	it	ne
 800419e:	2301      	movne	r3, #1
 80041a0:	0692      	lsls	r2, r2, #26
 80041a2:	d42d      	bmi.n	8004200 <_printf_common+0xb4>
 80041a4:	4649      	mov	r1, r9
 80041a6:	4638      	mov	r0, r7
 80041a8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80041ac:	47c0      	blx	r8
 80041ae:	3001      	adds	r0, #1
 80041b0:	d020      	beq.n	80041f4 <_printf_common+0xa8>
 80041b2:	6823      	ldr	r3, [r4, #0]
 80041b4:	68e5      	ldr	r5, [r4, #12]
 80041b6:	f003 0306 	and.w	r3, r3, #6
 80041ba:	2b04      	cmp	r3, #4
 80041bc:	bf18      	it	ne
 80041be:	2500      	movne	r5, #0
 80041c0:	6832      	ldr	r2, [r6, #0]
 80041c2:	f04f 0600 	mov.w	r6, #0
 80041c6:	68a3      	ldr	r3, [r4, #8]
 80041c8:	bf08      	it	eq
 80041ca:	1aad      	subeq	r5, r5, r2
 80041cc:	6922      	ldr	r2, [r4, #16]
 80041ce:	bf08      	it	eq
 80041d0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80041d4:	4293      	cmp	r3, r2
 80041d6:	bfc4      	itt	gt
 80041d8:	1a9b      	subgt	r3, r3, r2
 80041da:	18ed      	addgt	r5, r5, r3
 80041dc:	341a      	adds	r4, #26
 80041de:	42b5      	cmp	r5, r6
 80041e0:	d11a      	bne.n	8004218 <_printf_common+0xcc>
 80041e2:	2000      	movs	r0, #0
 80041e4:	e008      	b.n	80041f8 <_printf_common+0xac>
 80041e6:	2301      	movs	r3, #1
 80041e8:	4652      	mov	r2, sl
 80041ea:	4649      	mov	r1, r9
 80041ec:	4638      	mov	r0, r7
 80041ee:	47c0      	blx	r8
 80041f0:	3001      	adds	r0, #1
 80041f2:	d103      	bne.n	80041fc <_printf_common+0xb0>
 80041f4:	f04f 30ff 	mov.w	r0, #4294967295
 80041f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80041fc:	3501      	adds	r5, #1
 80041fe:	e7c4      	b.n	800418a <_printf_common+0x3e>
 8004200:	2030      	movs	r0, #48	; 0x30
 8004202:	18e1      	adds	r1, r4, r3
 8004204:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004208:	1c5a      	adds	r2, r3, #1
 800420a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800420e:	4422      	add	r2, r4
 8004210:	3302      	adds	r3, #2
 8004212:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004216:	e7c5      	b.n	80041a4 <_printf_common+0x58>
 8004218:	2301      	movs	r3, #1
 800421a:	4622      	mov	r2, r4
 800421c:	4649      	mov	r1, r9
 800421e:	4638      	mov	r0, r7
 8004220:	47c0      	blx	r8
 8004222:	3001      	adds	r0, #1
 8004224:	d0e6      	beq.n	80041f4 <_printf_common+0xa8>
 8004226:	3601      	adds	r6, #1
 8004228:	e7d9      	b.n	80041de <_printf_common+0x92>
	...

0800422c <_printf_i>:
 800422c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004230:	7e0f      	ldrb	r7, [r1, #24]
 8004232:	4691      	mov	r9, r2
 8004234:	2f78      	cmp	r7, #120	; 0x78
 8004236:	4680      	mov	r8, r0
 8004238:	460c      	mov	r4, r1
 800423a:	469a      	mov	sl, r3
 800423c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800423e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004242:	d807      	bhi.n	8004254 <_printf_i+0x28>
 8004244:	2f62      	cmp	r7, #98	; 0x62
 8004246:	d80a      	bhi.n	800425e <_printf_i+0x32>
 8004248:	2f00      	cmp	r7, #0
 800424a:	f000 80d9 	beq.w	8004400 <_printf_i+0x1d4>
 800424e:	2f58      	cmp	r7, #88	; 0x58
 8004250:	f000 80a4 	beq.w	800439c <_printf_i+0x170>
 8004254:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004258:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800425c:	e03a      	b.n	80042d4 <_printf_i+0xa8>
 800425e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004262:	2b15      	cmp	r3, #21
 8004264:	d8f6      	bhi.n	8004254 <_printf_i+0x28>
 8004266:	a101      	add	r1, pc, #4	; (adr r1, 800426c <_printf_i+0x40>)
 8004268:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800426c:	080042c5 	.word	0x080042c5
 8004270:	080042d9 	.word	0x080042d9
 8004274:	08004255 	.word	0x08004255
 8004278:	08004255 	.word	0x08004255
 800427c:	08004255 	.word	0x08004255
 8004280:	08004255 	.word	0x08004255
 8004284:	080042d9 	.word	0x080042d9
 8004288:	08004255 	.word	0x08004255
 800428c:	08004255 	.word	0x08004255
 8004290:	08004255 	.word	0x08004255
 8004294:	08004255 	.word	0x08004255
 8004298:	080043e7 	.word	0x080043e7
 800429c:	08004309 	.word	0x08004309
 80042a0:	080043c9 	.word	0x080043c9
 80042a4:	08004255 	.word	0x08004255
 80042a8:	08004255 	.word	0x08004255
 80042ac:	08004409 	.word	0x08004409
 80042b0:	08004255 	.word	0x08004255
 80042b4:	08004309 	.word	0x08004309
 80042b8:	08004255 	.word	0x08004255
 80042bc:	08004255 	.word	0x08004255
 80042c0:	080043d1 	.word	0x080043d1
 80042c4:	682b      	ldr	r3, [r5, #0]
 80042c6:	1d1a      	adds	r2, r3, #4
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	602a      	str	r2, [r5, #0]
 80042cc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80042d0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80042d4:	2301      	movs	r3, #1
 80042d6:	e0a4      	b.n	8004422 <_printf_i+0x1f6>
 80042d8:	6820      	ldr	r0, [r4, #0]
 80042da:	6829      	ldr	r1, [r5, #0]
 80042dc:	0606      	lsls	r6, r0, #24
 80042de:	f101 0304 	add.w	r3, r1, #4
 80042e2:	d50a      	bpl.n	80042fa <_printf_i+0xce>
 80042e4:	680e      	ldr	r6, [r1, #0]
 80042e6:	602b      	str	r3, [r5, #0]
 80042e8:	2e00      	cmp	r6, #0
 80042ea:	da03      	bge.n	80042f4 <_printf_i+0xc8>
 80042ec:	232d      	movs	r3, #45	; 0x2d
 80042ee:	4276      	negs	r6, r6
 80042f0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80042f4:	230a      	movs	r3, #10
 80042f6:	485e      	ldr	r0, [pc, #376]	; (8004470 <_printf_i+0x244>)
 80042f8:	e019      	b.n	800432e <_printf_i+0x102>
 80042fa:	680e      	ldr	r6, [r1, #0]
 80042fc:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004300:	602b      	str	r3, [r5, #0]
 8004302:	bf18      	it	ne
 8004304:	b236      	sxthne	r6, r6
 8004306:	e7ef      	b.n	80042e8 <_printf_i+0xbc>
 8004308:	682b      	ldr	r3, [r5, #0]
 800430a:	6820      	ldr	r0, [r4, #0]
 800430c:	1d19      	adds	r1, r3, #4
 800430e:	6029      	str	r1, [r5, #0]
 8004310:	0601      	lsls	r1, r0, #24
 8004312:	d501      	bpl.n	8004318 <_printf_i+0xec>
 8004314:	681e      	ldr	r6, [r3, #0]
 8004316:	e002      	b.n	800431e <_printf_i+0xf2>
 8004318:	0646      	lsls	r6, r0, #25
 800431a:	d5fb      	bpl.n	8004314 <_printf_i+0xe8>
 800431c:	881e      	ldrh	r6, [r3, #0]
 800431e:	2f6f      	cmp	r7, #111	; 0x6f
 8004320:	bf0c      	ite	eq
 8004322:	2308      	moveq	r3, #8
 8004324:	230a      	movne	r3, #10
 8004326:	4852      	ldr	r0, [pc, #328]	; (8004470 <_printf_i+0x244>)
 8004328:	2100      	movs	r1, #0
 800432a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800432e:	6865      	ldr	r5, [r4, #4]
 8004330:	2d00      	cmp	r5, #0
 8004332:	bfa8      	it	ge
 8004334:	6821      	ldrge	r1, [r4, #0]
 8004336:	60a5      	str	r5, [r4, #8]
 8004338:	bfa4      	itt	ge
 800433a:	f021 0104 	bicge.w	r1, r1, #4
 800433e:	6021      	strge	r1, [r4, #0]
 8004340:	b90e      	cbnz	r6, 8004346 <_printf_i+0x11a>
 8004342:	2d00      	cmp	r5, #0
 8004344:	d04d      	beq.n	80043e2 <_printf_i+0x1b6>
 8004346:	4615      	mov	r5, r2
 8004348:	fbb6 f1f3 	udiv	r1, r6, r3
 800434c:	fb03 6711 	mls	r7, r3, r1, r6
 8004350:	5dc7      	ldrb	r7, [r0, r7]
 8004352:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004356:	4637      	mov	r7, r6
 8004358:	42bb      	cmp	r3, r7
 800435a:	460e      	mov	r6, r1
 800435c:	d9f4      	bls.n	8004348 <_printf_i+0x11c>
 800435e:	2b08      	cmp	r3, #8
 8004360:	d10b      	bne.n	800437a <_printf_i+0x14e>
 8004362:	6823      	ldr	r3, [r4, #0]
 8004364:	07de      	lsls	r6, r3, #31
 8004366:	d508      	bpl.n	800437a <_printf_i+0x14e>
 8004368:	6923      	ldr	r3, [r4, #16]
 800436a:	6861      	ldr	r1, [r4, #4]
 800436c:	4299      	cmp	r1, r3
 800436e:	bfde      	ittt	le
 8004370:	2330      	movle	r3, #48	; 0x30
 8004372:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004376:	f105 35ff 	addle.w	r5, r5, #4294967295
 800437a:	1b52      	subs	r2, r2, r5
 800437c:	6122      	str	r2, [r4, #16]
 800437e:	464b      	mov	r3, r9
 8004380:	4621      	mov	r1, r4
 8004382:	4640      	mov	r0, r8
 8004384:	f8cd a000 	str.w	sl, [sp]
 8004388:	aa03      	add	r2, sp, #12
 800438a:	f7ff fedf 	bl	800414c <_printf_common>
 800438e:	3001      	adds	r0, #1
 8004390:	d14c      	bne.n	800442c <_printf_i+0x200>
 8004392:	f04f 30ff 	mov.w	r0, #4294967295
 8004396:	b004      	add	sp, #16
 8004398:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800439c:	4834      	ldr	r0, [pc, #208]	; (8004470 <_printf_i+0x244>)
 800439e:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80043a2:	6829      	ldr	r1, [r5, #0]
 80043a4:	6823      	ldr	r3, [r4, #0]
 80043a6:	f851 6b04 	ldr.w	r6, [r1], #4
 80043aa:	6029      	str	r1, [r5, #0]
 80043ac:	061d      	lsls	r5, r3, #24
 80043ae:	d514      	bpl.n	80043da <_printf_i+0x1ae>
 80043b0:	07df      	lsls	r7, r3, #31
 80043b2:	bf44      	itt	mi
 80043b4:	f043 0320 	orrmi.w	r3, r3, #32
 80043b8:	6023      	strmi	r3, [r4, #0]
 80043ba:	b91e      	cbnz	r6, 80043c4 <_printf_i+0x198>
 80043bc:	6823      	ldr	r3, [r4, #0]
 80043be:	f023 0320 	bic.w	r3, r3, #32
 80043c2:	6023      	str	r3, [r4, #0]
 80043c4:	2310      	movs	r3, #16
 80043c6:	e7af      	b.n	8004328 <_printf_i+0xfc>
 80043c8:	6823      	ldr	r3, [r4, #0]
 80043ca:	f043 0320 	orr.w	r3, r3, #32
 80043ce:	6023      	str	r3, [r4, #0]
 80043d0:	2378      	movs	r3, #120	; 0x78
 80043d2:	4828      	ldr	r0, [pc, #160]	; (8004474 <_printf_i+0x248>)
 80043d4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80043d8:	e7e3      	b.n	80043a2 <_printf_i+0x176>
 80043da:	0659      	lsls	r1, r3, #25
 80043dc:	bf48      	it	mi
 80043de:	b2b6      	uxthmi	r6, r6
 80043e0:	e7e6      	b.n	80043b0 <_printf_i+0x184>
 80043e2:	4615      	mov	r5, r2
 80043e4:	e7bb      	b.n	800435e <_printf_i+0x132>
 80043e6:	682b      	ldr	r3, [r5, #0]
 80043e8:	6826      	ldr	r6, [r4, #0]
 80043ea:	1d18      	adds	r0, r3, #4
 80043ec:	6961      	ldr	r1, [r4, #20]
 80043ee:	6028      	str	r0, [r5, #0]
 80043f0:	0635      	lsls	r5, r6, #24
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	d501      	bpl.n	80043fa <_printf_i+0x1ce>
 80043f6:	6019      	str	r1, [r3, #0]
 80043f8:	e002      	b.n	8004400 <_printf_i+0x1d4>
 80043fa:	0670      	lsls	r0, r6, #25
 80043fc:	d5fb      	bpl.n	80043f6 <_printf_i+0x1ca>
 80043fe:	8019      	strh	r1, [r3, #0]
 8004400:	2300      	movs	r3, #0
 8004402:	4615      	mov	r5, r2
 8004404:	6123      	str	r3, [r4, #16]
 8004406:	e7ba      	b.n	800437e <_printf_i+0x152>
 8004408:	682b      	ldr	r3, [r5, #0]
 800440a:	2100      	movs	r1, #0
 800440c:	1d1a      	adds	r2, r3, #4
 800440e:	602a      	str	r2, [r5, #0]
 8004410:	681d      	ldr	r5, [r3, #0]
 8004412:	6862      	ldr	r2, [r4, #4]
 8004414:	4628      	mov	r0, r5
 8004416:	f000 fa9b 	bl	8004950 <memchr>
 800441a:	b108      	cbz	r0, 8004420 <_printf_i+0x1f4>
 800441c:	1b40      	subs	r0, r0, r5
 800441e:	6060      	str	r0, [r4, #4]
 8004420:	6863      	ldr	r3, [r4, #4]
 8004422:	6123      	str	r3, [r4, #16]
 8004424:	2300      	movs	r3, #0
 8004426:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800442a:	e7a8      	b.n	800437e <_printf_i+0x152>
 800442c:	462a      	mov	r2, r5
 800442e:	4649      	mov	r1, r9
 8004430:	4640      	mov	r0, r8
 8004432:	6923      	ldr	r3, [r4, #16]
 8004434:	47d0      	blx	sl
 8004436:	3001      	adds	r0, #1
 8004438:	d0ab      	beq.n	8004392 <_printf_i+0x166>
 800443a:	6823      	ldr	r3, [r4, #0]
 800443c:	079b      	lsls	r3, r3, #30
 800443e:	d413      	bmi.n	8004468 <_printf_i+0x23c>
 8004440:	68e0      	ldr	r0, [r4, #12]
 8004442:	9b03      	ldr	r3, [sp, #12]
 8004444:	4298      	cmp	r0, r3
 8004446:	bfb8      	it	lt
 8004448:	4618      	movlt	r0, r3
 800444a:	e7a4      	b.n	8004396 <_printf_i+0x16a>
 800444c:	2301      	movs	r3, #1
 800444e:	4632      	mov	r2, r6
 8004450:	4649      	mov	r1, r9
 8004452:	4640      	mov	r0, r8
 8004454:	47d0      	blx	sl
 8004456:	3001      	adds	r0, #1
 8004458:	d09b      	beq.n	8004392 <_printf_i+0x166>
 800445a:	3501      	adds	r5, #1
 800445c:	68e3      	ldr	r3, [r4, #12]
 800445e:	9903      	ldr	r1, [sp, #12]
 8004460:	1a5b      	subs	r3, r3, r1
 8004462:	42ab      	cmp	r3, r5
 8004464:	dcf2      	bgt.n	800444c <_printf_i+0x220>
 8004466:	e7eb      	b.n	8004440 <_printf_i+0x214>
 8004468:	2500      	movs	r5, #0
 800446a:	f104 0619 	add.w	r6, r4, #25
 800446e:	e7f5      	b.n	800445c <_printf_i+0x230>
 8004470:	08004b7d 	.word	0x08004b7d
 8004474:	08004b8e 	.word	0x08004b8e

08004478 <_sbrk_r>:
 8004478:	b538      	push	{r3, r4, r5, lr}
 800447a:	2300      	movs	r3, #0
 800447c:	4d05      	ldr	r5, [pc, #20]	; (8004494 <_sbrk_r+0x1c>)
 800447e:	4604      	mov	r4, r0
 8004480:	4608      	mov	r0, r1
 8004482:	602b      	str	r3, [r5, #0]
 8004484:	f7fc fd9e 	bl	8000fc4 <_sbrk>
 8004488:	1c43      	adds	r3, r0, #1
 800448a:	d102      	bne.n	8004492 <_sbrk_r+0x1a>
 800448c:	682b      	ldr	r3, [r5, #0]
 800448e:	b103      	cbz	r3, 8004492 <_sbrk_r+0x1a>
 8004490:	6023      	str	r3, [r4, #0]
 8004492:	bd38      	pop	{r3, r4, r5, pc}
 8004494:	20000198 	.word	0x20000198

08004498 <__sread>:
 8004498:	b510      	push	{r4, lr}
 800449a:	460c      	mov	r4, r1
 800449c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80044a0:	f000 fab8 	bl	8004a14 <_read_r>
 80044a4:	2800      	cmp	r0, #0
 80044a6:	bfab      	itete	ge
 80044a8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80044aa:	89a3      	ldrhlt	r3, [r4, #12]
 80044ac:	181b      	addge	r3, r3, r0
 80044ae:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80044b2:	bfac      	ite	ge
 80044b4:	6563      	strge	r3, [r4, #84]	; 0x54
 80044b6:	81a3      	strhlt	r3, [r4, #12]
 80044b8:	bd10      	pop	{r4, pc}

080044ba <__swrite>:
 80044ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80044be:	461f      	mov	r7, r3
 80044c0:	898b      	ldrh	r3, [r1, #12]
 80044c2:	4605      	mov	r5, r0
 80044c4:	05db      	lsls	r3, r3, #23
 80044c6:	460c      	mov	r4, r1
 80044c8:	4616      	mov	r6, r2
 80044ca:	d505      	bpl.n	80044d8 <__swrite+0x1e>
 80044cc:	2302      	movs	r3, #2
 80044ce:	2200      	movs	r2, #0
 80044d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80044d4:	f000 f9c4 	bl	8004860 <_lseek_r>
 80044d8:	89a3      	ldrh	r3, [r4, #12]
 80044da:	4632      	mov	r2, r6
 80044dc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80044e0:	81a3      	strh	r3, [r4, #12]
 80044e2:	4628      	mov	r0, r5
 80044e4:	463b      	mov	r3, r7
 80044e6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80044ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80044ee:	f000 b869 	b.w	80045c4 <_write_r>

080044f2 <__sseek>:
 80044f2:	b510      	push	{r4, lr}
 80044f4:	460c      	mov	r4, r1
 80044f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80044fa:	f000 f9b1 	bl	8004860 <_lseek_r>
 80044fe:	1c43      	adds	r3, r0, #1
 8004500:	89a3      	ldrh	r3, [r4, #12]
 8004502:	bf15      	itete	ne
 8004504:	6560      	strne	r0, [r4, #84]	; 0x54
 8004506:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800450a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800450e:	81a3      	strheq	r3, [r4, #12]
 8004510:	bf18      	it	ne
 8004512:	81a3      	strhne	r3, [r4, #12]
 8004514:	bd10      	pop	{r4, pc}

08004516 <__sclose>:
 8004516:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800451a:	f000 b8d3 	b.w	80046c4 <_close_r>
	...

08004520 <__swbuf_r>:
 8004520:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004522:	460e      	mov	r6, r1
 8004524:	4614      	mov	r4, r2
 8004526:	4605      	mov	r5, r0
 8004528:	b118      	cbz	r0, 8004532 <__swbuf_r+0x12>
 800452a:	6983      	ldr	r3, [r0, #24]
 800452c:	b90b      	cbnz	r3, 8004532 <__swbuf_r+0x12>
 800452e:	f7ff fb81 	bl	8003c34 <__sinit>
 8004532:	4b21      	ldr	r3, [pc, #132]	; (80045b8 <__swbuf_r+0x98>)
 8004534:	429c      	cmp	r4, r3
 8004536:	d12b      	bne.n	8004590 <__swbuf_r+0x70>
 8004538:	686c      	ldr	r4, [r5, #4]
 800453a:	69a3      	ldr	r3, [r4, #24]
 800453c:	60a3      	str	r3, [r4, #8]
 800453e:	89a3      	ldrh	r3, [r4, #12]
 8004540:	071a      	lsls	r2, r3, #28
 8004542:	d52f      	bpl.n	80045a4 <__swbuf_r+0x84>
 8004544:	6923      	ldr	r3, [r4, #16]
 8004546:	b36b      	cbz	r3, 80045a4 <__swbuf_r+0x84>
 8004548:	6923      	ldr	r3, [r4, #16]
 800454a:	6820      	ldr	r0, [r4, #0]
 800454c:	b2f6      	uxtb	r6, r6
 800454e:	1ac0      	subs	r0, r0, r3
 8004550:	6963      	ldr	r3, [r4, #20]
 8004552:	4637      	mov	r7, r6
 8004554:	4283      	cmp	r3, r0
 8004556:	dc04      	bgt.n	8004562 <__swbuf_r+0x42>
 8004558:	4621      	mov	r1, r4
 800455a:	4628      	mov	r0, r5
 800455c:	f000 f944 	bl	80047e8 <_fflush_r>
 8004560:	bb30      	cbnz	r0, 80045b0 <__swbuf_r+0x90>
 8004562:	68a3      	ldr	r3, [r4, #8]
 8004564:	3001      	adds	r0, #1
 8004566:	3b01      	subs	r3, #1
 8004568:	60a3      	str	r3, [r4, #8]
 800456a:	6823      	ldr	r3, [r4, #0]
 800456c:	1c5a      	adds	r2, r3, #1
 800456e:	6022      	str	r2, [r4, #0]
 8004570:	701e      	strb	r6, [r3, #0]
 8004572:	6963      	ldr	r3, [r4, #20]
 8004574:	4283      	cmp	r3, r0
 8004576:	d004      	beq.n	8004582 <__swbuf_r+0x62>
 8004578:	89a3      	ldrh	r3, [r4, #12]
 800457a:	07db      	lsls	r3, r3, #31
 800457c:	d506      	bpl.n	800458c <__swbuf_r+0x6c>
 800457e:	2e0a      	cmp	r6, #10
 8004580:	d104      	bne.n	800458c <__swbuf_r+0x6c>
 8004582:	4621      	mov	r1, r4
 8004584:	4628      	mov	r0, r5
 8004586:	f000 f92f 	bl	80047e8 <_fflush_r>
 800458a:	b988      	cbnz	r0, 80045b0 <__swbuf_r+0x90>
 800458c:	4638      	mov	r0, r7
 800458e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004590:	4b0a      	ldr	r3, [pc, #40]	; (80045bc <__swbuf_r+0x9c>)
 8004592:	429c      	cmp	r4, r3
 8004594:	d101      	bne.n	800459a <__swbuf_r+0x7a>
 8004596:	68ac      	ldr	r4, [r5, #8]
 8004598:	e7cf      	b.n	800453a <__swbuf_r+0x1a>
 800459a:	4b09      	ldr	r3, [pc, #36]	; (80045c0 <__swbuf_r+0xa0>)
 800459c:	429c      	cmp	r4, r3
 800459e:	bf08      	it	eq
 80045a0:	68ec      	ldreq	r4, [r5, #12]
 80045a2:	e7ca      	b.n	800453a <__swbuf_r+0x1a>
 80045a4:	4621      	mov	r1, r4
 80045a6:	4628      	mov	r0, r5
 80045a8:	f000 f81e 	bl	80045e8 <__swsetup_r>
 80045ac:	2800      	cmp	r0, #0
 80045ae:	d0cb      	beq.n	8004548 <__swbuf_r+0x28>
 80045b0:	f04f 37ff 	mov.w	r7, #4294967295
 80045b4:	e7ea      	b.n	800458c <__swbuf_r+0x6c>
 80045b6:	bf00      	nop
 80045b8:	08004b2c 	.word	0x08004b2c
 80045bc:	08004b4c 	.word	0x08004b4c
 80045c0:	08004b0c 	.word	0x08004b0c

080045c4 <_write_r>:
 80045c4:	b538      	push	{r3, r4, r5, lr}
 80045c6:	4604      	mov	r4, r0
 80045c8:	4608      	mov	r0, r1
 80045ca:	4611      	mov	r1, r2
 80045cc:	2200      	movs	r2, #0
 80045ce:	4d05      	ldr	r5, [pc, #20]	; (80045e4 <_write_r+0x20>)
 80045d0:	602a      	str	r2, [r5, #0]
 80045d2:	461a      	mov	r2, r3
 80045d4:	f7fc fca9 	bl	8000f2a <_write>
 80045d8:	1c43      	adds	r3, r0, #1
 80045da:	d102      	bne.n	80045e2 <_write_r+0x1e>
 80045dc:	682b      	ldr	r3, [r5, #0]
 80045de:	b103      	cbz	r3, 80045e2 <_write_r+0x1e>
 80045e0:	6023      	str	r3, [r4, #0]
 80045e2:	bd38      	pop	{r3, r4, r5, pc}
 80045e4:	20000198 	.word	0x20000198

080045e8 <__swsetup_r>:
 80045e8:	4b32      	ldr	r3, [pc, #200]	; (80046b4 <__swsetup_r+0xcc>)
 80045ea:	b570      	push	{r4, r5, r6, lr}
 80045ec:	681d      	ldr	r5, [r3, #0]
 80045ee:	4606      	mov	r6, r0
 80045f0:	460c      	mov	r4, r1
 80045f2:	b125      	cbz	r5, 80045fe <__swsetup_r+0x16>
 80045f4:	69ab      	ldr	r3, [r5, #24]
 80045f6:	b913      	cbnz	r3, 80045fe <__swsetup_r+0x16>
 80045f8:	4628      	mov	r0, r5
 80045fa:	f7ff fb1b 	bl	8003c34 <__sinit>
 80045fe:	4b2e      	ldr	r3, [pc, #184]	; (80046b8 <__swsetup_r+0xd0>)
 8004600:	429c      	cmp	r4, r3
 8004602:	d10f      	bne.n	8004624 <__swsetup_r+0x3c>
 8004604:	686c      	ldr	r4, [r5, #4]
 8004606:	89a3      	ldrh	r3, [r4, #12]
 8004608:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800460c:	0719      	lsls	r1, r3, #28
 800460e:	d42c      	bmi.n	800466a <__swsetup_r+0x82>
 8004610:	06dd      	lsls	r5, r3, #27
 8004612:	d411      	bmi.n	8004638 <__swsetup_r+0x50>
 8004614:	2309      	movs	r3, #9
 8004616:	6033      	str	r3, [r6, #0]
 8004618:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800461c:	f04f 30ff 	mov.w	r0, #4294967295
 8004620:	81a3      	strh	r3, [r4, #12]
 8004622:	e03e      	b.n	80046a2 <__swsetup_r+0xba>
 8004624:	4b25      	ldr	r3, [pc, #148]	; (80046bc <__swsetup_r+0xd4>)
 8004626:	429c      	cmp	r4, r3
 8004628:	d101      	bne.n	800462e <__swsetup_r+0x46>
 800462a:	68ac      	ldr	r4, [r5, #8]
 800462c:	e7eb      	b.n	8004606 <__swsetup_r+0x1e>
 800462e:	4b24      	ldr	r3, [pc, #144]	; (80046c0 <__swsetup_r+0xd8>)
 8004630:	429c      	cmp	r4, r3
 8004632:	bf08      	it	eq
 8004634:	68ec      	ldreq	r4, [r5, #12]
 8004636:	e7e6      	b.n	8004606 <__swsetup_r+0x1e>
 8004638:	0758      	lsls	r0, r3, #29
 800463a:	d512      	bpl.n	8004662 <__swsetup_r+0x7a>
 800463c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800463e:	b141      	cbz	r1, 8004652 <__swsetup_r+0x6a>
 8004640:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004644:	4299      	cmp	r1, r3
 8004646:	d002      	beq.n	800464e <__swsetup_r+0x66>
 8004648:	4630      	mov	r0, r6
 800464a:	f000 f99b 	bl	8004984 <_free_r>
 800464e:	2300      	movs	r3, #0
 8004650:	6363      	str	r3, [r4, #52]	; 0x34
 8004652:	89a3      	ldrh	r3, [r4, #12]
 8004654:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004658:	81a3      	strh	r3, [r4, #12]
 800465a:	2300      	movs	r3, #0
 800465c:	6063      	str	r3, [r4, #4]
 800465e:	6923      	ldr	r3, [r4, #16]
 8004660:	6023      	str	r3, [r4, #0]
 8004662:	89a3      	ldrh	r3, [r4, #12]
 8004664:	f043 0308 	orr.w	r3, r3, #8
 8004668:	81a3      	strh	r3, [r4, #12]
 800466a:	6923      	ldr	r3, [r4, #16]
 800466c:	b94b      	cbnz	r3, 8004682 <__swsetup_r+0x9a>
 800466e:	89a3      	ldrh	r3, [r4, #12]
 8004670:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004674:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004678:	d003      	beq.n	8004682 <__swsetup_r+0x9a>
 800467a:	4621      	mov	r1, r4
 800467c:	4630      	mov	r0, r6
 800467e:	f000 f927 	bl	80048d0 <__smakebuf_r>
 8004682:	89a0      	ldrh	r0, [r4, #12]
 8004684:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004688:	f010 0301 	ands.w	r3, r0, #1
 800468c:	d00a      	beq.n	80046a4 <__swsetup_r+0xbc>
 800468e:	2300      	movs	r3, #0
 8004690:	60a3      	str	r3, [r4, #8]
 8004692:	6963      	ldr	r3, [r4, #20]
 8004694:	425b      	negs	r3, r3
 8004696:	61a3      	str	r3, [r4, #24]
 8004698:	6923      	ldr	r3, [r4, #16]
 800469a:	b943      	cbnz	r3, 80046ae <__swsetup_r+0xc6>
 800469c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80046a0:	d1ba      	bne.n	8004618 <__swsetup_r+0x30>
 80046a2:	bd70      	pop	{r4, r5, r6, pc}
 80046a4:	0781      	lsls	r1, r0, #30
 80046a6:	bf58      	it	pl
 80046a8:	6963      	ldrpl	r3, [r4, #20]
 80046aa:	60a3      	str	r3, [r4, #8]
 80046ac:	e7f4      	b.n	8004698 <__swsetup_r+0xb0>
 80046ae:	2000      	movs	r0, #0
 80046b0:	e7f7      	b.n	80046a2 <__swsetup_r+0xba>
 80046b2:	bf00      	nop
 80046b4:	2000000c 	.word	0x2000000c
 80046b8:	08004b2c 	.word	0x08004b2c
 80046bc:	08004b4c 	.word	0x08004b4c
 80046c0:	08004b0c 	.word	0x08004b0c

080046c4 <_close_r>:
 80046c4:	b538      	push	{r3, r4, r5, lr}
 80046c6:	2300      	movs	r3, #0
 80046c8:	4d05      	ldr	r5, [pc, #20]	; (80046e0 <_close_r+0x1c>)
 80046ca:	4604      	mov	r4, r0
 80046cc:	4608      	mov	r0, r1
 80046ce:	602b      	str	r3, [r5, #0]
 80046d0:	f7fc fc47 	bl	8000f62 <_close>
 80046d4:	1c43      	adds	r3, r0, #1
 80046d6:	d102      	bne.n	80046de <_close_r+0x1a>
 80046d8:	682b      	ldr	r3, [r5, #0]
 80046da:	b103      	cbz	r3, 80046de <_close_r+0x1a>
 80046dc:	6023      	str	r3, [r4, #0]
 80046de:	bd38      	pop	{r3, r4, r5, pc}
 80046e0:	20000198 	.word	0x20000198

080046e4 <__sflush_r>:
 80046e4:	898a      	ldrh	r2, [r1, #12]
 80046e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046e8:	4605      	mov	r5, r0
 80046ea:	0710      	lsls	r0, r2, #28
 80046ec:	460c      	mov	r4, r1
 80046ee:	d457      	bmi.n	80047a0 <__sflush_r+0xbc>
 80046f0:	684b      	ldr	r3, [r1, #4]
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	dc04      	bgt.n	8004700 <__sflush_r+0x1c>
 80046f6:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	dc01      	bgt.n	8004700 <__sflush_r+0x1c>
 80046fc:	2000      	movs	r0, #0
 80046fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004700:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004702:	2e00      	cmp	r6, #0
 8004704:	d0fa      	beq.n	80046fc <__sflush_r+0x18>
 8004706:	2300      	movs	r3, #0
 8004708:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800470c:	682f      	ldr	r7, [r5, #0]
 800470e:	602b      	str	r3, [r5, #0]
 8004710:	d032      	beq.n	8004778 <__sflush_r+0x94>
 8004712:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004714:	89a3      	ldrh	r3, [r4, #12]
 8004716:	075a      	lsls	r2, r3, #29
 8004718:	d505      	bpl.n	8004726 <__sflush_r+0x42>
 800471a:	6863      	ldr	r3, [r4, #4]
 800471c:	1ac0      	subs	r0, r0, r3
 800471e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004720:	b10b      	cbz	r3, 8004726 <__sflush_r+0x42>
 8004722:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004724:	1ac0      	subs	r0, r0, r3
 8004726:	2300      	movs	r3, #0
 8004728:	4602      	mov	r2, r0
 800472a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800472c:	4628      	mov	r0, r5
 800472e:	6a21      	ldr	r1, [r4, #32]
 8004730:	47b0      	blx	r6
 8004732:	1c43      	adds	r3, r0, #1
 8004734:	89a3      	ldrh	r3, [r4, #12]
 8004736:	d106      	bne.n	8004746 <__sflush_r+0x62>
 8004738:	6829      	ldr	r1, [r5, #0]
 800473a:	291d      	cmp	r1, #29
 800473c:	d82c      	bhi.n	8004798 <__sflush_r+0xb4>
 800473e:	4a29      	ldr	r2, [pc, #164]	; (80047e4 <__sflush_r+0x100>)
 8004740:	40ca      	lsrs	r2, r1
 8004742:	07d6      	lsls	r6, r2, #31
 8004744:	d528      	bpl.n	8004798 <__sflush_r+0xb4>
 8004746:	2200      	movs	r2, #0
 8004748:	6062      	str	r2, [r4, #4]
 800474a:	6922      	ldr	r2, [r4, #16]
 800474c:	04d9      	lsls	r1, r3, #19
 800474e:	6022      	str	r2, [r4, #0]
 8004750:	d504      	bpl.n	800475c <__sflush_r+0x78>
 8004752:	1c42      	adds	r2, r0, #1
 8004754:	d101      	bne.n	800475a <__sflush_r+0x76>
 8004756:	682b      	ldr	r3, [r5, #0]
 8004758:	b903      	cbnz	r3, 800475c <__sflush_r+0x78>
 800475a:	6560      	str	r0, [r4, #84]	; 0x54
 800475c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800475e:	602f      	str	r7, [r5, #0]
 8004760:	2900      	cmp	r1, #0
 8004762:	d0cb      	beq.n	80046fc <__sflush_r+0x18>
 8004764:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004768:	4299      	cmp	r1, r3
 800476a:	d002      	beq.n	8004772 <__sflush_r+0x8e>
 800476c:	4628      	mov	r0, r5
 800476e:	f000 f909 	bl	8004984 <_free_r>
 8004772:	2000      	movs	r0, #0
 8004774:	6360      	str	r0, [r4, #52]	; 0x34
 8004776:	e7c2      	b.n	80046fe <__sflush_r+0x1a>
 8004778:	6a21      	ldr	r1, [r4, #32]
 800477a:	2301      	movs	r3, #1
 800477c:	4628      	mov	r0, r5
 800477e:	47b0      	blx	r6
 8004780:	1c41      	adds	r1, r0, #1
 8004782:	d1c7      	bne.n	8004714 <__sflush_r+0x30>
 8004784:	682b      	ldr	r3, [r5, #0]
 8004786:	2b00      	cmp	r3, #0
 8004788:	d0c4      	beq.n	8004714 <__sflush_r+0x30>
 800478a:	2b1d      	cmp	r3, #29
 800478c:	d001      	beq.n	8004792 <__sflush_r+0xae>
 800478e:	2b16      	cmp	r3, #22
 8004790:	d101      	bne.n	8004796 <__sflush_r+0xb2>
 8004792:	602f      	str	r7, [r5, #0]
 8004794:	e7b2      	b.n	80046fc <__sflush_r+0x18>
 8004796:	89a3      	ldrh	r3, [r4, #12]
 8004798:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800479c:	81a3      	strh	r3, [r4, #12]
 800479e:	e7ae      	b.n	80046fe <__sflush_r+0x1a>
 80047a0:	690f      	ldr	r7, [r1, #16]
 80047a2:	2f00      	cmp	r7, #0
 80047a4:	d0aa      	beq.n	80046fc <__sflush_r+0x18>
 80047a6:	0793      	lsls	r3, r2, #30
 80047a8:	bf18      	it	ne
 80047aa:	2300      	movne	r3, #0
 80047ac:	680e      	ldr	r6, [r1, #0]
 80047ae:	bf08      	it	eq
 80047b0:	694b      	ldreq	r3, [r1, #20]
 80047b2:	1bf6      	subs	r6, r6, r7
 80047b4:	600f      	str	r7, [r1, #0]
 80047b6:	608b      	str	r3, [r1, #8]
 80047b8:	2e00      	cmp	r6, #0
 80047ba:	dd9f      	ble.n	80046fc <__sflush_r+0x18>
 80047bc:	4633      	mov	r3, r6
 80047be:	463a      	mov	r2, r7
 80047c0:	4628      	mov	r0, r5
 80047c2:	6a21      	ldr	r1, [r4, #32]
 80047c4:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 80047c8:	47e0      	blx	ip
 80047ca:	2800      	cmp	r0, #0
 80047cc:	dc06      	bgt.n	80047dc <__sflush_r+0xf8>
 80047ce:	89a3      	ldrh	r3, [r4, #12]
 80047d0:	f04f 30ff 	mov.w	r0, #4294967295
 80047d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80047d8:	81a3      	strh	r3, [r4, #12]
 80047da:	e790      	b.n	80046fe <__sflush_r+0x1a>
 80047dc:	4407      	add	r7, r0
 80047de:	1a36      	subs	r6, r6, r0
 80047e0:	e7ea      	b.n	80047b8 <__sflush_r+0xd4>
 80047e2:	bf00      	nop
 80047e4:	20400001 	.word	0x20400001

080047e8 <_fflush_r>:
 80047e8:	b538      	push	{r3, r4, r5, lr}
 80047ea:	690b      	ldr	r3, [r1, #16]
 80047ec:	4605      	mov	r5, r0
 80047ee:	460c      	mov	r4, r1
 80047f0:	b913      	cbnz	r3, 80047f8 <_fflush_r+0x10>
 80047f2:	2500      	movs	r5, #0
 80047f4:	4628      	mov	r0, r5
 80047f6:	bd38      	pop	{r3, r4, r5, pc}
 80047f8:	b118      	cbz	r0, 8004802 <_fflush_r+0x1a>
 80047fa:	6983      	ldr	r3, [r0, #24]
 80047fc:	b90b      	cbnz	r3, 8004802 <_fflush_r+0x1a>
 80047fe:	f7ff fa19 	bl	8003c34 <__sinit>
 8004802:	4b14      	ldr	r3, [pc, #80]	; (8004854 <_fflush_r+0x6c>)
 8004804:	429c      	cmp	r4, r3
 8004806:	d11b      	bne.n	8004840 <_fflush_r+0x58>
 8004808:	686c      	ldr	r4, [r5, #4]
 800480a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800480e:	2b00      	cmp	r3, #0
 8004810:	d0ef      	beq.n	80047f2 <_fflush_r+0xa>
 8004812:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004814:	07d0      	lsls	r0, r2, #31
 8004816:	d404      	bmi.n	8004822 <_fflush_r+0x3a>
 8004818:	0599      	lsls	r1, r3, #22
 800481a:	d402      	bmi.n	8004822 <_fflush_r+0x3a>
 800481c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800481e:	f7ff faa7 	bl	8003d70 <__retarget_lock_acquire_recursive>
 8004822:	4628      	mov	r0, r5
 8004824:	4621      	mov	r1, r4
 8004826:	f7ff ff5d 	bl	80046e4 <__sflush_r>
 800482a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800482c:	4605      	mov	r5, r0
 800482e:	07da      	lsls	r2, r3, #31
 8004830:	d4e0      	bmi.n	80047f4 <_fflush_r+0xc>
 8004832:	89a3      	ldrh	r3, [r4, #12]
 8004834:	059b      	lsls	r3, r3, #22
 8004836:	d4dd      	bmi.n	80047f4 <_fflush_r+0xc>
 8004838:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800483a:	f7ff fa9a 	bl	8003d72 <__retarget_lock_release_recursive>
 800483e:	e7d9      	b.n	80047f4 <_fflush_r+0xc>
 8004840:	4b05      	ldr	r3, [pc, #20]	; (8004858 <_fflush_r+0x70>)
 8004842:	429c      	cmp	r4, r3
 8004844:	d101      	bne.n	800484a <_fflush_r+0x62>
 8004846:	68ac      	ldr	r4, [r5, #8]
 8004848:	e7df      	b.n	800480a <_fflush_r+0x22>
 800484a:	4b04      	ldr	r3, [pc, #16]	; (800485c <_fflush_r+0x74>)
 800484c:	429c      	cmp	r4, r3
 800484e:	bf08      	it	eq
 8004850:	68ec      	ldreq	r4, [r5, #12]
 8004852:	e7da      	b.n	800480a <_fflush_r+0x22>
 8004854:	08004b2c 	.word	0x08004b2c
 8004858:	08004b4c 	.word	0x08004b4c
 800485c:	08004b0c 	.word	0x08004b0c

08004860 <_lseek_r>:
 8004860:	b538      	push	{r3, r4, r5, lr}
 8004862:	4604      	mov	r4, r0
 8004864:	4608      	mov	r0, r1
 8004866:	4611      	mov	r1, r2
 8004868:	2200      	movs	r2, #0
 800486a:	4d05      	ldr	r5, [pc, #20]	; (8004880 <_lseek_r+0x20>)
 800486c:	602a      	str	r2, [r5, #0]
 800486e:	461a      	mov	r2, r3
 8004870:	f7fc fb9b 	bl	8000faa <_lseek>
 8004874:	1c43      	adds	r3, r0, #1
 8004876:	d102      	bne.n	800487e <_lseek_r+0x1e>
 8004878:	682b      	ldr	r3, [r5, #0]
 800487a:	b103      	cbz	r3, 800487e <_lseek_r+0x1e>
 800487c:	6023      	str	r3, [r4, #0]
 800487e:	bd38      	pop	{r3, r4, r5, pc}
 8004880:	20000198 	.word	0x20000198

08004884 <__swhatbuf_r>:
 8004884:	b570      	push	{r4, r5, r6, lr}
 8004886:	460e      	mov	r6, r1
 8004888:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800488c:	4614      	mov	r4, r2
 800488e:	2900      	cmp	r1, #0
 8004890:	461d      	mov	r5, r3
 8004892:	b096      	sub	sp, #88	; 0x58
 8004894:	da08      	bge.n	80048a8 <__swhatbuf_r+0x24>
 8004896:	2200      	movs	r2, #0
 8004898:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800489c:	602a      	str	r2, [r5, #0]
 800489e:	061a      	lsls	r2, r3, #24
 80048a0:	d410      	bmi.n	80048c4 <__swhatbuf_r+0x40>
 80048a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80048a6:	e00e      	b.n	80048c6 <__swhatbuf_r+0x42>
 80048a8:	466a      	mov	r2, sp
 80048aa:	f000 f8c5 	bl	8004a38 <_fstat_r>
 80048ae:	2800      	cmp	r0, #0
 80048b0:	dbf1      	blt.n	8004896 <__swhatbuf_r+0x12>
 80048b2:	9a01      	ldr	r2, [sp, #4]
 80048b4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80048b8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80048bc:	425a      	negs	r2, r3
 80048be:	415a      	adcs	r2, r3
 80048c0:	602a      	str	r2, [r5, #0]
 80048c2:	e7ee      	b.n	80048a2 <__swhatbuf_r+0x1e>
 80048c4:	2340      	movs	r3, #64	; 0x40
 80048c6:	2000      	movs	r0, #0
 80048c8:	6023      	str	r3, [r4, #0]
 80048ca:	b016      	add	sp, #88	; 0x58
 80048cc:	bd70      	pop	{r4, r5, r6, pc}
	...

080048d0 <__smakebuf_r>:
 80048d0:	898b      	ldrh	r3, [r1, #12]
 80048d2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80048d4:	079d      	lsls	r5, r3, #30
 80048d6:	4606      	mov	r6, r0
 80048d8:	460c      	mov	r4, r1
 80048da:	d507      	bpl.n	80048ec <__smakebuf_r+0x1c>
 80048dc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80048e0:	6023      	str	r3, [r4, #0]
 80048e2:	6123      	str	r3, [r4, #16]
 80048e4:	2301      	movs	r3, #1
 80048e6:	6163      	str	r3, [r4, #20]
 80048e8:	b002      	add	sp, #8
 80048ea:	bd70      	pop	{r4, r5, r6, pc}
 80048ec:	466a      	mov	r2, sp
 80048ee:	ab01      	add	r3, sp, #4
 80048f0:	f7ff ffc8 	bl	8004884 <__swhatbuf_r>
 80048f4:	9900      	ldr	r1, [sp, #0]
 80048f6:	4605      	mov	r5, r0
 80048f8:	4630      	mov	r0, r6
 80048fa:	f7ff fa5b 	bl	8003db4 <_malloc_r>
 80048fe:	b948      	cbnz	r0, 8004914 <__smakebuf_r+0x44>
 8004900:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004904:	059a      	lsls	r2, r3, #22
 8004906:	d4ef      	bmi.n	80048e8 <__smakebuf_r+0x18>
 8004908:	f023 0303 	bic.w	r3, r3, #3
 800490c:	f043 0302 	orr.w	r3, r3, #2
 8004910:	81a3      	strh	r3, [r4, #12]
 8004912:	e7e3      	b.n	80048dc <__smakebuf_r+0xc>
 8004914:	4b0d      	ldr	r3, [pc, #52]	; (800494c <__smakebuf_r+0x7c>)
 8004916:	62b3      	str	r3, [r6, #40]	; 0x28
 8004918:	89a3      	ldrh	r3, [r4, #12]
 800491a:	6020      	str	r0, [r4, #0]
 800491c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004920:	81a3      	strh	r3, [r4, #12]
 8004922:	9b00      	ldr	r3, [sp, #0]
 8004924:	6120      	str	r0, [r4, #16]
 8004926:	6163      	str	r3, [r4, #20]
 8004928:	9b01      	ldr	r3, [sp, #4]
 800492a:	b15b      	cbz	r3, 8004944 <__smakebuf_r+0x74>
 800492c:	4630      	mov	r0, r6
 800492e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004932:	f000 f893 	bl	8004a5c <_isatty_r>
 8004936:	b128      	cbz	r0, 8004944 <__smakebuf_r+0x74>
 8004938:	89a3      	ldrh	r3, [r4, #12]
 800493a:	f023 0303 	bic.w	r3, r3, #3
 800493e:	f043 0301 	orr.w	r3, r3, #1
 8004942:	81a3      	strh	r3, [r4, #12]
 8004944:	89a0      	ldrh	r0, [r4, #12]
 8004946:	4305      	orrs	r5, r0
 8004948:	81a5      	strh	r5, [r4, #12]
 800494a:	e7cd      	b.n	80048e8 <__smakebuf_r+0x18>
 800494c:	08003bcd 	.word	0x08003bcd

08004950 <memchr>:
 8004950:	4603      	mov	r3, r0
 8004952:	b510      	push	{r4, lr}
 8004954:	b2c9      	uxtb	r1, r1
 8004956:	4402      	add	r2, r0
 8004958:	4293      	cmp	r3, r2
 800495a:	4618      	mov	r0, r3
 800495c:	d101      	bne.n	8004962 <memchr+0x12>
 800495e:	2000      	movs	r0, #0
 8004960:	e003      	b.n	800496a <memchr+0x1a>
 8004962:	7804      	ldrb	r4, [r0, #0]
 8004964:	3301      	adds	r3, #1
 8004966:	428c      	cmp	r4, r1
 8004968:	d1f6      	bne.n	8004958 <memchr+0x8>
 800496a:	bd10      	pop	{r4, pc}

0800496c <__malloc_lock>:
 800496c:	4801      	ldr	r0, [pc, #4]	; (8004974 <__malloc_lock+0x8>)
 800496e:	f7ff b9ff 	b.w	8003d70 <__retarget_lock_acquire_recursive>
 8004972:	bf00      	nop
 8004974:	2000018c 	.word	0x2000018c

08004978 <__malloc_unlock>:
 8004978:	4801      	ldr	r0, [pc, #4]	; (8004980 <__malloc_unlock+0x8>)
 800497a:	f7ff b9fa 	b.w	8003d72 <__retarget_lock_release_recursive>
 800497e:	bf00      	nop
 8004980:	2000018c 	.word	0x2000018c

08004984 <_free_r>:
 8004984:	b538      	push	{r3, r4, r5, lr}
 8004986:	4605      	mov	r5, r0
 8004988:	2900      	cmp	r1, #0
 800498a:	d040      	beq.n	8004a0e <_free_r+0x8a>
 800498c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004990:	1f0c      	subs	r4, r1, #4
 8004992:	2b00      	cmp	r3, #0
 8004994:	bfb8      	it	lt
 8004996:	18e4      	addlt	r4, r4, r3
 8004998:	f7ff ffe8 	bl	800496c <__malloc_lock>
 800499c:	4a1c      	ldr	r2, [pc, #112]	; (8004a10 <_free_r+0x8c>)
 800499e:	6813      	ldr	r3, [r2, #0]
 80049a0:	b933      	cbnz	r3, 80049b0 <_free_r+0x2c>
 80049a2:	6063      	str	r3, [r4, #4]
 80049a4:	6014      	str	r4, [r2, #0]
 80049a6:	4628      	mov	r0, r5
 80049a8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80049ac:	f7ff bfe4 	b.w	8004978 <__malloc_unlock>
 80049b0:	42a3      	cmp	r3, r4
 80049b2:	d908      	bls.n	80049c6 <_free_r+0x42>
 80049b4:	6820      	ldr	r0, [r4, #0]
 80049b6:	1821      	adds	r1, r4, r0
 80049b8:	428b      	cmp	r3, r1
 80049ba:	bf01      	itttt	eq
 80049bc:	6819      	ldreq	r1, [r3, #0]
 80049be:	685b      	ldreq	r3, [r3, #4]
 80049c0:	1809      	addeq	r1, r1, r0
 80049c2:	6021      	streq	r1, [r4, #0]
 80049c4:	e7ed      	b.n	80049a2 <_free_r+0x1e>
 80049c6:	461a      	mov	r2, r3
 80049c8:	685b      	ldr	r3, [r3, #4]
 80049ca:	b10b      	cbz	r3, 80049d0 <_free_r+0x4c>
 80049cc:	42a3      	cmp	r3, r4
 80049ce:	d9fa      	bls.n	80049c6 <_free_r+0x42>
 80049d0:	6811      	ldr	r1, [r2, #0]
 80049d2:	1850      	adds	r0, r2, r1
 80049d4:	42a0      	cmp	r0, r4
 80049d6:	d10b      	bne.n	80049f0 <_free_r+0x6c>
 80049d8:	6820      	ldr	r0, [r4, #0]
 80049da:	4401      	add	r1, r0
 80049dc:	1850      	adds	r0, r2, r1
 80049de:	4283      	cmp	r3, r0
 80049e0:	6011      	str	r1, [r2, #0]
 80049e2:	d1e0      	bne.n	80049a6 <_free_r+0x22>
 80049e4:	6818      	ldr	r0, [r3, #0]
 80049e6:	685b      	ldr	r3, [r3, #4]
 80049e8:	4401      	add	r1, r0
 80049ea:	6011      	str	r1, [r2, #0]
 80049ec:	6053      	str	r3, [r2, #4]
 80049ee:	e7da      	b.n	80049a6 <_free_r+0x22>
 80049f0:	d902      	bls.n	80049f8 <_free_r+0x74>
 80049f2:	230c      	movs	r3, #12
 80049f4:	602b      	str	r3, [r5, #0]
 80049f6:	e7d6      	b.n	80049a6 <_free_r+0x22>
 80049f8:	6820      	ldr	r0, [r4, #0]
 80049fa:	1821      	adds	r1, r4, r0
 80049fc:	428b      	cmp	r3, r1
 80049fe:	bf01      	itttt	eq
 8004a00:	6819      	ldreq	r1, [r3, #0]
 8004a02:	685b      	ldreq	r3, [r3, #4]
 8004a04:	1809      	addeq	r1, r1, r0
 8004a06:	6021      	streq	r1, [r4, #0]
 8004a08:	6063      	str	r3, [r4, #4]
 8004a0a:	6054      	str	r4, [r2, #4]
 8004a0c:	e7cb      	b.n	80049a6 <_free_r+0x22>
 8004a0e:	bd38      	pop	{r3, r4, r5, pc}
 8004a10:	20000190 	.word	0x20000190

08004a14 <_read_r>:
 8004a14:	b538      	push	{r3, r4, r5, lr}
 8004a16:	4604      	mov	r4, r0
 8004a18:	4608      	mov	r0, r1
 8004a1a:	4611      	mov	r1, r2
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	4d05      	ldr	r5, [pc, #20]	; (8004a34 <_read_r+0x20>)
 8004a20:	602a      	str	r2, [r5, #0]
 8004a22:	461a      	mov	r2, r3
 8004a24:	f7fc fa64 	bl	8000ef0 <_read>
 8004a28:	1c43      	adds	r3, r0, #1
 8004a2a:	d102      	bne.n	8004a32 <_read_r+0x1e>
 8004a2c:	682b      	ldr	r3, [r5, #0]
 8004a2e:	b103      	cbz	r3, 8004a32 <_read_r+0x1e>
 8004a30:	6023      	str	r3, [r4, #0]
 8004a32:	bd38      	pop	{r3, r4, r5, pc}
 8004a34:	20000198 	.word	0x20000198

08004a38 <_fstat_r>:
 8004a38:	b538      	push	{r3, r4, r5, lr}
 8004a3a:	2300      	movs	r3, #0
 8004a3c:	4d06      	ldr	r5, [pc, #24]	; (8004a58 <_fstat_r+0x20>)
 8004a3e:	4604      	mov	r4, r0
 8004a40:	4608      	mov	r0, r1
 8004a42:	4611      	mov	r1, r2
 8004a44:	602b      	str	r3, [r5, #0]
 8004a46:	f7fc fa97 	bl	8000f78 <_fstat>
 8004a4a:	1c43      	adds	r3, r0, #1
 8004a4c:	d102      	bne.n	8004a54 <_fstat_r+0x1c>
 8004a4e:	682b      	ldr	r3, [r5, #0]
 8004a50:	b103      	cbz	r3, 8004a54 <_fstat_r+0x1c>
 8004a52:	6023      	str	r3, [r4, #0]
 8004a54:	bd38      	pop	{r3, r4, r5, pc}
 8004a56:	bf00      	nop
 8004a58:	20000198 	.word	0x20000198

08004a5c <_isatty_r>:
 8004a5c:	b538      	push	{r3, r4, r5, lr}
 8004a5e:	2300      	movs	r3, #0
 8004a60:	4d05      	ldr	r5, [pc, #20]	; (8004a78 <_isatty_r+0x1c>)
 8004a62:	4604      	mov	r4, r0
 8004a64:	4608      	mov	r0, r1
 8004a66:	602b      	str	r3, [r5, #0]
 8004a68:	f7fc fa95 	bl	8000f96 <_isatty>
 8004a6c:	1c43      	adds	r3, r0, #1
 8004a6e:	d102      	bne.n	8004a76 <_isatty_r+0x1a>
 8004a70:	682b      	ldr	r3, [r5, #0]
 8004a72:	b103      	cbz	r3, 8004a76 <_isatty_r+0x1a>
 8004a74:	6023      	str	r3, [r4, #0]
 8004a76:	bd38      	pop	{r3, r4, r5, pc}
 8004a78:	20000198 	.word	0x20000198

08004a7c <_init>:
 8004a7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a7e:	bf00      	nop
 8004a80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a82:	bc08      	pop	{r3}
 8004a84:	469e      	mov	lr, r3
 8004a86:	4770      	bx	lr

08004a88 <_fini>:
 8004a88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a8a:	bf00      	nop
 8004a8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a8e:	bc08      	pop	{r3}
 8004a90:	469e      	mov	lr, r3
 8004a92:	4770      	bx	lr
